/*
 * splitit-web-api-v3
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Splitit.Net.Client;
using Splitit.Net.Api;
using Splitit.Net.Model;

namespace Splitit.Net.Test
{
    /// <summary>
    ///  Class for testing InstallmentPlanApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class InstallmentPlanApiTests
    {
        private InstallmentPlanApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InstallmentPlanApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InstallmentPlanApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' InstallmentPlanApi
            //Assert.IsInstanceOf(typeof(InstallmentPlanApi), instance);
        }

        
        /// <summary>
        /// Test InstallmentPlanCancel
        /// </summary>
        [Test]
        public void InstallmentPlanCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //var response = instance.InstallmentPlanCancel(installmentPlanNumber, xSplititIdempotencyKey);
            //Assert.IsInstanceOf(typeof(InstallmentPlanCancelResponse), response, "response is InstallmentPlanCancelResponse");
        }
        
        /// <summary>
        /// Test InstallmentPlanGet
        /// </summary>
        [Test]
        public void InstallmentPlanGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //var response = instance.InstallmentPlanGet(installmentPlanNumber, xSplititIdempotencyKey);
            //Assert.IsInstanceOf(typeof(InstallmentPlanModel), response, "response is InstallmentPlanModel");
        }
        
        /// <summary>
        /// Test InstallmentPlanPost
        /// </summary>
        [Test]
        public void InstallmentPlanPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xSplititIdempotencyKey = null;
            //InstallmentPlanCreateRequest installmentPlanCreateRequest = null;
            //string xSplititTestMode = null;
            //var response = instance.InstallmentPlanPost(xSplititIdempotencyKey, installmentPlanCreateRequest, xSplititTestMode);
            //Assert.IsInstanceOf(typeof(InstallmentPlanModel), response, "response is InstallmentPlanModel");
        }
        
        /// <summary>
        /// Test InstallmentPlanRefund
        /// </summary>
        [Test]
        public void InstallmentPlanRefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //InstallmentPlanRefundRequest installmentPlanRefundRequest = null;
            //var response = instance.InstallmentPlanRefund(installmentPlanNumber, xSplititIdempotencyKey, installmentPlanRefundRequest);
            //Assert.IsInstanceOf(typeof(InstallmentPlanRefundResponse), response, "response is InstallmentPlanRefundResponse");
        }
        
        /// <summary>
        /// Test InstallmentPlanSearch
        /// </summary>
        [Test]
        public void InstallmentPlanSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xSplititIdempotencyKey = null;
            //string installmentPlanNumber = null;
            //string refOrderNumber = null;
            //Dictionary<string, string> extendedParams = null;
            //var response = instance.InstallmentPlanSearch(xSplititIdempotencyKey, installmentPlanNumber, refOrderNumber, extendedParams);
            //Assert.IsInstanceOf(typeof(InstallmentPlanGetResponse), response, "response is InstallmentPlanGetResponse");
        }
        
        /// <summary>
        /// Test InstallmentPlanUpdateOrder
        /// </summary>
        [Test]
        public void InstallmentPlanUpdateOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //UpdateOrderRequest updateOrderRequest = null;
            //var response = instance.InstallmentPlanUpdateOrder(installmentPlanNumber, xSplititIdempotencyKey, updateOrderRequest);
            //Assert.IsInstanceOf(typeof(InstallmentPlanUpdateResponse), response, "response is InstallmentPlanUpdateResponse");
        }
        
        /// <summary>
        /// Test InstallmentPlanUpdateOrder2
        /// </summary>
        [Test]
        public void InstallmentPlanUpdateOrder2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xSplititIdempotencyKey = null;
            //InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier = null;
            //var response = instance.InstallmentPlanUpdateOrder2(xSplititIdempotencyKey, installmentPlanUpdateRequestByIdentifier);
            //Assert.IsInstanceOf(typeof(InstallmentPlanUpdateResponse), response, "response is InstallmentPlanUpdateResponse");
        }
        
        /// <summary>
        /// Test InstallmentPlanVerifyAuthorization
        /// </summary>
        [Test]
        public void InstallmentPlanVerifyAuthorizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string installmentPlanNumber = null;
            //string xSplititIdempotencyKey = null;
            //var response = instance.InstallmentPlanVerifyAuthorization(installmentPlanNumber, xSplititIdempotencyKey);
            //Assert.IsInstanceOf(typeof(VerifyAuthorizationResponse), response, "response is VerifyAuthorizationResponse");
        }
        
    }

}
