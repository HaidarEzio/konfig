#import <Foundation/Foundation.h>
#import "KApiResponse.h"
#import "KOrder.h"
#import "KPet.h"
#import "KApi.h"

/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface KPetApi: NSObject <KApi>

extern NSString* kKPetApiErrorDomain;
extern NSInteger kKPetApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(KApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add a new pet to the store
/// 
///
/// @param pet Pet object that needs to be added to the store
/// 
///  code:200 message:"successful operation",
///  code:405 message:"Invalid input"
///
/// @return KPet*
-(NSURLSessionTask*) addPetWithPet: (KPet*) pet
    completionHandler: (void (^)(KPet* output, NSError* error)) handler;


/// Deletes a pet
/// 
///
/// @param petId Pet id to delete
/// @param apiKey  (optional)
/// 
///  code:400 message:"Invalid pet value"
///
/// @return void
-(NSURLSessionTask*) deletePetWithPetId: (NSNumber*) petId
    apiKey: (NSString*) apiKey
    completionHandler: (void (^)(NSError* error)) handler;


/// Finds Pets by status
/// Multiple status values can be provided with comma separated strings
///
/// @param status Status values that need to be considered for filter
/// 
///  code:200 message:"successful operation",
///  code:400 message:"Invalid status value"
///
/// @return NSArray<KPet>*
-(NSURLSessionTask*) findPetsByStatusWithStatus: (NSArray<NSString*>*) status
    completionHandler: (void (^)(NSArray<KPet>* output, NSError* error)) handler;


/// Finds Pets by tags
/// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
///
/// @param tags Tags to filter by
/// 
///  code:200 message:"successful operation",
///  code:400 message:"Invalid tag value"
///
/// @return NSArray<KPet>*
-(NSURLSessionTask*) findPetsByTagsWithTags: (NSArray<NSString*>*) tags
    completionHandler: (void (^)(NSArray<KPet>* output, NSError* error)) handler;


/// Find pet by ID
/// Returns a single pet
///
/// @param petId ID of pet to return
/// 
///  code:200 message:"successful operation",
///  code:400 message:"Invalid ID supplied",
///  code:404 message:"Pet not found"
///
/// @return KPet*
-(NSURLSessionTask*) getPetByIdWithPetId: (NSNumber*) petId
    completionHandler: (void (^)(KPet* output, NSError* error)) handler;


/// Place an order for a pet
/// 
///
/// @param order order placed for purchasing the pet
/// 
///  code:200 message:"successful operation",
///  code:400 message:"Invalid Order"
///
/// @return KOrder*
-(NSURLSessionTask*) placeOrderWithOrder: (KOrder*) order
    completionHandler: (void (^)(KOrder* output, NSError* error)) handler;


/// Update an existing pet
/// 
///
/// @param pet Pet object that needs to be added to the store
/// 
///  code:200 message:"successful operation",
///  code:400 message:"Invalid ID supplied",
///  code:404 message:"Pet not found",
///  code:405 message:"Validation exception"
///
/// @return KPet*
-(NSURLSessionTask*) updatePetWithPet: (KPet*) pet
    completionHandler: (void (^)(KPet* output, NSError* error)) handler;


/// Updates a pet in the store with form data
/// 
///
/// @param petId ID of pet that needs to be updated
/// @param name Updated name of the pet (optional)
/// @param status Updated status of the pet (optional)
/// 
///  code:405 message:"Invalid input"
///
/// @return void
-(NSURLSessionTask*) updatePetWithFormWithPetId: (NSNumber*) petId
    name: (NSString*) name
    status: (NSString*) status
    completionHandler: (void (^)(NSError* error)) handler;


/// uploads an image
/// 
///
/// @param petId ID of pet to update
/// @param additionalMetadata Additional data to pass to server (optional)
/// @param file file to upload (optional)
/// 
///  code:200 message:"successful operation"
///
/// @return KApiResponse*
-(NSURLSessionTask*) uploadFileWithPetId: (NSNumber*) petId
    additionalMetadata: (NSString*) additionalMetadata
    file: (NSURL*) file
    completionHandler: (void (^)(KApiResponse* output, NSError* error)) handler;



@end
