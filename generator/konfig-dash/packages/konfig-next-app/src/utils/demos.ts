export const snapTradeGettingStartedMarkdown = `### 1) Initialize a client with your clientId and consumerKey

You can get your \`clientId\` and \`consumerKey\` by contacting [api@snaptrade.com](mailto:api@snaptrade.com)

:::form

::input{name=SNAPTRADE_CLIENT_ID label="Client ID" placeholder="YOUR_CLIENT_ID" type="password"}

::input{name=SNAPTRADE_CONSUMER_KEY label="Consumer Key" placeholder="YOUR_CONSUMER_KEY" type="password"}

\`\`\`python
from snaptrade_client import SnapTrade
from pprint import pprint
import uuid
import os

snaptrade = SnapTrade(
  consumer_key=SNAPTRADE_CONSUMER_KEY,
  client_id=SNAPTRADE_CLIENT_ID,
)

print("Successfully initiated client")
\`\`\`


::button[Initialize SDK Client]

:::

### 2) Check that the client is able to make a request to the API server

Call the API Status endpoint to make sure the API is live and that you can make
the most basic request. You should receive a response indicating the API status,
current server timestamp, and internal API minor version number.

:::form

\`\`\`python
api_response = snaptrade.api_status.check()
pprint(api_response.body)
\`\`\`

::button[Check API Status]

:::

### 3) Create a new user on SnapTrade

To create a secure brokerage authorization, we first need to register a test
user. Call the Register user endpoint with a userId which can be any string as
long as it's unique to a user. Upon receiving a 200 response, the user is
registered successfully and you should receive a response with a user id and a
randomly generated user secret. You can think of the user secret like a per-user
API key that provides an additional layer of security for protecting user data.
The user id and user secret need to be passed along to all SnapTrade API
endpoints that involve access to user data.

:::form

::input{name=SNAPTRADE_USER_ID label="SnapTrade User ID" placeholder="YOUR_SNAPTRADE_USER_ID" type="password"}

\`\`\`python
user_id = SNAPTRADE_USER_ID
register_response = snaptrade.authentication.register_snap_trade_user(
    user_id=user_id
)
pprint(register_response.body)

# Note: A user secret is only generated once. It's required to access
# resources for certain endpoints.
user_secret = register_response.body["userSecret"]
\`\`\`

::button[Create a new user on SnapTrade]

:::

### 4) Get a redirect URI

SnapTrade partners need to generate a redirect URI for a user so they can
securely log in to the SnapTrade Connection portal and connect their accounts.
The redirect URI can be generated by sending a POST request to the Login
endpoint. userId and userSecret (previously generated through calling the
registerUser endpoint) have to be in the query parameters of the POST request.
The response would indicate a redirectURI to be used for login a user to the
SnapTrade portal.

:::form

\`\`\`python
redirect_uri = snaptrade.authentication.login_snap_trade_user(
  user_id=user_id, user_secret=user_secret
)

print(redirect_uri.body["redirectURI"])
\`\`\`

::button[Get Redirect URI]

:::

### 5) Get account holdings data

In order to retrieve user holdings for a specific account, you can call the
Holdings endpoint by passing the clientId, timestamp, userId and list of account
numbers (accounts) to filter the holdings. In the response, you should get an
array of objects containing each account holdings data.


:::form
\`\`\`python
holdings = snaptrade.account_information.get_all_user_holdings(
  user_id=user_id, user_secret=user_secret
)
pprint(holdings.body)
\`\`\`

::button[Get Account Holdings]

:::

### 6) Deleting a user

Disabling all brokerage authorizations and permanently deleting all data
associated with the user


:::form
\`\`\`python
deleted_response = snaptrade.authentication.delete_snap_trade_user(
  user_id=user_id
)
pprint(deleted_response.body)
\`\`\`

::button[Delete User]

:::
`

export const snapTradeRegisteringUsersMarkdown = `### 1) Initialize a client with your clientId and consumerKey

You can get your \`clientId\` and \`consumerKey\` by contacting [api@snaptrade.com](mailto:api@snaptrade.com)

:::form

::input{name=SNAPTRADE_CLIENT_ID label="Client ID" placeholder="YOUR_CLIENT_ID" type="password"}

::input{name=SNAPTRADE_CONSUMER_KEY label="Consumer Key" placeholder="YOUR_CONSUMER_KEY" type="password"}

\`\`\`python
from snaptrade_client import SnapTrade
from pprint import pprint
import uuid
import os

snaptrade = SnapTrade(
  consumer_key=SNAPTRADE_CONSUMER_KEY,
  client_id=SNAPTRADE_CLIENT_ID,
)

print("Successfully initiated client")
\`\`\`


::button[Initialize SDK Client]

:::

### 2) Check that the client is able to make a request to the API server

Call the API Status endpoint to make sure the API is live and that you can make
the most basic request. You should receive a response indicating the API status,
current server timestamp, and internal API minor version number.

:::form

\`\`\`python
api_response = snaptrade.api_status.check()
pprint(api_response.body)
\`\`\`

::button[Check API Status]

:::

### 3) Register User

To create a secure brokerage authorization, we first need to register a test
user. Call the Register user endpoint with a userId which can be any string as
long as it's unique to a user. Upon receiving a 200 response, the user is
registered successfully and you should receive a response with a user id and a
randomly generated user secret. You can think of the user secret like a per-user
API key that provides an additional layer of security for protecting user data.
The user id and user secret need to be passed along to all SnapTrade API
endpoints that involve access to user data.

:::form

::input{name=SNAPTRADE_USER_ID label="SnapTrade User ID" placeholder="YOUR_SNAPTRADE_USER_ID" type="password"}

\`\`\`python
user_id = SNAPTRADE_USER_ID
register_response = snaptrade.authentication.register_snap_trade_user(
    user_id=user_id
)
pprint(register_response.body)

# Note: A user secret is only generated once. It's required to access
# resources for certain endpoints.
user_secret = register_response.body["userSecret"]
\`\`\`

::button[Create a new user on SnapTrade]

:::

### 4) Login User

SnapTrade partners need to generate a redirect URI for a user so they can
securely log in to the SnapTrade Connection portal and connect their accounts.
The redirect URI can be generated by sending a POST request to the Login
endpoint. userId and userSecret (previously generated through calling the
registerUser endpoint) have to be in the query parameters of the POST request.
The response would indicate a redirectURI to be used for login a user to the
SnapTrade portal.

:::form

\`\`\`python
redirect_uri = snaptrade.authentication.login_snap_trade_user(
  user_id=user_id, user_secret=user_secret
)

print(redirect_uri.body["redirectURI"])
\`\`\`

::button[Login User]

:::

### 5) List Users


:::form
\`\`\`python
users = snaptrade.authentication.list_snap_trade_users()
pprint(users.body)
\`\`\`

::button[List Users]

:::

### 6) Deleting a user

Disabling all brokerage authorizations and permanently deleting all data
associated with the user

:::form
\`\`\`python
deleted_response = snaptrade.authentication.delete_snap_trade_user(
  user_id=user_id
)
pprint(deleted_response.body)
\`\`\`

::button[Delete User]

:::
`

export const snapTradeHandlingUserDataMarkdown = `
:::info
This demo is for after a user is created and connected. See [Getting Started](/snaptrade/snaptrade-demos/getting-started) or
[Registering Users](/snaptrade/snaptrade-demos/registering-users) for creating and connecting a user to SnapTrade.
:::

### 1) Initialize a client with your clientId and consumerKey

You can get your \`clientId\` and \`consumerKey\` by contacting [api@snaptrade.com](mailto:api@snaptrade.com)

:::form

::input{name=SNAPTRADE_CLIENT_ID label="Client ID" placeholder="YOUR_CLIENT_ID" type="password"}

::input{name=SNAPTRADE_CONSUMER_KEY label="Consumer Key" placeholder="YOUR_CONSUMER_KEY" type="password"}

\`\`\`python
from snaptrade_client import SnapTrade
from pprint import pprint
import uuid
import os

snaptrade = SnapTrade(
  consumer_key=SNAPTRADE_CONSUMER_KEY,
  client_id=SNAPTRADE_CLIENT_ID,
)

print("Successfully initiated client")
\`\`\`


::button[Initialize SDK Client]

:::

### 2) Get all user holdings

List all accounts for the user, plus balances and positions for each account.

:::form

::input{name=USER_ID label="User ID" placeholder="YOUR_USER_ID" type="password"}

::input{name=USER_SECRET label="User Secret" placeholder="YOUR_USER_SECRET" type="password"}

\`\`\`python
user_id = USER_ID
user_secret = USER_SECRET
holdings = snaptrade.account_information.get_all_user_holdings(
  user_id=USER_ID, user_secret=user_secret
)
pprint(holdings.body)
\`\`\`

::button[Get all user holdings]

:::

### 3) Get Transactions / Historical Activities

Returns activities (transactions) for a user. Specifying start and end date is
highly recommended for automatic calls for better performance. This uses the
TransactionsAndReporting API.

:::form

::date{name=START_DATE label="Start Date" placeholder="START_DATE" valueFormat="YYYY-MM-DD" optional}
::date{name=END_DATE label="End Date" placeholder="END_DATE" valueFormat="YYYY-MM-DD" optional}
::input{name=ACCOUNTS label="Account(s)" placeholder="YOUR_ACCOUNT_IDS" description="Optional comma seperated list of account IDs used to filter the request on specific accounts" optional}
::input{name=BROKERAGE_AUTHORIZATIONS label="Brokerage Authorizations" placeholder="YOUR_BROKERAGE_AUTHORIZATION" description="Optional comma seperated list of brokerage authorization IDs used to filter the request on only accounts that belong to those authorizations" optional}
::input{name=TYPE label="Type" placeholder="DIVIDEND" description="Optional comma seperated list of types to filter activities by" optional}


\`\`\`python
activities = snaptrade.transactions_and_reporting.get_activities(
  user_id=user_id,
  user_secret=user_secret,
  start_date=START_DATE if "START_DATE" in globals() else None,
  end_date=END_DATE if "END_DATE" in globals() else None,
  accounts=ACCOUNTS if "ACCOUNTS" in globals() else None,
  brokerage_authorizations=BROKERAGE_AUTHORIZATIONS if "BROKERAGE_AUTHORIZATIONS" in globals() else None,
  type=TYPE if "TYPE" in globals() else None
)
pprint(activities.body)
\`\`\`

::button[Get Activities]

:::

### 4) Get Quotes

Get symbol quotes for a user, these are account and thus brokerage specific.
That means if you have a US only account, you cannot get quotes for
international exchanges. This uses the Trading API.

:::form

::input{name=SYMBOLS label="Symbols" placeholder="AAPL" description="List of universal_symbol_id or tickers to get quotes for"}
::input{name=ACCOUNT_ID label="Account ID" placeholder="ACCOUNT ID" description="The ID of the account to get quotes"}
::input{name=USE_TICKER type="checkbox" defaultValue=true label="Use Ticker" description="Should be set to True if providing tickers" optional}


\`\`\`python
activities = snaptrade.trading.get_user_account_quotes(
  user_id=user_id,
  user_secret=user_secret,
  symbols=SYMBOLS,
  account_id=ACCOUNT_ID,
  use_ticker=USE_TICKER if "USE_TICKER" in globals() else None,
)
pprint(activities.body)
\`\`\`

::button[Get Activities]

:::
`

export const snapTradePlacingTradesMarkdown = `
:::info
This demo is for after a user is created and connected. See [Getting Started](/snaptrade/snaptrade-demos/getting-started) or
[Registering Users](/snaptrade/snaptrade-demos/registering-users) for creating and connecting a user to SnapTrade.
:::

### 1) Initialize a client with your clientId and consumerKey / assign \`user_id\` and \`user_secret\` to variables

You can get your \`clientId\` and \`consumerKey\` by contacting [api@snaptrade.com](mailto:api@snaptrade.com)

:::form

::input{name=SNAPTRADE_CLIENT_ID label="Client ID" placeholder="YOUR_CLIENT_ID" type="password"}

::input{name=SNAPTRADE_CONSUMER_KEY label="Consumer Key" placeholder="YOUR_CONSUMER_KEY" type="password"}

::input{name=USER_ID label="User ID" placeholder="YOUR_USER_ID" type="password"}

::input{name=USER_SECRET label="User Secret" placeholder="YOUR_USER_SECRET" type="password"}

\`\`\`python
from snaptrade_client import SnapTrade
from pprint import pprint
import uuid
import os

snaptrade = SnapTrade(
  consumer_key=SNAPTRADE_CONSUMER_KEY,
  client_id=SNAPTRADE_CLIENT_ID,
)

print("Successfully initiated client")

user_id = USER_ID
user_secret = USER_SECRET

print("Initialized user_id and user_secret")
\`\`\`


::button[Initialize SDK Client / Assign Variables]

:::

### 2) Get Order Impact

Check the account has enough cash to place trades.


:::form

::input{name=ACCOUNT_ID label="Account ID" placeholder="ACCOUNT ID" description="The ID of the account to check"}
::input{name=UNIVERSAL_SYMBOL label="Universal Symbol" defaultValue="c15a817e-7171-4940-9ae7-f7b4a95408ee"}
::input{name=ACTION label="Action" defaultValue="BUY"}
::input{name=ORDER_TYPE label="Order Type" defaultValue="Limit"}
::input{name=TIME_IN_FORCE label="Time in Force" defaultValue="Day"}
::number{name=PRICE label="Price" defaultValue=10, step=0.01 precision=2}
::number{name=UNITS label="Units" defaultValue=1}

\`\`\`python
result = snaptrade.trading.get_order_impact(
  user_id=user_id,
  user_secret=user_secret,
  action=ACTION,
  account_id=ACCOUNT_ID,
  universal_symbol_id=UNIVERSAL_SYMBOL,
  order_type=ORDER_TYPE,
  time_in_force=TIME_IN_FORCE,
  price=PRICE,
  units=UNITS,
)
pprint(result.body)
\`\`\`

::button[Get Order Impact]

:::

### 3) Place Force Order

Place the order without checking impact

:::form

::input{name=ACCOUNT_ID label="Account ID" placeholder="ACCOUNT ID" description="The ID of the account to check"}
::input{name=UNIVERSAL_SYMBOL label="Universal Symbol" defaultValue="c15a817e-7171-4940-9ae7-f7b4a95408ee"}
::input{name=ACTION label="Action" defaultValue="BUY"}
::input{name=ORDER_TYPE label="Order Type" defaultValue="Limit"}
::input{name=TIME_IN_FORCE label="Time in Force" defaultValue="Day"}
::number{name=PRICE label="Price" defaultValue=10, step=0.01 precision=2}
::number{name=UNITS label="Units" defaultValue=1}

\`\`\`python
result = snaptrade.trading.place_force_order(
  user_id=user_id,
  user_secret=user_secret,
  action=ACTION,
  account_id=ACCOUNT_ID,
  universal_symbol_id=UNIVERSAL_SYMBOL,
  order_type=ORDER_TYPE,
  time_in_force=TIME_IN_FORCE,
  price=PRICE,
  units=UNITS,
)
pprint(result.body)
\`\`\`

::button[Place Force Order]

:::

`

export type Demo = {
  id: string
  name: string
  markdown: string
}
export type Portal = {
  id: string
  portalName: string
  demos: Demo[]
}
export type Organization = {
  id: string
  organizationName: string
  portals: Portal[]
}

export const demos: Organization[] = [
  {
    id: 'snaptrade',
    organizationName: 'SnapTrade',
    portals: [
      {
        id: 'snaptrade-demos',
        portalName: 'SnapTrade Demos',
        demos: [
          {
            id: 'getting-started',
            name: 'Getting Started',
            markdown: snapTradeGettingStartedMarkdown,
          },
          {
            id: 'registering-users',
            name: 'Registering Users',
            markdown: snapTradeRegisteringUsersMarkdown,
          },
          {
            id: 'handling-user-data',
            name: 'Handling User Data',
            markdown: snapTradeHandlingUserDataMarkdown,
          },
          {
            id: 'placing-trades',
            name: 'Placing Trades',
            markdown: snapTradePlacingTradesMarkdown,
          },
        ],
      },
    ],
  },
]
