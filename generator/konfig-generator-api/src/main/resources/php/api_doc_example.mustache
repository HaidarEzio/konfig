<?php
require_once(__DIR__ . '/vendor/autoload.php');
{{> php_doc_auth_partial}}
// Setting host path is optional and defaults to {{{basePath}}}
// {{invokerPackage}}\Configuration::getDefaultConfiguration()->setHost("{{{basePath}}}");

$apiInstance = new {{invokerPackage}}\Api\{{classname}}(
    // If you want use custom http client, pass your client which implements `GuzzleHttp\ClientInterface`.
    // This is optional, `GuzzleHttp\Client` will be used as default.
    // new GuzzleHttp\Client(){{#hasAuthMethods}},
    $config{{/hasAuthMethods}}
);

{{^vendorExtensions.x-group-parameters}}
{{#allParams}}${{paramName}} = {{#isModel}}new {{dataType}}({{/isModel}}{{{example}}}{{#isModel}}){{/isModel}};{{#description}} // {{{.}}}{{/description}}
{{/allParams}}{{#servers}}{{#-first}}
$hostIndex = 0;
$variables = [{{#variables}}
    '{{{name}}}' => '{{{default}}}{{^default}}YOUR_VALUE{{/default}}',{{/variables}}
];
{{/-first}}{{/servers}}{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}
$request = [
{{#allParams}}    '{{paramName}}' => {{#isModel}}new {{dataType}}({{/isModel}}{{{example}}}{{#isModel}}){{/isModel}},{{#description}} // {{{.}}}{{/description}}
{{/allParams}}
{{#servers}}{{#-first}}
    'hostIndex' => 0,
    $variables = [{{#variables}}
        '{{{name}}}' => '{{{default}}}{{^default}}YOUR_VALUE{{/default}}',{{/variables}}
    ],
{{/-first}}{{/servers}}];
{{/vendorExtensions.x-group-parameters}}

try {
    {{#returnType}}$result = {{/returnType}}$apiInstance->{{{operationId}}}{{^hasParams}}(){{/hasParams}}{{#hasParams}}{{^vendorExtensions.x-group-parameters}}(
{{#allParams}}
        {{paramName}}: ${{paramName}}{{^-last}}, {{/-last}}
{{/allParams}}
    ){{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}(request){{/vendorExtensions.x-group-parameters}}{{/hasParams}};{{#returnType}}{{#returnModel}}{{#hasVars}}{{#vars}}
    print_r($result->${{{getter}}}());{{/vars}}{{/hasVars}}{{^hasVars}}print_r($result);{{/hasVars}}{{/returnModel}}{{/returnType}}
} catch (\Exception $e) {
    echo 'Exception when calling {{classname}}->{{operationId}}: ', $e->getMessage(), PHP_EOL;
}