/*
{{#appName}}
{{{.}}}
{{/appName}}

Testing {{classname}}Service

*/

// Code generated by Konfig (https://konfigthis.com);

package {{packageName}}

import ({{#authMethods}}{{#-first}}{{#isApiKey}}
    "os"
    "context"{{/isApiKey}}{{/-first}}{{/authMethods}}
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    {{goImportAlias}} "{{gitHost}}/{{gitUserId}}/{{gitRepoId}}{{#isGoSubmodule}}/{{packageName}}{{/isGoSubmodule}}"
)

func Test_{{packageName}}_{{classname}}Service(t *testing.T) {

    configuration := {{goImportAlias}}.NewConfiguration()
    {{#hasAuthMethods}}
    {{#authMethods}}{{#-first}}
    {{#isApiKey}}
    apiKey := os.Getenv("API_KEY")
    configuration.Context = context.WithValue(configuration.Context, {{goImportAlias}}.ContextAPIKeys, map[string]{{goImportAlias}}.APIKey{
        "{{name}}": {Key: apiKey},
    })
    {{/isApiKey}}
    {{/-first}}{{/authMethods}}
    {{/hasAuthMethods}}
    apiClient := {{goImportAlias}}.NewAPIClient(configuration)

{{#operations}}
{{#operation}}
    t.Run("Test {{classname}}Service {{{nickname}}}", func(t *testing.T) {

        {{^pathParams}}
        t.Skip("skip test")  // remove to run test
        {{/pathParams}}
        {{#pathParams}}
        {{#-first}}
        t.Skip("skip test")  // remove to run test

        {{/-first}}
        var {{paramName}} {{{dataType}}}
        {{/pathParams}}

        resp, httpRes, err := apiClient.{{classname}}.{{operationId}}({{#pathParams}}{{paramName}}{{^-last}}, {{/-last}}{{/pathParams}}).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

{{/operation}}
{{/operations}}
}
