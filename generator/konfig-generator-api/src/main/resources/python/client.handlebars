# coding: utf-8
{{>partial_header}}

import typing
import inspect
from datetime import date, datetime
from {{packageName}}.configuration import Configuration
from {{packageName}}.api_client import ApiClient
{{#with apiInfo}}
{{#each apis}}
from {{packageName}}.apis.tags.{{classVarName}} import {{classname}}
{{/each}}
{{/with}}

{{#each topLevelClientTypeImports}}
{{.}}
{{/each}}


class {{clientName}}:

    def __init__(self, configuration: typing.Union[Configuration, None] = None, **kwargs):
        if (len(kwargs) > 0):
            configuration = Configuration(**kwargs)
        if (configuration is None):
            raise Exception("configuration is required")
        api_client = ApiClient(configuration)
        {{#with apiInfo}}
        {{#each apis}}
        self.{{> api_class_name}} = {{classname}}(api_client)
        {{/each}}
        {{/with}}
{{#with apiInfo}}
{{#each apis}}
{{#each topLevelOperations}}

    async def a{{vendorExtensions.x-konfig-top-level-operation}}(
    {{> endpoint_args async=true isOverload=false skipDeserialization="null" contentType="null" interface=true omitReturnType=true}}
        _args = {}
        for arg in inspect.getfullargspec(self.{{vendorExtensions.x-konfig-top-level-operation}}).args:
            if arg != "self":
                _args[arg] = locals()[arg]
        return await self.{{> api_class_name}}.a{{operationId}}(**_args)

    def {{vendorExtensions.x-konfig-top-level-operation}}(
    {{> endpoint_args isOverload=false skipDeserialization="null" contentType="null" interface=true omitReturnType=true}}
        _args = {}
        for arg in inspect.getfullargspec(self.{{vendorExtensions.x-konfig-top-level-operation}}).args:
            if arg != "self":
                _args[arg] = locals()[arg]
        return self.{{> api_class_name}}.{{operationId}}(**_args)
{{/each}}
{{/each}}
{{/with}}
