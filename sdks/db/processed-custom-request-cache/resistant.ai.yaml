processed:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: >
        The standard [client
        credentials](https://developer.okta.com/docs/guides/implement-grant-type/clientcreds/main/#about-the-client-credentials-grant)
        flow:


        1. Client makes a
        [request](https://developer.okta.com/docs/guides/implement-grant-type/clientcreds/main/#request-for-token)
        to authorization server using client credentials

        ```

        BASIC_AUTH=$(echo -n $CLIENT_ID:$CLIENT_SECRET | base64)

        curl --request POST \
          --url 'https://eu.id.resistant.ai/oauth2/aus2un1hkrKhPjir4417/v1/token' \
          --header 'accept: application/json' \
          --header "authorization: Basic $BASIC_AUTH" \
          --header 'content-type: application/x-www-form-urlencoded' \
          --data 'grant_type=client_credentials&scope=submissions.read submissions.write'
        ```

        2. If the credentials are valid, authorization server responds with an
        access token

        ```

        {
          "access_token": "eyJhbG[...]1LQ",
          "token_type": "Bearer",
          "expires_in": 3600,
          "scope": "submissions.read submissions.write"
        }

        ```

        3. Client uses the access token to make subsequent API requests with
        Authorization header

        ```

        Authorization: Bearer eyJhbG[...]1LQ

        ```


        Please note that Token URL is specific for a given environment. Correct
        URL is in the corresponding environment documentation.
      flows:
        clientCredentials:
          tokenUrl: https://eu.id.resistant.ai/oauth2/aus2un1hkrKhPjir4417/v1/token
          scopes:
            submissions.read: Read analysis results for a submission
            submissions.write: Create a new submission
  apiBaseUrl: https://api.documents.resistant.ai
  apiVersion: 2.0.0b
  apiDescription: >-

    Resistant Documents provides this API to programmatically interact with its
    document analysis engine.

    Interaction with the API can be divided into three phases:


    1. Creating document submission

    2. Uploading a file for for analysis to an address returned from step 1.

    3. Fetching analysis results


    In the first step, the submission is created by posting to the 
    `/v2/submission` endpoint. The response contains a `submission_id` uniquely
    identifying the document to be analyzed throughout the entire interaction,
    and is used to fetch analysis results later.


    Submission response also returns `upload_url` containing a pre-signed URL.
    This URL should be used to upload the actual document to be analyzed in the
    second step. Please note the document has to be uploaded using HTTP `PUT`
    method with `Content-Type` HTTP header set to `application/octet-stream`.


    In the last step, client should repeatedly poll using the
    `/v2/submission/{submission_id}/fraud` endpoint for analysis results. The
    best practice is to use polling with an [exponential
    back-off](https://en.wikipedia.org/wiki/Exponential_backoff) to reduce load
    on the API.


    # Authentication


    <SecurityDefinitions />
  apiTitle: Resistant Documents API
  endpoints: 10
  sdkMethods: 11
  schemas: 78
  parameters: 24
  originalCustomRequest:
    lambda: true
  customRequestSpecFilename: resistant.ai.yaml
  difficultyScore: 56
