processed:
  securitySchemes:
    API_Key:
      type: apiKey
      description: >
        BTCPay Server supports authenticating and authorizing users through an
        API Key that is generated by them. Send the API Key as a header value to
        Authorization with the format: `token {token}`. For a smoother
        experience, you can generate a url that redirects users to an API key
        creation screen.

         The following permissions are available to the context of the user creating the API Key:

        * `unrestricted`: Unrestricted access

        * `btcpay.user.candeleteuser`: Delete user

        * `btcpay.user.canviewprofile`: View your profile

        * `btcpay.user.canmodifyprofile`: Manage your profile

        * `btcpay.user.canmanagenotificationsforuser`: Manage your notifications

        * `btcpay.user.canviewnotificationsforuser`: View your notifications


        The following permissions are available if the user is an administrator:


        * `btcpay.server.canviewusers`: View users

        * `btcpay.server.cancreateuser`: Create new users

        * `btcpay.server.canmanageusers`: Manage users

        * `btcpay.server.canmodifyserversettings`: Manage your server

        * `btcpay.server.canuseinternallightningnode`: Use the internal
        lightning node

        * `btcpay.server.canviewlightninginvoiceinternalnode`: View invoices
        from internal lightning node

        * `btcpay.server.cancreatelightninginvoiceinternalnode`: Create invoices
        with internal lightning node


        The following permissions applies to all stores of the user, you can
        limit to a specific store with the following format:
        `btcpay.store.cancreateinvoice:6HSHAEU4iYWtjxtyRs9KyPjM9GAQp8kw2T9VWbGG1FnZ`:


        * `btcpay.store.canmodifystoresettings`: Modify your stores

        * `btcpay.store.canviewcustodianaccounts`: View exchange accounts linked
        to your stores

        * `btcpay.store.canmanagecustodianaccounts`: Manage exchange accounts
        linked to your stores

        * `btcpay.store.candeposittocustodianaccount`: Deposit funds to exchange
        accounts linked to your stores

        * `btcpay.store.canwithdrawfromcustodianaccount`: Withdraw funds from
        exchange accounts to your store

        * `btcpay.store.cantradecustodianaccount`: Trade funds on your store's
        exchange accounts

        * `btcpay.store.webhooks.canmodifywebhooks`: Modify stores webhooks

        * `btcpay.store.canviewstoresettings`: View your stores

        * `btcpay.store.canviewreports`: View your reports

        * `btcpay.store.cancreateinvoice`: Create an invoice

        * `btcpay.store.canviewinvoices`: View invoices

        * `btcpay.store.canmodifyinvoices`: Modify invoices

        * `btcpay.store.canmodifypaymentrequests`: Modify your payment requests

        * `btcpay.store.canviewpaymentrequests`: View your payment requests

        * `btcpay.store.canviewpullpayments`: View your pull payments

        * `btcpay.store.canmanagepullpayments`: Manage your pull payments

        * `btcpay.store.canarchivepullpayments`: Archive your pull payments

        * `btcpay.store.cancreatepullpayments`: Create pull payments

        * `btcpay.store.canmanagepayouts`: Manage payouts

        * `btcpay.store.canviewpayouts`: View payouts

        * `btcpay.store.cancreatenonapprovedpullpayments`: Create non-approved
        pull payments

        * `btcpay.store.canuselightningnode`: Use the lightning nodes associated
        with your stores

        * `btcpay.store.canviewlightninginvoice`: View the lightning invoices
        associated with your stores

        * `btcpay.store.cancreatelightninginvoice`: Create invoices from the
        lightning nodes associated with your stores


        Note that API Keys only limits permission of a user and can never expand
        it. If an API Key has the permission
        `btcpay.server.canmodifyserversettings` but that the user account
        creating this API Key is not administrator, the API Key will not be able
        to modify the server settings.

        Some permissions may include other permissions, see [this
        operation](https://docs.btcpayserver.org).
      name: Authorization
      in: header
    Basic:
      type: http
      description: >-
        BTCPay Server supports authenticating and authorizing users through the
        Basic HTTP authentication scheme. Send the user and password encoded in
        base64 with the format `Basic {base64(username:password)}`. Using this
        authentication method implicitly provides you with the `unrestricted`
        permission
      scheme: Basic
  apiBaseUrl: /
  apiVersion: v1
  apiDescription: >+
    # Introduction


    The BTCPay Server Greenfield API is a REST API. Our API has predictable
    resource-oriented URLs, accepts form-encoded request bodies, returns
    JSON-encoded responses, and uses standard HTTP response codes,
    authentication, and verbs.


    # Authentication


    You can authenticate either via Basic Auth or an API key. It's recommended
    to use an API key for better security. You can create an API key in the
    BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can
    restrict the API key for one or multiple stores and for specific
    permissions. For testing purposes, you can give it the 'Unrestricted access'
    permission. On production you should limit the permissions to the actual
    endpoints you use, you can see the required permission on the API docs at
    the top of each endpoint under `AUTHORIZATIONS`.


    If you want to simplify the process of creating API keys for your users, you
    can use the [Authorization
    endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization)
    to predefine permissions and redirect your users to the BTCPay Server
    Authorization UI. You can find more information about this on the [API
    Authorization Flow
    docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/)
    page.


    # Usage examples


    Use **Basic Auth** to read store information with cURL:

    ```bash

    BTCPAY_INSTANCE="https://mainnet.demo.btcpayserver.org"

    USER="MyTestUser@gmail.com"

    PASSWORD="notverysecurepassword"

    PERMISSION="btcpay.store.canmodifystoresettings"

    BODY="$(echo "{}" | jq --arg "a" "$PERMISSION" '. + {permissions:[$a]}')"


    API_KEY="$(curl -s \
         -H "Content-Type: application/json" \
         --user "$USER:$PASSWORD" \
         -X POST \
         -d "$BODY" \
         "$BTCPAY_INSTANCE/api/v1/api-keys" | jq -r .apiKey)"
    ```



    Use an **API key** to read store information with cURL:

    ```bash

    STORE_ID="yourStoreId"


    curl -s \
         -H "Content-Type: application/json" \
         -H "Authorization: token $API_KEY" \
         -X GET \
         "$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID"
    ```


    You can find more examples on our docs for different programming languages:

    - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/)

    -
    [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/)

    - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)

  apiTitle: BTCPay Greenfield API
  endpoints: 121
  sdkMethods: 196
  schemas: 142
  parameters: 526
  contactUrl: https://btcpayserver.org
  originalCustomRequest:
    type: GET
    url: https://docs.btcpayserver.org/API/Greenfield/v1/swagger.json
  customRequestSpecFilename: btcpayserver.org.yaml
  difficultyScore: 398.5
