examples: {}
examples_2: {}
examples_3: {}
ignorePotentialIncorrectType: true
operationIds:
  /child:
    get: Child_getMany
    post: Child_createOne
  /child/{id}:
    delete: Child_deleteChild
    get: Child_getOneChild
    patch: Child_updateChildData
    put: Child_replaceChildData
  /company:
    get: Company_listManyCompanies
  /company/{id}:
    get: Company_getOne
  /compensation:
    get: Compensation_getManyCompensations
    post: Compensation_createOneCompensation
  /compensation/{id}:
    delete: Compensation_deleteOne
    get: Compensation_getOne
    patch: Compensation_updateOne
    put: Compensation_replaceOneCompensation
  /cost-center:
    get: Costcenter_getMany
    post: Costcenter_createOneCostCenter
  /cost-center/{id}:
    delete: Costcenter_deleteOneCostCenter
    get: Costcenter_getOneCostCenter
    patch: Costcenter_updateOneCostCenter
    put: Costcenter_replaceOneCostCenter
  /department:
    get: Department_listManyDepartments
    post: Department_createOne
  /department/{id}:
    delete: Department_deleteOneDepartment
    get: Department_getOne
    patch: Department_updateOneDepartment
    put: Department_replaceOne
  /employee:
    get: Employee_listManyEmployees
    post: Employee_createOneEmployee
  /employee-team-reference:
    get: Employeeteamreference_getMany
    post: Employeeteamreference_createOneEmployeeTeamReference
  /employee-team-reference/{id}:
    delete: Employeeteamreference_deleteOne
    get: Employeeteamreference_getOneEmployeeTeamReference
    patch: Employeeteamreference_updateOneEmployeeTeamReference
    put: Employeeteamreference_replaceOne
  /employee/{id}:
    delete: Employee_removeEmployee
    get: Employee_getOne
    patch: Employee_updateOne
    put: Employee_replaceOneEmployee
  /employment:
    get: Employment_listManyEmployments
    post: Employment_createOneEmployment
  /employment-type:
    get: Employmenttype_getManyEmploymentTypes
    post: Employmenttype_createOneEmploymentType
  /employment-type/{id}:
    delete: Employmenttype_deleteOneType
    get: Employmenttype_getOne
    patch: Employmenttype_updateOneEmploymentType
    put: Employmenttype_updateOneEmploymentType
  /employment/{id}:
    delete: Employment_removeOne
    get: Employment_getOne
    patch: Employment_updateEmploymentData
    put: Employment_replaceOne
  /leave:
    get: Leave_getManyLeaves
    post: Leave_createOne
  /leave-transaction:
    get: Leavetransaction_listManyTransactions
  /leave-transaction/{id}:
    get: Leavetransaction_getOneLeaveTransaction
  /leave-type:
    get: Leavetype_getManyLeaveTypes
    post: Leavetype_createOneLeaveType
  /leave-type/{id}:
    delete: Leavetype_deleteOneLeaveType
    get: Leavetype_getOneLeaveType
    patch: Leavetype_updateOneLeaveType
    put: Leavetype_replaceLeaveType
  /leave/{id}:
    delete: Leave_deleteOneLeave
    get: Leave_getOneLeave
    patch: Leave_updateOneLeave
    put: Leave_replaceOne
  /office:
    get: Office_listManyOffices
    post: Office_createOneOffice
  /office/{id}:
    delete: Office_deleteOne
    get: Office_getOneOffice
    patch: Office_updateOne
    put: Office_replaceOne
  /team:
    get: Team_listTeams
    post: Team_createOneTeam
  /team/{id}:
    delete: Team_deleteOne
    get: Team_getOneTeam
    patch: Team_updateTeam
    put: Team_replaceTeam
  /timesheet:
    get: Timesheet_getMany
  /timesheet-entry:
    get: Timesheetentry_listManyEntries
    post: Timesheetentry_createOneEntry
  /timesheet-entry-type:
    get: Timesheetentrytype_listManyTimesheetEntryTypes
  /timesheet-entry-type/{id}:
    get: Timesheetentrytype_getOneTimesheetEntryType
  /timesheet-entry/{id}:
    delete: Timesheetentry_deleteOneEntry
    get: Timesheetentry_getOneEntry
    patch: Timesheetentry_updateOneEntry
    put: Timesheetentry_updateOneEntry
  /timesheet/{id}:
    get: Timesheet_get
  /work-week:
    get: Workweek_getMany
    post: Workweek_createOneWorkweek
  /work-week/{id}:
    delete: Workweek_deleteOne
    get: Workweek_getOne
    patch: Workweek_updateOne
    put: Workweek_replaceOne
operationTags: {}
renameTags: {}
requestSchemaNames: {}
responseDescriptions: {}
responseSchemaNames: {}
securityParameters:
  filters:
    query: false
  limit:
    query: false
  offset:
    query: false
  relations:
    query: false
  select:
    query: false
  sort:
    query: false
validServerUrls: {}
