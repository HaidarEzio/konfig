hash: a54bd72d0e3f9c7c8ea56698f51d5f18b14cc52af6c659d5ba92e08737b4226a
methodObjects:
  - url: /bundle_offers
    method: generateNewOffer
    httpMethod: post
    tag: Bundle Offers
    typeScriptTag: bundleOffers
    description: Create Bundle Offer
    parameters:
      - name: bundle_id
        schema: string
        required: true
        description: ''
        example: 019cb030-aadd-4bb1-be61-00bc6c6a1b08
      - name: currency
        schema: string
        required: true
        description: ''
        example: USD
      - name: booking_value
        schema: object
        required: false
        description: ''
      - name: destination
        schema: object
        required: true
        description: ''
      - name: arrival_date_time
        schema: string
        required: true
        description: ''
        example: '2022-04-24T09:44:51'
      - name: return_date_time
        schema: string
        required: false
        description: ''
        example: '2022-04-24T09:44:51'
      - name: passengers
        schema: array
        required: true
        description: ''
      - name: outbound_flights
        schema: array
        required: false
        description: ''
      - name: inbound_flights
        schema: array
        required: false
        description: ''
      - name: available_data
        schema: object
        required: false
        description: ''
      - name: language
        schema: string
        required: false
        description: ''
        example: en
        default: en
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /bundle_offers/{bundle_offer_id}
    method: getById
    httpMethod: get
    tag: Bundle Offers
    typeScriptTag: bundleOffers
    description: Get Bundle Offer
    parameters:
      - name: bundleOfferId
        schema: string
        required: true
        description: ''
        example: 8162eccc-6050-4eaa-8df0-0998cf9e9cf6
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /orders
    method: placeOrder
    httpMethod: post
    tag: Orders
    typeScriptTag: orders
    description: Create Order
    parameters:
      - name: currency
        schema: string
        required: true
        description: ''
        example: USD
      - name: bundle_offer_id
        schema: string
        required: true
        description: ''
        example: 6982caed-fbfc-4719-bc41-0060a1c97e5d
      - name: client_reference_id
        schema: string
        required: true
        description: ''
        example: 6982caed-fbfc-4719-bc41-0060a1c97e5d
      - name: price
        schema: number
        required: true
        description: ''
        example: 42.24
      - name: booking_reference
        schema: string
        required: false
        description: ''
        example: PNR123
      - name: passenger_purchases
        schema: array
        required: true
        description: ''
      - name: customer
        schema: object
        required: true
        description: ''
      - name: confirmation_recipients
        schema: array
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
  - url: /orders/{order_id}
    method: getById
    httpMethod: get
    tag: Orders
    typeScriptTag: orders
    description: Get Order
    parameters:
      - name: orderId
        schema: string
        required: true
        description: ''
        example: 8162eccc-6050-4eaa-8df0-0998cf9e9cf6
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /orders/{order_id}/cancel
    method: cancelOrder
    httpMethod: post
    tag: Orders
    typeScriptTag: orders
    description: Cancel Order
    parameters:
      - name: orderId
        schema: string
        required: true
        description: ''
        example: 8162eccc-6050-4eaa-8df0-0998cf9e9cf6
      - name: product_ids
        schema: array
        description: ''
        example:
          - 3735f848-3643-4828-8c7d-7515996bbc2a
          - 3735f848-3643-4828-8c7d-7515996bbc2b
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
numberOfSchemas: 32
apiDescription: >
  TripAdd API enables you to create personalized travel ancillary product
  bundles and make orders.


  ## Concepts


  A **Bundle** is a set of products defined by an ancillary manager. They can
  contain specific products or product categories. Bundles and markups are
  managed on the TripAdd [Partner Portal](https://dashboard.tripadd.com/).


  A **Bundle Offer** is a unique short-lived set of product offers created for a
  specific user and based on specific trip parameters. Bundle offers can be
  available from 15 minutes to 25 hours, depending on which products are
  included in the bundle. The offers later expire and have to be generated again
  to ensure up-to-date pricing and availability of products at the time of
  booking. The bundle expiration time is returned in the API response.


  ### Pricing Types


  TripAdd supports the following pricing types for products in bundles:
  **passenger** and **group**. The passenger-type products will have individual
  pricing per passenger, while the group-type products will have a single price
  for the entire group/booking. When calculating the total order price, you
  should multiply the passenger-type product prices by the passenger count and
  add the group-type product prices directly.


  ### Age Categories


  TripAdd uses these age categories: adult (12 years old and above), child (2-11
  years old), and infant (up to 2 years old). Each product will specify which
  age categories it applies to.


  ### Product Delivery


  Product delivery information is returned in the create order response. TripAdd
  has a wide variety of products with different delivery options. Each product
  will contain its delivery information consisting of a short description,
  voucher codes, and/or links to vouchers or product pages. For example, the
  eSIM product delivery will have the following information:


  ```json

  {
    "description": "Your data plan will be automatically activated on {{arrivalDateTime}}. You can install the eSIM at any time before your departure."
    "links": [
      "label": "Claim Now",
      "url": "https://app.tripadd.com/esim/jwmdyxemed"
    ]
  }

  ```


  ## Integration Steps


  1. [Reach out](https://tripadd.com/) to acquire credentials to the TripAdd
  [Partner Portal](https://dashboard.tripadd.com/).


  2. Generate API tokens. On the partner portal, go to "Integration" â†’ "API
  Tokens" and click "Create Token" to generate a new API token. Make sure to
  save the token because it cannot be retrieved in the dashboard again.


  3. Create a Bundle. Click "New Bundle" and follow the steps to set up a
  product bundle. At the "Installation" step, you will receive a unique "Bundle
  ID" which you will need for the API calls. Bundles created in "Test Mode" can
  only be used with "Test Mode" tokens.


  4. Call the "Create Bundle Offer" endpoint. Each time you want to present a
  bundle offer to the user, you should call this endpoint. It will check product
  availability and pricing based on trip parameters and create a unique offer.


  5. Call the "Create Order" endpoint. Once the user selects the products,
  completes the booking, and you successfully process the payment, call this API
  to purchase the products.


  ## Authentication


  TripAdd API expects your access token as part of the `Authorization` header in
  your requests using the `Bearer` method. Send your token in the HTTP request
  header like this: `Authorization: Bearer <token>`. The access token must be
  provided with all API calls. Access tokens created in "Test Mode" work only
  with data created in "Test Mode" and vice versa.


  **Notice:** Make sure you keep your access tokens secret and do not expose
  them to the client side code.


  ## Environments


  TripAdd API is available on two environments: **sandbox** and **production**.
  The sandbox environment is meant for integration testing: the API matches
  production but the orders will not incur charges. Access tokens on these
  environments will be different.


  | Environment | API Base URL                       |

  |-------------|------------------------------------|

  | Sandbox     | https://sandbox.tripadd.com/v1     |

  | Production  | https://api.tripadd.com/v1         |


  ## Front-end


  TripAdd bundles can be integrated into any checkout flow using your existing
  technology stack. You only need to make sure to allow HTML tags in product and
  delivery description fields.


  Optionally, if you use React in your front end, you can take advantage of our
  [**React component
  library**](https://www.npmjs.com/package/@tripadd/components). It is a
  collection of UI elements providing the easiest way to integrate the TripAdd
  bundles into your checkout path.


  # Changelog


  **1.8.0 (2024-01-17)** Added support for partial orders: you can now specify
  individual products for each passenger. Added `passenger_purchases` to the
  "Create Order" request. The previous request format is still supported but
  deprecated.


  **1.7.9 (2023-12-12)** Added `customer_ip` element to the `available_data`
  object in the "Create Bundle Offer" request.


  **1.7.8 (2023-10-22)** Updated `booking_reference` in CreateOrderRequest` to
  accept values from minimum 5 to maximum 16 character long.


  **1.7.7 (2023-10-16)** Added `confirmation_recipients` in the "Create Order"
  request, allowing you to specify the recipients for the order confirmation and
  order cancellation emails.


  **1.7.6 (2023-10-03)** Added `net_price` in the "Create Bundle Offer" API
  response.


  **1.7.5 (2023-08-24)** Added `delivery` to "Create Order" response, which
  contains information about product delivery to user.


  **1.7.4 (2023-08-22)** Added `terms_url` in the "Create Bundle Offer" API
  response. You can use it to link users to the Terms and Conditions for the
  products in the bundle.


  **1.7.3 (2023-08-09)** Added support for partial cancellations. It is now
  possible to cancel only part of the order by specifying product IDs.


  **1.7.2 (2023-08-04)** Added `support_url` in the "Create Order" API response.


  **1.7.1 (2023-06-21)** Added product cancellation details to the "Product"
  object (`cancellation_policy`, `refundable_until`).


  **1.7.0 (2023-06-21)** Added the detailed pricing information to the "Create
  Bundle Offer" response (`pricing`, `bundled_pricing`). Changed the `price` and
  `bundled_price` values to include the TripAdd fee and removed the separate
  `fee` object. The `price` field in the "Create Order" request will have to
  include the TripAdd fee, as the separate field for `fee` is removed.


  **1.6.1 (2023-05-05)** Made the customer's phone number optional in the
  "Create Order" request. To receive all the product offers that do require the
  customer's phone number, `customer_phone` has to be set as "true" in
  `available_data` in the "Create Bundle Offer" request.


  **1.6.0 (2023-05-03)** Added product delivery information to "Create Order"
  response. You can now find product instructions, coupon codes and links to
  vouchers in the response to construct your own product delivery email.


  **1.5.1 (2023-05-02)** Added `expires_at` in the BundleOffer response. It will
  inform you how long the bundle offer is available for the booking until it
  expires and has to be generated again.


  **1.5.0 (2023-04-14)** Renamed "Create Bundle" API to "Create Bundle Offer"
  API to improve distinction between bundles and bundle offers. The
  documentation reflects the new API but the old API paths and parameters are
  still being supported until migration is complete.


  **1.4.2 (2023-04-14)** Made `date_of_birth`, `gender`, `cabin_class` optional
  and removed `retail_price`.


  **1.4.1 (2023-04-13)** Made `outbound_flights` optional.


  **1.4.0 (2023-02-22)** Added `language` property on CreateBundleRequest
  object. The language property should be ISO 639-1 (language code) i.e. "en".


  **1.3.0 (2023-02-22)** Removed `price` from the bundles and added
  `bundled_price` on bundle products. You can now display how much individual
  products cost when purchased in full bundle.


  **1.2.0 (2023-01-27)** Added "Cancel Order" API.


  **1.1.1 (2022-11-28)** Added `cabin_class` on the flight object.


  **1.1.0 (2022-11-25)** Added "Get Order" API. It is now possible to fetch any
  previous order information by its ID.


  **1.0.4 (2022-11-24)** Made passenger email and phone fields optional. At
  least one (customer's) email and phone pair is still required to deliver the
  products after purchase.


  **1.0.3 (2022-11-16)** Moved passengers data to orders. The passenger data is
  now collected at the time of ordering and only the passenger age category is
  required to generate a product bundle. If possible the optional information
  should be provided for better recommendations.


  **1.0.2 (2022-11-07)** Made customer address optional. It is now possible to
  create an order without customer's address although any additional information
  will enable more products.


  **1.0.1 (2022-11-03)** Added optional fields for providing flight departure
  and arrival terminals. The additional information will enable more products.


  **1.0.0** Initial API release.
