hash: 1e1f7f2e7e4d49af616d4e8a706e918a6fe6cc7c6bc636273572d6da476dcffb
methodObjects:
  - url: /ImageCategorization/Model
    method: createNewModel
    httpMethod: post
    tag: Image Classification Model
    typeScriptTag: imageClassificationModel
    description: Create New Model
    parameters:
      - name: categories
        schema: string
        required: true
        description: ''
        example: CATEGORIES
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: >-
          Zero or One category in request. Add two or more categories in
          parameters
  - url: /Inferences/Model/{model_id}/ImageLevelInferences/{id}
    method: predictionFileByPageId
    httpMethod: get
    tag: OCR Predict
    typeScriptTag: ocrPredict
    description: Get Prediction File By Page ID
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODEL_ID
      - name: id
        schema: string
        required: true
        description: >-
          The ID of the page that was received from the async prediction
          endpoint
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: >-
          Model does not exists. Check if you have entered correct model id with
          valid API key
  - url: >-
      /Inferences/Model/{model_id}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}
    method: allPredictionFiles
    httpMethod: get
    tag: OCR Predict
    typeScriptTag: ocrPredict
    description: Get All Prediction Files
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODEL_ID
      - name: startDayInterval
        schema: integer
        required: true
        description: >-
          The number of days since 1st Jan 1970 GMT which represents the start
          of the period
        example: 0
      - name: currentBatchDay
        schema: integer
        required: true
        description: >-
          The number of days since 1st Jan 1970 GMT which represents the end of
          the period
        example: 0
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: >-
          Model does not exists. Check if you have entered correct model id with
          valid API key
  - url: >-
      /Inferences/Model/{model_id}/InferenceRequestFiles/GetPredictions/{request_file_id}
    method: getFilePredictionByFileId
    httpMethod: get
    tag: OCR Predict
    typeScriptTag: ocrPredict
    description: Get Prediction File By File ID
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODEL_ID
      - name: requestFileId
        schema: string
        required: true
        description: >-
          The ID of the file that was received from the async prediction
          endpoint
        example: REQUEST_FILE_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: >-
          Model does not exists. Check if you have entered correct model id with
          valid API key
  - url: /OCR/FullText
    method: fileContent
    httpMethod: post
    tag: Get Full Text
    typeScriptTag: getFullText
    description: Get Full Text
    parameters:
      - name: file
        schema: string
        required: true
        description: ''
        example: FILE
      - name: urls
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: >-
          File missing. Check if you have included a file in the request


          OR


          Incorrect image. Check if file you included is a valid PNG or JPEG or
          PDF
  - url: /OCR/Model/{model_id}
    method: getModelById
    httpMethod: get
    tag: OCR Model
    typeScriptTag: ocrModel
    description: Get Model by Id
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODEL_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: >-
          Model does not exists. Check if you have entered correct model id with
          valid API key
  - url: /OCR/Model/{model_id}/LabelFile/?async=true
    method: imageFileAsyncPrediction
    httpMethod: post
    tag: OCR Predict
    typeScriptTag: ocrPredict
    description: Async Prediction for image file
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODEL_ID
      - name: async
        schema: string
        required: true
        description: >-
          This parameter specifies whether you'd like to upload the file for
          processing and then query the results with a unique id at a later
          point in time
        example: ASYNC
      - name: file
        schema: string
        required: true
        description: ''
        example: FILE
      - name: base64_data
        schema: string
        required: false
        description: ''
      - name: request_metadata
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: |-
          File missing. Check if you have included a file in the request

          OR

          Incorrect image. Check if file you included is a valid PNG or JPEG
      - statusCode: '402'
        description: >-
          Exhausted Free API Calls. You have exhausted your free API calls
          please change your plan <a
          href="https://app.nanonets.com/user/apps">here</a>
      - statusCode: '404'
        description: Model does not exists. Check if the model id exists
  - url: /OCR/Model/{model_id}/LabelUrls/?async=true
    method: imageUrlAsync
    httpMethod: post
    tag: OCR Predict
    typeScriptTag: ocrPredict
    description: Async Prediction for image url
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODEL_ID
      - name: async
        schema: boolean
        required: true
        description: >-
          This parameter specifies whether you'd like to upload the file for
          processing and then query the results with a unique id at a later
          point in time
        example: true
      - name: urls
        schema: string
        required: true
        description: ''
        example: URLS
      - name: base64_data
        schema: string
        required: false
        description: ''
      - name: request_metadata
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '202'
        description: >-
          Request partially successful. One or more urls might not be correct or
          got no response
      - statusCode: '400'
        description: Urls missing. Check if you have an included array of image urls
      - statusCode: '402'
        description: >-
          Exhausted Free API Calls  You have exhausted your free API calls
          please change your plan <a
          href="https://app.nanonets.com/user/apps">here</a>
      - statusCode: '404'
        description: Model does not exists. Check if the model id exists
  - url: /ImageCategorization/LabelFile
    method: filePrediction
    httpMethod: post
    tag: Image Classification Model Predict
    typeScriptTag: imageClassificationModelPredict
    description: Prediction for image File
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: file
        schema: string
        required: true
        description: ''
        example: FILE
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: |-
          File missing. Check if you have included a file in the request

          OR

          Incorrect image. Check if file you included is a valid PNG or JPEG
      - statusCode: '402'
        description: >-
          Exhausted Free API Calls. You have exhausted your free API calls
          please change your plan <a
          href="https://app.nanonets.com/user/apps">here</a>
      - statusCode: '404'
        description: Model does not exists. Check if the model id exists
  - url: /ImageCategorization/LabelUrls
    method: imageUrlPrediction
    httpMethod: post
    tag: Image Classification Model Predict
    typeScriptTag: imageClassificationModelPredict
    description: Prediction for image URLs
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: urls
        schema: string
        required: true
        description: ''
        example: URLS
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '202'
        description: >-
          Request partially successful. One or more urls might not be correct or
          got no response
      - statusCode: '400'
        description: Urls missing. Check if you have an included array of image urls
      - statusCode: '402'
        description: >-
          Exhausted Free API Calls  You have exhausted your free API calls
          please change your plan <a
          href="https://app.nanonets.com/user/apps">here</a>
      - statusCode: '404'
        description: Model does not exists. Check if the model id exists
  - url: /ImageCategorization/Models
    method: getAllModels
    httpMethod: get
    tag: Image Classification Model
    typeScriptTag: imageClassificationModel
    description: Get All Models
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /ImageCategorization/Train
    method: newModelTraining
    httpMethod: post
    tag: Image Classification Model Train
    typeScriptTag: imageClassificationModelTrain
    description: Train Model
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: >-
          Model not ready for training. Check if the images for the model are
          uploaded
      - statusCode: '404'
        description: Model does not exists. Check if the model id exists
  - url: /ImageCategorization/UploadFile
    method: trainingImagesFile
    httpMethod: post
    tag: Image Classification Model Upload
    typeScriptTag: imageClassificationModelUpload
    description: Upload training images by File
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: category
        schema: string
        required: true
        description: ''
        example: CATEGORY
      - name: file
        schema: string
        required: true
        description: ''
        example: FILE
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: >-
          Category not valid for model. Check if this model has the category
          used in the request


          OR


          File missing. Check if you have included the file in the request


          OR


          Incorrect image. Check if file you included is valid PNG or JPEG file
      - statusCode: '404'
        description: Model does not exists. Check if the model id exists
  - url: /ImageCategorization/UploadUrls
    method: byUrls
    httpMethod: post
    tag: Image Classification Model Upload
    typeScriptTag: imageClassificationModelUpload
    description: Upload training images by Url
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODELID
      - name: category
        schema: string
        required: true
        description: ''
        example: CATEGORY
      - name: urls
        schema: string
        required: true
        description: ''
        example: URLS
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '202'
        description: >-
          Request partially successful. One or more urls might not be correct or
          got no response
      - statusCode: '400'
        description: >-
          Category not valid for model. Check if this model has the category
          used in the request


          OR


          Urls missing  Check if you have included an array of image urls
      - statusCode: '404'
        description: Model does not exists. Check if the model id exists
  - url: /OCR/Model
    method: createNewModel
    httpMethod: post
    tag: OCR Model
    typeScriptTag: ocrModel
    description: Create New Model
    parameters:
      - name: categories
        schema: array
        required: true
        description: ''
        example:
          - '{{category1}}'
          - '{{category2}}'
      - name: model_type
        schema: string
        required: false
        description: ''
        example: ocr
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: >-
          Zero or One category in request. Add two or more categories in
          parameters
  - url: /OCR/Model/{model_id}/LabelFile
    method: imageFile
    httpMethod: post
    tag: OCR Predict
    typeScriptTag: ocrPredict
    description: Prediction for image file
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODEL_ID
      - name: l
        schema: string
        required: true
        description: >-
          language hints eg: en, vi (not specifying generally gives best
          results)
        example: L
      - name: file
        schema: string
        required: true
        description: ''
        example: FILE
      - name: base64_data
        schema: string
        required: false
        description: ''
      - name: request_metadata
        schema: string
        required: false
        description: ''
      - name: pages_to_process
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: |-
          File missing. Check if you have included a file in the request

          OR

          Incorrect image. Check if file you included is a valid PNG or JPEG
      - statusCode: '402'
        description: >-
          Exhausted Free API Calls. You have exhausted your free API calls
          please change your plan <a
          href="https://app.nanonets.com/user/apps">here</a>
      - statusCode: '404'
        description: Model does not exists. Check if the model id exists
  - url: /OCR/Model/{model_id}/LabelUrls
    method: imageUrlsPost
    httpMethod: post
    tag: OCR Predict
    typeScriptTag: ocrPredict
    description: Prediction for image url
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODEL_ID
      - name: l
        schema: string
        required: true
        description: >-
          language hints eg: en, vi (not specifying generally gives best
          results)
        example: L
      - name: urls
        schema: string
        required: true
        description: ''
        example: URLS
      - name: base64_data
        schema: string
        required: false
        description: ''
      - name: request_metadata
        schema: string
        required: false
        description: ''
      - name: pages_to_process
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '202'
        description: >-
          Request partially successful. One or more urls might not be correct or
          got no response
      - statusCode: '400'
        description: Urls missing. Check if you have an included array of image urls
      - statusCode: '402'
        description: >-
          Exhausted Free API Calls  You have exhausted your free API calls
          please change your plan <a
          href="https://app.nanonets.com/user/apps">here</a>
      - statusCode: '404'
        description: Model does not exists. Check if the model id exists
  - url: /OCR/Model/{model_id}/Train
    method: model
    httpMethod: post
    tag: OCR Train
    typeScriptTag: ocrTrain
    description: Train Model
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODEL_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: >-
          Model not ready for training. Check if the images for the model are
          uploaded
      - statusCode: '404'
        description: Model does not exists. Check if the model id exists
  - url: /OCR/Model/{model_id}/UploadFile
    method: trainingImagesFile
    httpMethod: post
    tag: OCR Upload
    typeScriptTag: ocrUpload
    description: Upload training images by File
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODEL_ID
      - name: data
        schema: string
        required: true
        description: ''
        example: DATA
      - name: file
        schema: string
        required: true
        description: ''
        example: FILE
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: >-
          Category not valid for model. Check if this model has the category
          used in the request


          OR


          File missing. Check if you have included the file in the request


          OR


          Incorrect image. Check if file you included is valid PNG or JPEG file
      - statusCode: '404'
        description: Model does not exists. Check if the model id exists
  - url: /OCR/Model/{model_id}/UploadUrls
    method: trainingImagesByUrl
    httpMethod: post
    tag: OCR Upload
    typeScriptTag: ocrUpload
    description: Upload training images by Url
    parameters:
      - name: modelId
        schema: string
        required: true
        description: ''
        example: MODEL_ID
      - name: data
        schema: array
        required: true
        description: ''
        example:
          - filename: https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg
            object:
              - bndbox:
                  xmax: 100
                  xmin: 1
                  ymax: 100
                  ymin: 1
                name: '{{category1}}'
      - name: urls
        schema: array
        required: true
        description: ''
        example:
          - https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '202'
        description: >-
          Request partially successful. One or more urls might not be correct or
          got no response
      - statusCode: '400'
        description: >-
          Category not valid for model. Check if this model has the category
          used in the request


          OR


          Urls missing. Check if you have included an array of image urls
      - statusCode: '404'
        description: Model does not exists. Check if the model id exists
numberOfSchemas: 37
apiDescription: >
  Welcome to the NanoNets API! You can use our API to build custom deep learning
  models.<br/>

  We have language bindings in Shell, Ruby, Golang, Java, C# and Python. You can
  view code examples in the dark area to the right, and you can switch the
  programming language for the examples with the tabs in the top right. <br/> In
  the documentation, you will find ready to fire code samples in these languages
  as well as detailed API specs for different endpoints.<br/><br/><br/>


  ### <span style="vertical-align: middle;">Want to quickly test our APIs?
  &nbsp;</span> <a style="vertical-align: middle; display: inline-flex;"
  href="https://elements.getpostman.com/redirect?entityId=4900737-80d490dc-a342-43be-8160-c9b5bab3c629&entityType=collection"
  target="_blank"><img src="https://run.pstmn.io/button.svg" alt="Run in
  Postman" /></a><br/><br/>

  Helpful links to get you started:<br/><br/>

  **Postman collection variables** - <a
  href="https://learning.postman.com/docs/postman/variables-and-environments/variables/#defining-collection-variables"
  target="_blank">https://learning.postman.com/docs/postman/variables-and-environments/variables/#defining-collection-variables</a><br/><br/>

  **To get your API key** <a href="https://app.nanonets.com/#keys"
  target="_blank">follow this link.</a><br/><br/>


  # Model Object

  A model Object has 3 main attributes<br/>

  ### model_id

  <b>Definition:</b> Unique ID for the model <br/><br/>

  ### model_type

  <b>Definition:</b> Type of model. Possible values are: <br/>

  <table>
      <tr>
          <td>classification</td>
          <td>Image classification model</td>
      </tr>
      <tr>
          <td>ocr</td>
          <td>OCR model</td>
      </tr>
  </table> <br/>


  ### state

  <b>Definition:</b> Current state of model. Possible values are:<br/>

  <table>
      <tr>
          <td>-1</td>
          <td>Error in model training</td>
      </tr>
      <tr>
          <td>0</td>
          <td>Model created. No training data uploaded yet</td>
      </tr>
      <tr>
          <td>1</td>
          <td>Training data uploaded. Need to annotate data</td>
      </tr>
      <tr>
          <td>2</td>
          <td>Training data annotated. Need to start training</td>
      </tr>
      <tr>
          <td>3</td>
          <td>Model in training queue</td>
      </tr>
      <tr>
          <td>4</td>
          <td>Model currently training</td>
      </tr>
      <tr>
          <td>5</td>
          <td>Model hosted. Can be used for prediction</td>
      </tr>
      <tr>
          <td>6</td>
          <td>Model is retraining with new data. Can be used for prediction</td>
      </tr>
  </table>
