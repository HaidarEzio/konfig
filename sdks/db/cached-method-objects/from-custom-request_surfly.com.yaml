hash: 0de43e119a8ebcc80db46bc110ae44687cff92509e9533e379946d3b53bf7a18
methodObjects:
  - url: /agents/?api_key={API_KEY}
    method: getList
    httpMethod: get
    tag: Agents
    typeScriptTag: agents
    description: List
    parameters:
      - name: free
        schema: boolean
        description: >-
          Agents that are ready to take a call. Depends on `available` field
          value and online status.
        example: true
    responses:
      - statusCode: '200'
        description: ''
  - url: /agents/?api_key={API_KEY}
    method: registerNewAgent
    httpMethod: post
    tag: Agents
    typeScriptTag: agents
    description: Create
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /agents/{AGENT_ID}/?api_key={API_KEY}
    method: removeAgent
    httpMethod: delete
    tag: Agents
    typeScriptTag: agents
    description: Delete
    parameters:
      - name: agentId
        schema: string
        required: true
        description: ''
        example: '2'
    responses:
      - statusCode: '200'
        description: ''
  - url: /agents/{AGENT_ID}/?api_key={API_KEY}
    method: getById
    httpMethod: get
    tag: Agents
    typeScriptTag: agents
    description: Get by id
    parameters:
      - name: apiKey
        schema: string
        required: true
        description: ''
        example: 3b57bd2db21c46d2875508b982968d26
      - name: agentId
        schema: string
        required: true
        description: ''
        example: '2'
    responses:
      - statusCode: '200'
        description: ''
  - url: /agents/{AGENT_ID}/?api_key={API_KEY}
    method: updateAgent
    httpMethod: put
    tag: Agents
    typeScriptTag: agents
    description: Update
    parameters:
      - name: agentId
        schema: string
        required: true
        description: Id of the agent to update
        example: '2'
    responses:
      - statusCode: '200'
        description: ''
  - url: /agents/access-token/?api_key={API_KEY}
    method: generateAccessToken
    httpMethod: post
    tag: Agents
    typeScriptTag: agents
    description: Generate an access token
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /sessions/?api_key={API_KEY}
    method: getAll
    httpMethod: get
    tag: Sessions
    typeScriptTag: sessions
    description: List
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /sessions/?api_key={API_KEY}
    method: generateNewSession
    httpMethod: post
    tag: Sessions
    typeScriptTag: sessions
    description: Create
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: >-
      /sessions/?api_key={api_key}&active_session={active_session}&agent_id={agent_id}&year={year}&month={month}&pin={pin}&tags={tags}
    method: filter
    httpMethod: get
    tag: Sessions
    typeScriptTag: sessions
    description: Filter
    parameters:
      - name: activeSession
        schema: boolean
        required: true
        description: Filter active or inactive sessions
        example: true
      - name: agentId
        schema: number
        required: true
        description: Filter by ID of the agent who joined/started a session
        example: 1
      - name: year
        schema: number
        required: true
        description: Filter by year
        example: 2020
      - name: month
        schema: number
        required: true
        description: Filter by month
        example: 10
      - name: pin
        schema: number
        required: true
        description: Filter by PIN number (useful in combination with `active_session`)
        example: 1234
      - name: tags
        schema: string
        required: true
        description: Filter by tag. Supports multiple comma separated tags at once
        example: tag1,tag2
    responses:
      - statusCode: '200'
        description: ''
  - url: /sessions/{ID}/?api_key={API_KEY}
    method: getById
    httpMethod: get
    tag: Sessions
    typeScriptTag: sessions
    description: Get by id
    parameters:
      - name: id
        schema: string
        required: true
        description: >-
          Id of the session. Can be a formatted ID (e.g. 123-123-123), or an
          unformatted ID (e.g. fuSHr0sRQ1usugvheahwQ)
        example: fuSHr0sRQ1usugvheahwQ
    responses:
      - statusCode: '200'
        description: ''
  - url: /sessions/{ID}/end/?api_key={API_KEY}
    method: endById
    httpMethod: post
    tag: Sessions
    typeScriptTag: sessions
    description: End
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
        example: fuSHr0sRQ1usugvheahwQ
    responses:
      - statusCode: '200'
        description: ''
  - url: /company/options/?api_key={api_key}
    method: resetDefaultOptions
    httpMethod: delete
    tag: Company
    typeScriptTag: company
    description: Reset default options
    parameters: []
    responses: []
  - url: /company/options/?api_key={api_key}
    method: getDefaultOptions
    httpMethod: get
    tag: Company
    typeScriptTag: company
    description: Get default options
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /company/options/?api_key={api_key}
    method: updateDefaultOptions
    httpMethod: patch
    tag: Company
    typeScriptTag: company
    description: Update default options
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /company/options/?api_key={api_key}
    method: postOptions
    httpMethod: post
    tag: Company
    typeScriptTag: company
    description: Post options
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /sessions/{ID}/screenshots/latest/?api_key={API_KEY}
    method: getLatest
    httpMethod: get
    tag: Screenshots
    typeScriptTag: screenshots
    description: Latest Screenshot
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
        example: fuSHr0sRQ1usugvheahwQ
    responses:
      - statusCode: '200'
        description: ''
  - url: /sessions/{ID}/screenshots/create/?api_key={API_KEY}
    method: startGeneration
    httpMethod: post
    tag: Screenshots
    typeScriptTag: screenshots
    description: Create Screenshot
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
        example: fEapBPiwxSouiLcAgb2OXQ1
    responses:
      - statusCode: '200'
        description: ''
  - url: /clients/all/?api_key={API_KEY}
    method: getAll
    httpMethod: get
    tag: Clients
    typeScriptTag: clients
    description: List
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /clients/all/?api_key={API_KEY}
    method: addNewClient
    httpMethod: post
    tag: Clients
    typeScriptTag: clients
    description: Create
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /clients/all/{CLIENT_KEY}/?api_key={API_KEY}
    method: deleteClient
    httpMethod: delete
    tag: Clients
    typeScriptTag: clients
    description: Delete
    parameters:
      - name: clientKey
        schema: string
        required: true
        description: ''
        example: 63668234b4aa19dd436e6a76ab8ae000
    responses:
      - statusCode: '200'
        description: ''
  - url: /clients/all/{CLIENT_KEY}/?api_key={API_KEY}
    method: infoById
    httpMethod: get
    tag: Clients
    typeScriptTag: clients
    description: Get by Id
    parameters:
      - name: clientKey
        schema: string
        required: true
        description: ''
        example: 63668234b4aa19dd436e6a76ab8ae000
    responses:
      - statusCode: '200'
        description: ''
  - url: /clients/all/{CLIENT_KEY}/?api_key={API_KEY}
    method: setDomainList
    httpMethod: post
    tag: Clients
    typeScriptTag: clients
    description: Set Client Domain List
    parameters:
      - name: clientKey
        schema: string
        required: true
        description: ''
        example: 63668234b4aa19dd436e6a76ab8ae000
    responses:
      - statusCode: '200'
        description: ''
  - url: /clients/all/{CLIENT_KEY}/?api_key={API_KEY}
    method: updateClient
    httpMethod: put
    tag: Clients
    typeScriptTag: clients
    description: Update
    parameters:
      - name: clientKey
        schema: string
        required: true
        description: ''
        example: 63668234b4aa19dd436e6a76ab8ae000
    responses:
      - statusCode: '200'
        description: ''
  - url: >-
      /sessions/?api_key={API_KEY}&clientkey={CLIENT_KEY}&active_session=true&year=2015&month=01
    method: listActiveSessionsForResellerClient
    httpMethod: get
    tag: Clients
    typeScriptTag: clients
    description: List Active Sessions for Reseller's Client
    parameters:
      - name: clientKey
        schema: string
        required: true
        description: ''
        example: 00063668234b4aa19dd436e6a76ab8ae
      - name: activeSession
        schema: boolean
        description: ''
        default: false
      - name: year
        schema: integer
        description: ''
      - name: month
        schema: integer
        description: ''
    responses:
      - statusCode: '200'
        description: ''
  - url: /history/?api_key={API_KEY}
    method: getAllSessions
    httpMethod: get
    tag: History
    typeScriptTag: history
    description: List
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: >-
      /history/?api_key={api_key}&active_session={active_session}&agent_id={agent_id}&pin={pin}&tags={tags}&min_duration={min_duration}&max_duration={max_duration}&min_date={min_date}&max_date={max_date}
    method: filterSessionHistory
    httpMethod: get
    tag: History
    typeScriptTag: history
    description: Filter session history
    parameters:
      - name: activeSession
        schema: boolean
        required: true
        description: Filter active or inactive sessions. Takes `true` or `false`.
        example: false
      - name: agentId
        schema: string
        required: true
        description: >-
          Filter by ID of the agent who joined/started a session. Can take
          `null` as a value.
        example: 'null'
      - name: pin
        schema: string
        required: true
        description: Filter by session pin. Can take `null` as a value.
        example: '1234'
      - name: tags
        schema: string
        required: true
        description: Filter by session tag. Can take `null` as a value.
        example: tag1
      - name: minDuration
        schema: number
        required: true
        description: Filter by minimum duration of a session.
        example: 120
      - name: maxDuration
        schema: number
        required: true
        description: Filter by maximum duration of a session.
        example: 120
      - name: minDate
        schema: string
        required: true
        description: >-
          Filter by earlist start date/time. Accepts a timestamp in iso8601
          format. Make sure to take the timezone into account
        example: '2020-05-06T00:00:00.000000Z'
      - name: maxDate
        schema: string
        required: true
        description: >-
          Filter by latest start date/time. Accepts a timestamp in iso8601
          format. Make sure to take the timezone into account
        example: '2020-05-06T00:00:00.000000Z'
    responses:
      - statusCode: '200'
        description: ''
  - url: /webhooks/?api_key={API_KEY}
    method: listAll
    httpMethod: get
    tag: Webhooks
    typeScriptTag: webhooks
    description: List
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /webhooks/?api_key={API_KEY}
    method: createWebhook
    httpMethod: post
    tag: Webhooks
    typeScriptTag: webhooks
    description: Create
    parameters: []
    responses:
      - statusCode: '201'
        description: ''
  - url: /webhooks/{WEBHOOK_ID}/?api_key={API_KEY}
    method: removeWebhook
    httpMethod: delete
    tag: Webhooks
    typeScriptTag: webhooks
    description: Delete an Webhook
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: ''
        example: '1'
    responses:
      - statusCode: '204'
        description: This response has no content.
  - url: /webhooks/{WEBHOOK_ID}/?api_key={API_KEY}
    method: getWebhookInformation
    httpMethod: get
    tag: Webhooks
    typeScriptTag: webhooks
    description: Get by Id
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: ''
        example: '1'
    responses:
      - statusCode: '200'
        description: ''
  - url: /webhooks/{WEBHOOK_ID}/?api_key={API_KEY}
    method: updateWebhook
    httpMethod: put
    tag: Webhooks
    typeScriptTag: webhooks
    description: Update
    parameters:
      - name: webhookId
        schema: string
        required: true
        description: ''
        example: '1'
    responses:
      - statusCode: '200'
        description: ''
  - url: /servers
    method: listAvailable
    httpMethod: get
    tag: Servers
    typeScriptTag: servers
    description: List
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
numberOfSchemas: 88
apiDescription: >-
  By using the REST API, you can integrate our Co-browsing technology into  your
  own application or build a thin layer around our technology. You can 
  completely customize Surfly and automate the management of client and agent
  creation through the REST API.


  The Surfly REST API allows you to integrate the functionality of our dashboard
  in a programmatic manner. With our API you can do the following things:

  * **Agents** - Manage your agents

  * **Sessions** - Get an overview of all your sessions

  * **Screenshots** - Create screenshots of your co-browsing sessions

  * **Clients** - Create new clients *(reseller only)*

  * **Servers** - Get a list of all available Surfly public cloud servers

  * **History** - Get an overview of sessions history

  * **Webhooks** - Manage your webhooks


  Below you can find detailed code examples illustrating how to make the REST
  calls. You will need your REST API key (which can be found in the integration
  panel, just below the widget code).


  > The rate limit for making REST API calls is 100 req/min/IP address
