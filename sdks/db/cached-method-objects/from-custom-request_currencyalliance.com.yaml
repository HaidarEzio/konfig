hash: 31a5b08a8310548c04c44f0282e1eb21dc547a2bc2308d24a559c468372b9f55
methodObjects:
  - url: /accruals/standard
    method: executeStandardAccrual
    httpMethod: post
    tag: Direct accruals
    typeScriptTag: directAccruals
    description: Execute an accrual
    parameters:
      - name: amount
        schema: integer
        required: true
        description: ''
        example: 1000
      - name: bonus
        schema: boolean
        required: false
        description: ''
        example: false
        default: false
      - name: external_reference
        schema: string
        required: false
        description: ''
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: member
        schema: object
        required: true
        description: ''
        example: &ref_0
          id: M12334532X
      - name: metadata
        schema: object
        required: false
        description: ''
        example: &ref_1
          foo: bar
      - name: origin
        schema: undefined
        required: true
        description: ''
      - name: reason
        schema: string
        required: false
        description: ''
        example: Christmas bonus
      - name: reason_code
        schema: string
        required: false
        description: ''
        example: product_purchase
      - name: release_date
        schema: string
        required: false
        description: ''
        example: 2020-10-10T12:12
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /accruals/purchase-rules/simulate
    method: simulatePurchaseRules
    httpMethod: post
    tag: Purchase rules
    typeScriptTag: purchaseRules
    description: Simulate a purchase
    parameters:
      - name: tags
        schema: array
        required: false
        description: ''
      - name: fiat_amount
        schema: string
        required: true
        description: ''
        example: '20.00'
      - name: fiat_currency
        schema: string
        required: true
        description: ''
        example: USD
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: member
        schema: object
        required: false
        description: ''
        example: *ref_0
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /accruals/purchase-rules/trigger
    method: triggerLoyaltyRules
    httpMethod: post
    tag: Purchase rules
    typeScriptTag: purchaseRules
    description: Trigger a purchase
    parameters:
      - name: tags
        schema: array
        required: false
        description: ''
      - name: external_reference
        schema: string
        required: false
        description: ''
      - name: fiat_amount
        schema: string
        required: true
        description: ''
        example: '20.00'
      - name: fiat_currency
        schema: string
        required: true
        description: ''
        example: USD
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: member
        schema: object
        required: true
        description: ''
        example: *ref_0
      - name: metadata
        schema: object
        required: false
        description: ''
        example: *ref_1
      - name: preferred_execution_mode
        schema: string
        required: false
        description: ''
      - name: reason
        schema: string
        required: false
        description: ''
      - name: release_date
        schema: string
        required: false
        description: ''
        example: 2020-10-10T12:12
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /accruals/purchase-rules/executions/{id}
    method: getExecution
    httpMethod: get
    tag: Purchase rules
    typeScriptTag: purchaseRules
    description: Retrieve a purchase rule execution
    parameters:
      - name: id
        schema: string
        required: true
        description: >-
          Unique internal identifier that was generated by the system for the
          purchase rule execution.
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /accruals/purchase-rules/executions/{id}/retrigger
    method: retriggerExecution
    httpMethod: post
    tag: Purchase rules
    typeScriptTag: purchaseRules
    description: Retrigger a purchase rule execution
    parameters:
      - name: id
        schema: string
        required: true
        description: >-
          Unique internal identifier that was generated by the system for the
          purchase rule execution.
        example: ID
      - name: tags
        schema: array
        required: false
        description: ''
      - name: fiat_amount
        schema: string
        required: true
        description: ''
        example: '20.00'
      - name: fiat_currency
        schema: string
        required: true
        description: ''
        example: USD
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: metadata
        schema: object
        required: false
        description: ''
        example: *ref_1
      - name: release_date
        schema: string
        required: false
        description: ''
        example: 2020-10-10T12:12
      - name: reason
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /accruals/purchase-rules/executions/{id}/cancel
    method: cancelExecution
    httpMethod: post
    tag: Purchase rules
    typeScriptTag: purchaseRules
    description: Cancel a purchase rule execution
    parameters:
      - name: id
        schema: string
        required: true
        description: >-
          Unique internal identifier that was generated by the system for the
          purchase rule execution.
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /accruals/activity-rules/simulate
    method: simulateRuleExecution
    httpMethod: post
    tag: Activity rules
    typeScriptTag: activityRules
    description: Simulate an activity rule
    parameters:
      - name: activity_ids
        schema: array
        required: true
        description: ''
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: member
        schema: object
        required: true
        description: ''
        example: *ref_0
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /accruals/activity-rules/trigger
    method: triggerRule
    httpMethod: post
    tag: Activity rules
    typeScriptTag: activityRules
    description: Trigger an activity rule
    parameters:
      - name: activity_ids
        schema: array
        required: true
        description: ''
      - name: external_reference
        schema: string
        required: false
        description: ''
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: member
        schema: object
        required: true
        description: ''
        example: *ref_0
      - name: metadata
        schema: object
        required: false
        description: ''
        example: *ref_1
      - name: release_date
        schema: string
        required: false
        description: ''
        example: 2020-10-10T12:12
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /exchanges/simulate
    method: simulateCurrencyExchange
    httpMethod: post
    tag: Exchanges
    typeScriptTag: exchanges
    description: Simulate currency exchange
    parameters:
      - name: amount
        schema: integer
        required: true
        description: ''
        example: 500
      - name: destination_loyalty_currency
        schema: string
        required: false
        description: ''
        example: SST
      - name: destination_member
        schema: object
        required: false
        description: ''
        example: *ref_0
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: origin_loyalty_currency
        schema: string
        required: true
        description: ''
        example: TSS
      - name: origin_member
        schema: object
        required: false
        description: ''
        example: *ref_0
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /exchanges/execute
    method: executeCurrencyExchange
    httpMethod: post
    tag: Exchanges
    typeScriptTag: exchanges
    description: Execute currency exchange
    parameters:
      - name: amount
        schema: integer
        required: true
        description: ''
        example: 500
      - name: external_reference
        schema: string
        required: false
        description: ''
      - name: destination_loyalty_currency
        schema: string
        required: true
        description: ''
        example: TCC
      - name: destination_member
        schema: object
        required: true
        description: ''
        example: *ref_0
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: origin_loyalty_currency
        schema: string
        required: true
        description: ''
        example: TSS
      - name: origin_member
        schema: object
        required: true
        description: ''
        example: *ref_0
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /exchanges/linked-account-simulate
    method: simulateLinkedAccountCurrencyExchange
    httpMethod: post
    tag: Exchanges
    typeScriptTag: exchanges
    description: Simulate linked account currency exchange
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /exchanges/linked-account-execute
    method: executeLinkedAccountCurrencyExchange
    httpMethod: post
    tag: Exchanges
    typeScriptTag: exchanges
    description: Execute linked account currency exchange
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /members
    method: updateMemberRecord
    httpMethod: patch
    tag: Members
    typeScriptTag: members
    description: Update a member
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /members
    method: createRecord
    httpMethod: post
    tag: Members
    typeScriptTag: members
    description: Create a member
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '201'
        description: ''
  - url: /members/lookup
    method: validateMemberDetails
    httpMethod: post
    tag: Members
    typeScriptTag: members
    description: Lookup a member
    parameters:
      - name: linked_loyalty_currency
        schema: string
        required: false
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_program_identifiers
        schema: object
        required: true
        description: ''
        example: *ref_0
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: metadata
        schema: object
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '404'
        description: ''
  - url: /loyalty-currencies/fiat-convert
    method: fiatToLoyaltyCurrency
    httpMethod: post
    tag: Conversions
    typeScriptTag: conversions
    description: Convert fiat to loyalty currency
    parameters:
      - name: amount
        schema: string
        required: true
        description: ''
        example: '10.00'
      - name: fiat_currency
        schema: string
        required: true
        description: ''
        example: USD
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: FOO
      - name: price_type
        schema: string
        required: false
        description: ''
        default: customers_perceived_value
      - name: rounding
        schema: string
        required: false
        description: ''
        default: bankers_rounding
      - name: custom_value
        schema: string
        required: false
        description: ''
        example: '10.12345678'
      - name: custom_value_currency
        schema: string
        required: false
        description: ''
        example: USD
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /redemptions/standard/simulate
    method: simulateRedemption
    httpMethod: post
    tag: Standard redemptions
    typeScriptTag: standardRedemptions
    description: Simulate a redemption
    parameters:
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: member
        schema: object
        required: false
        description: ''
        example: *ref_0
      - name: metadata
        schema: object
        required: false
        description: ''
      - name: redemption_items
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /redemptions/standard
    method: executeRedemption
    httpMethod: post
    tag: Standard redemptions
    typeScriptTag: standardRedemptions
    description: Execute a redemption
    parameters:
      - name: external_reference
        schema: string
        required: true
        description: ''
        example: EXTERNAL_REFERENCE
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: member
        schema: object
        required: true
        description: ''
        example: *ref_0
      - name: metadata
        schema: object
        required: false
        description: ''
        example:
          foo: bar
      - name: reason
        schema: string
        required: true
        description: ''
        example: REASON
      - name: redemption_items
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /redemptions/standard/adjust
    method: adjustRedemption
    httpMethod: post
    tag: Standard redemptions
    typeScriptTag: standardRedemptions
    description: Adjust a redemption
    parameters:
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: member
        schema: object
        required: true
        description: ''
        example: *ref_0
      - name: metadata
        schema: object
        required: false
        description: ''
        example:
          foo: bar
      - name: new_external_reference
        schema: string
        required: true
        description: ''
        example: abcd1234
      - name: previous_external_reference
        schema: string
        required: true
        description: ''
        example: abcd1234
      - name: previous_transaction_id
        schema: string
        required: true
        description: ''
        example: tx_abc12312345
      - name: reason
        schema: string
        required: true
        description: ''
        example: REASON
      - name: redemption_items
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /redemptions/standard/cancel
    method: cancelRedemption
    httpMethod: post
    tag: Standard redemptions
    typeScriptTag: standardRedemptions
    description: Cancel a redemption
    parameters:
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: metadata
        schema: object
        required: false
        description: ''
        example:
          foo: bar
      - name: previous_external_reference
        schema: string
        required: true
        description: ''
        example: abcd1234
      - name: previous_transaction_id
        schema: string
        required: true
        description: ''
        example: tx_abc12312345
      - name: reason
        schema: string
        required: true
        description: ''
        example: REASON
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /redemptions/gift-cards
    method: getEnabledList
    httpMethod: get
    tag: Gift cards
    typeScriptTag: giftCards
    description: Retrieve the list of enabled gift cards
    parameters:
      - name: country
        schema: string
        required: false
        description: ''
        example: USA
      - name: fiatCurrency
        schema: string
        required: false
        description: ''
        example: EUR
      - name: giftCardType
        schema: string
        required: false
        description: ''
        example: fixed_value
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
    responses:
      - statusCode: '200'
        description: ''
  - url: /redemptions/gift-cards/{id}
    method: getDetails
    httpMethod: get
    tag: Gift cards
    typeScriptTag: giftCards
    description: Retrieve a gift card
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /redemptions/gift-cards/{id}/simulate
    method: simulateExchange
    httpMethod: post
    tag: Gift cards
    typeScriptTag: giftCards
    description: Simulate a gift card exchange
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /redemptions/gift-cards/{id}/issue
    method: exchangeLoyaltyForGiftCard
    httpMethod: post
    tag: Gift cards
    typeScriptTag: giftCards
    description: Exchange loyalty currency units for gift cards
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /redemptions/gift-cards/{id}/direct-issue
    method: issueCode
    httpMethod: post
    tag: Gift cards
    typeScriptTag: giftCards
    description: Direct issue a gift card code
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /redemptions/gift-cards/codes
    method: getIssuedCode
    httpMethod: post
    tag: Gift cards
    typeScriptTag: giftCards
    description: Retrieve an issued gift card code
    parameters:
      - name: gift_card_code
        schema: string
        required: true
        description: ''
        example: GIFT_CARD_CODE
      - name: pin
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /redemptions/gift-cards/custom/validate
    method: validateCustomCode
    httpMethod: post
    tag: Gift cards
    typeScriptTag: giftCards
    description: Validate a custom gift card code
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /redemptions/gift-cards/custom/redeem
    method: redeemCustomGiftCardCode
    httpMethod: post
    tag: Gift cards
    typeScriptTag: giftCards
    description: Redeem a custom gift card code
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /redemptions/gift-cards/custom/cancel
    method: cancelCustomCode
    httpMethod: post
    tag: Gift cards
    typeScriptTag: giftCards
    description: Cancel a custom gift card code
    parameters:
      - name: gift_card_code
        schema: string
        description: ''
        example: ABCD-0000-ABCD-0000
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /members/transactions
    method: listMemberTransactions
    httpMethod: post
    tag: Transactions
    typeScriptTag: transactions
    description: List a member's transactions
    parameters:
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
      - name: createdAtRange
        schema: string
        required: false
        description: >-
          Provide the date range, in the format of two dates separated by a
          comma, to filter the items based on when when they were created. The
          first value is the starting date and the second value is the end date.
          The end date is optional if you want to retrieve all the items since
          the starting date.
        example: 2020-05-02,2020-06-04T09:35:25Z
      - name: status
        schema: string
        required: false
        description: >-
          Provide value to filter transactions by status. Multiple values are
          accepted, separated by commas.
      - name: type
        schema: string
        required: false
        description: >-
          Provide value to filter transactions by type. Multiple values are
          accepted, separated by commas.
      - name: member
        schema: object
        required: true
        description: ''
        example: *ref_0
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
    responses:
      - statusCode: '200'
        description: ''
  - url: /transactions
    method: listAllTransactions
    httpMethod: get
    tag: Transactions
    typeScriptTag: transactions
    description: List transactions
    parameters:
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
      - name: createdAtRange
        schema: string
        required: false
        description: >-
          Provide the date range, in the format of two dates separated by a
          comma, to filter the items based on when when they were created. The
          first value is the starting date and the second value is the end date.
          The end date is optional if you want to retrieve all the items since
          the starting date.
        example: 2020-05-02,2020-06-04T09:35:25Z
      - name: status
        schema: string
        required: false
        description: >-
          Provide value to filter transactions by status. Multiple values are
          accepted, separated by commas.
      - name: type
        schema: string
        required: false
        description: >-
          Provide value to filter transactions by type. Multiple values are
          accepted, separated by commas.
    responses:
      - statusCode: '200'
        description: ''
  - url: /transactions
    method: createTransaction
    httpMethod: post
    tag: Transactions
    typeScriptTag: transactions
    description: Create a transaction
    parameters:
      - name: amount
        schema: integer
        required: true
        description: ''
        example: 100
      - name: destination
        schema: undefined
        required: true
        description: ''
      - name: external_reference
        schema: string
        required: false
        description: ''
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: metadata
        schema: object
        required: false
        description: ''
        example: *ref_1
      - name: reason
        schema: string
        required: false
        description: ''
        example: Christmas bonus
      - name: origin
        schema: undefined
        required: true
        description: ''
      - name: reason_code
        schema: string
        required: false
        description: ''
        example: product_purchase
    responses:
      - statusCode: '201'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /transactions/{id}
    method: getDetails
    httpMethod: get
    tag: Transactions
    typeScriptTag: transactions
    description: Retrieve a transaction.
    parameters:
      - name: id
        schema: string
        required: true
        description: >-
          Unique internal identifier generated by the system for each
          transaction.
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /transactions/{id}
    method: updateTransactionDetails
    httpMethod: patch
    tag: Transactions
    typeScriptTag: transactions
    description: Update a transaction
    parameters:
      - name: id
        schema: string
        required: true
        description: >-
          Unique internal identifier generated by the system for each
          transaction.
        example: ID
      - name: amount
        schema: integer
        description: ''
        example: 100
      - name: loyalty_system_data
        schema: object
        description: ''
      - name: metadata
        schema: object
        description: ''
        example: *ref_1
      - name: reason_code
        schema: string
        description: ''
      - name: reason
        schema: string
        description: ''
        example: Christmas bonus
      - name: release_date
        schema: string
        description: ''
        example: 2020-10-10T12:12
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /transactions/{id}/cancel
    method: cancelTransaction
    httpMethod: post
    tag: Transactions
    typeScriptTag: transactions
    description: Cancel a transaction
    parameters:
      - name: id
        schema: string
        required: true
        description: >-
          Unique internal identifier generated by the system for each
          transaction.
        example: ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /partners
    method: listAllPartners
    httpMethod: get
    tag: Partners
    typeScriptTag: partners
    description: List all partners
    parameters:
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
      - name: partnerId
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
      - name: loyaltyCurrency
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
    responses:
      - statusCode: '200'
        description: ''
  - url: /partners/exchange-in
    method: listExchangeInPartners
    httpMethod: get
    tag: Partners
    typeScriptTag: partners
    description: List exchange in partners
    parameters:
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
      - name: partnerId
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
      - name: loyaltyCurrency
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
    responses:
      - statusCode: '200'
        description: ''
  - url: /partners/exchange-out
    method: listExchangeOutPartners
    httpMethod: get
    tag: Partners
    typeScriptTag: partners
    description: List exchange out partners
    parameters:
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
      - name: partnerId
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
      - name: loyaltyCurrency
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
      - name: languageDisplay
        schema: string
        required: false
        description: >-
          [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) of the language
          you want name of the `required_fields` to be shown. Defaults to
          english if there is no translation.
    responses:
      - statusCode: '200'
        description: ''
  - url: /partners/issuing
    method: listIssuingPartners
    httpMethod: get
    tag: Partners
    typeScriptTag: partners
    description: List issuing partners
    parameters:
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
      - name: partnerId
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
      - name: loyaltyCurrency
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
    responses:
      - statusCode: '200'
        description: ''
  - url: /partners/redemption
    method: getRedemptionPartners
    httpMethod: get
    tag: Partners
    typeScriptTag: partners
    description: List redemption partners
    parameters:
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
      - name: partnerId
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
      - name: loyaltyCurrency
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
    responses:
      - statusCode: '200'
        description: ''
  - url: /partners/currency-owners-for-redemption
    method: listRedemptionCurrencyOwners
    httpMethod: get
    tag: Partners
    typeScriptTag: partners
    description: List currency owners for redemption partners
    parameters:
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
      - name: partnerId
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
      - name: loyaltyCurrency
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
      - name: languageDisplay
        schema: string
        required: false
        description: >-
          [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) of the language
          you want name of the `required_fields` to be shown. Defaults to
          english if there is no translation.
    responses:
      - statusCode: '200'
        description: ''
  - url: /partners/currency-owners-for-issuance
    method: listCurrencyOwnersForIssuance
    httpMethod: get
    tag: Partners
    typeScriptTag: partners
    description: List currency owners for issuing partners
    parameters:
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
      - name: partnerId
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
      - name: loyaltyCurrency
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
      - name: languageDisplay
        schema: string
        required: false
        description: >-
          [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) of the language
          you want name of the `required_fields` to be shown. Defaults to
          english if there is no translation.
    responses:
      - statusCode: '200'
        description: ''
  - url: /partners/<api_identifier>/data/<field_name>
    method: getPartnerCustomData
    httpMethod: get
    tag: Partners
    typeScriptTag: partners
    description: List Partner Custom Data
    parameters:
      - name: apiIdentifier
        schema: string
        required: true
        description: Partner's api identifier
        example: API_IDENTIFIER
      - name: fieldName
        schema: string
        required: true
        description: Data field name
        example: FIELD_NAME
    responses:
      - statusCode: '200'
        description: ''
  - url: /reports/exchanges
    method: getCsvReport
    httpMethod: get
    tag: Exchange Reports
    typeScriptTag: exchangeReports
    description: Retrieve Currency Exchange Report
    parameters:
      - name: createdAtRange
        schema: string
        required: false
        description: >-
          Provide the date range, in the format of two dates separated by a
          comma, to filter the items based on when when they were created. The
          first value is the starting date and the second value is the end date.
          The end date is optional if you want to retrieve all the items since
          the starting date.
        example: 2020-05-02,2020-06-04T09:35:25Z
    responses:
      - statusCode: '200'
        description: ''
  - url: /reports/gift-cards/custom
    method: listIssuedCodes
    httpMethod: get
    tag: Custom gift cards
    typeScriptTag: customGiftCards
    description: List issued custom gift card codes
    parameters:
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
      - name: createdAtRange
        schema: string
        required: false
        description: >-
          Provide the date range, in the format of two dates separated by a
          comma, to filter the items based on when when they were created. The
          first value is the starting date and the second value is the end date.
          The end date is optional if you want to retrieve all the items since
          the starting date.
        example: 2020-05-02,2020-06-04T09:35:25Z
      - name: giftCardId
        schema: string
        required: false
        description: ''
      - name: fiatCurrency
        schema: string
        required: false
        description: >-
          [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the fiat
          currency
      - name: loyaltyCurrency
        schema: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to
          which the member belongs. It is a unique shortcode Identifier assigned
          by the system to each loyalty currency. It can be found in the 'My
          Currency' section under the 'About My Currency' screen in the
          Management Dashboard. For the Currency Identifier of your partners'
          currencies refer to the Currency Symbol field in the 'My Partners'
          section in the Management Dashboard or Endpoints to obtain Partners'
          information.
    responses:
      - statusCode: '200'
        description: ''
  - url: /reports/gift-cards/custom/inventory
    method: listInventory
    httpMethod: get
    tag: Custom gift cards
    typeScriptTag: customGiftCards
    description: List custom gift card inventory
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
  - url: /reports/gift-cards/custom/{id}/inventory
    method: getInventoryStatus
    httpMethod: get
    tag: Custom gift cards
    typeScriptTag: customGiftCards
    description: Retrieve a custom gift card inventory
    parameters:
      - name: id
        schema: string
        required: true
        description: ''
        example: ID
    responses:
      - statusCode: '200'
        description: ''
  - url: /cohorts
    method: getList
    httpMethod: get
    tag: Cohorts
    typeScriptTag: cohorts
    description: List cohorts
    parameters:
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
    responses:
      - statusCode: '200'
        description: ''
  - url: /cohorts
    method: createCohort
    httpMethod: post
    tag: Cohorts
    typeScriptTag: cohorts
    description: Create a cohort
    parameters:
      - name: company_name
        schema: string
        required: true
        description: ''
        example: FooBar
      - name: status
        schema: string
        required: false
        description: ''
        example: enabled
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /cohorts/{cohort_id}
    method: getCohort
    httpMethod: get
    tag: Cohorts
    typeScriptTag: cohorts
    description: Retrieve a cohort.
    parameters:
      - name: cohortId
        schema: string
        required: true
        description: Cohort id.
        example: COHORT_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /cohorts/{cohort_id}
    method: updateCohortInformation
    httpMethod: patch
    tag: Cohorts
    typeScriptTag: cohorts
    description: Update a cohort
    parameters:
      - name: cohortId
        schema: string
        required: true
        description: Cohort id.
        example: COHORT_ID
      - name: company_name
        schema: string
        required: true
        description: ''
        example: FooBar
      - name: status
        schema: string
        required: false
        description: ''
        example: enabled
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /cohorts/{cohort_id}/loyalty-rules/purchases
    method: listLoyaltyRules
    httpMethod: get
    tag: Cohort Purchases
    typeScriptTag: cohortPurchases
    description: List a cohort's purchase loyalty rules
    parameters:
      - name: cohortId
        schema: string
        required: true
        description: Cohort id.
        example: COHORT_ID
    responses:
      - statusCode: '200'
        description: ''
  - url: /cohorts/{cohort_id}/loyalty-rules/purchases/{rule_id}
    method: updateLoyaltyRule
    httpMethod: patch
    tag: Cohort Purchases
    typeScriptTag: cohortPurchases
    description: Update a cohort's purchase loyalty rule
    parameters:
      - name: cohortId
        schema: string
        required: true
        description: Cohort id.
        example: COHORT_ID
      - name: ruleId
        schema: string
        required: true
        description: Loyalty rule id.
        example: RULE_ID
      - name: enabled
        schema: boolean
        description: ''
        example: true
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /loyalty-rules/{cohort_id}/purchases/simulate
    method: simulateExecution
    httpMethod: post
    tag: Cohort Purchases
    typeScriptTag: cohortPurchases
    description: Simulate a purchase
    parameters:
      - name: cohortId
        schema: string
        required: true
        description: Cohort id.
        example: COHORT_ID
      - name: tags
        schema: array
        required: false
        description: ''
      - name: external_reference
        schema: string
        required: false
        description: ''
      - name: fiat_amount
        schema: string
        required: true
        description: ''
        example: '20.00'
      - name: fiat_currency
        schema: string
        required: true
        description: ''
        example: USD
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: member
        schema: object
        required: true
        description: ''
        example: *ref_0
      - name: metadata
        schema: object
        required: false
        description: ''
        example: *ref_1
      - name: preferred_execution_mode
        schema: string
        required: false
        description: ''
      - name: reason
        schema: string
        required: false
        description: ''
      - name: release_date
        schema: string
        required: false
        description: ''
        example: 2020-10-10T12:12
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /loyalty-rules/{cohort_id}/purchases/execute
    method: executeLoyaltyRulesMatching
    httpMethod: post
    tag: Cohort Purchases
    typeScriptTag: cohortPurchases
    description: Execute a purchase
    parameters:
      - name: cohortId
        schema: string
        required: true
        description: Cohort id.
        example: COHORT_ID
      - name: tags
        schema: array
        required: false
        description: ''
      - name: external_reference
        schema: string
        required: false
        description: ''
      - name: fiat_amount
        schema: string
        required: true
        description: ''
        example: '20.00'
      - name: fiat_currency
        schema: string
        required: true
        description: ''
        example: USD
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: member
        schema: object
        required: true
        description: ''
        example: *ref_0
      - name: metadata
        schema: object
        required: false
        description: ''
        example: *ref_1
      - name: preferred_execution_mode
        schema: string
        required: false
        description: ''
      - name: reason
        schema: string
        required: false
        description: ''
      - name: release_date
        schema: string
        required: false
        description: ''
        example: 2020-10-10T12:12
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /cohorts/{cohort_id}/loyalty-rules/activities
    method: listActivityLoyaltyRules
    httpMethod: get
    tag: Cohort Activities
    typeScriptTag: cohortActivities
    description: List a cohort's activity loyalty rules
    parameters:
      - name: cohortId
        schema: string
        required: true
        description: Cohort id.
        example: COHORT_ID
    responses:
      - statusCode: '200'
        description: ''
  - url: /cohorts/{cohort_id}/loyalty-rules/activities/{rule_id}
    method: updateRule
    httpMethod: patch
    tag: Cohort Activities
    typeScriptTag: cohortActivities
    description: Update a cohort's activity loyalty rule
    parameters:
      - name: cohortId
        schema: string
        required: true
        description: Cohort id.
        example: COHORT_ID
      - name: ruleId
        schema: string
        required: true
        description: Loyalty rule id.
        example: RULE_ID
      - name: enabled
        schema: boolean
        description: ''
        example: true
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /cohorts/{cohort_id}/loyalty-rules/activities/simulate
    method: triggerLoyaltyRuleSimulation
    httpMethod: post
    tag: Cohort Activities
    typeScriptTag: cohortActivities
    description: Simulate an activity rule execution
    parameters:
      - name: cohortId
        schema: string
        required: true
        description: Cohort id.
        example: COHORT_ID
      - name: activity_ids
        schema: array
        required: true
        description: ''
      - name: external_reference
        schema: string
        required: false
        description: ''
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: member
        schema: object
        required: true
        description: ''
        example: *ref_0
      - name: metadata
        schema: object
        required: false
        description: ''
        example: *ref_1
      - name: release_date
        schema: string
        required: false
        description: ''
        example: 2020-10-10T12:12
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /cohorts/{cohort_id}/loyalty-rules/activities/execute
    method: executeActivityRule
    httpMethod: post
    tag: Cohort Activities
    typeScriptTag: cohortActivities
    description: Execute an activity rule
    parameters:
      - name: cohortId
        schema: string
        required: true
        description: Cohort id.
        example: COHORT_ID
      - name: activity_ids
        schema: array
        required: true
        description: ''
      - name: external_reference
        schema: string
        required: false
        description: ''
      - name: loyalty_currency
        schema: string
        required: true
        description: ''
        example: EXAMPLE_POINTS
      - name: loyalty_system_data
        schema: object
        required: false
        description: ''
      - name: member
        schema: object
        required: true
        description: ''
        example: *ref_0
      - name: metadata
        schema: object
        required: false
        description: ''
        example: *ref_1
      - name: release_date
        schema: string
        required: false
        description: ''
        example: 2020-10-10T12:12
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
  - url: /cohorts/{cohort_id}/accounts
    method: listAccounts
    httpMethod: get
    tag: Cohort Accounts
    typeScriptTag: cohortAccounts
    description: List a cohort's accounts
    parameters:
      - name: cohortId
        schema: string
        required: true
        description: Cohort id.
        example: COHORT_ID
      - name: page
        schema: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      - name: pageSize
        schema: integer
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items
          on each page.
        default: 50
    responses:
      - statusCode: '200'
        description: ''
numberOfSchemas: 125
apiDescription: >
  # Introduction


  The Currency Alliance API facilitates various use cases for Loyalty Commerce.
  Our API allows our Partners to:
   - Manage Loyalty Currencies in the Cloud
   - Access Popular Loyalty Currencies from other Brands
   - Sell and Distribute your Loyalty Currency to Partners
   - Issue, Transfer, Redeem, or Exchange any loyalty currency via API
   - Pull Transaction History Details into 3rd Party Platforms
   - Enable the Exchange of Loyalty Currencies into Gift Cards and other Redemption Products in many fiat currencies
  To benefit from the Currency Alliance platform, you do not need to use all of
  these features. While there are many Endpoints for specific use cases, most
  Partners end up using only a few Endpoints.


  # Architecture

  The Currency Alliance API is organized around REST. Our API has predictable
  resource-oriented URLs, accepts JSON-encoded request bodies, returns
  JSON-encoded responses, and uses standard HTTP response codes, authentication,
  and verbs.


  Calls to the API have to be properly authenticated using your public and
  secret API keys. The keys are available in the 'CREDENTIALS' section of the
  "Loyalty API" module in the Management Dashboard. These keys MUST never be
  exposed to the public or any unauthorized person.


  The API is designed for a server to server communication. If you want to
  communicate with the API from a client it must be through a server
  environment, to protect the integrity of the requests and the API keys, and
  not expose them on front-end platforms.


  # Authentication

  The API authenticates every request based on two elements - Credential and
  Signature. Every request must include an `Authorization` header with the
  following two elements.

  `Credential=<public-key>, Signature=<calculated-signature>`


  ## Credential

  In this parameter, the API requires you to provide the `<public-key>` that is
  unique to your account. Your keys are available in the 'CREDENTIALS' section
  of the "Loyalty API" module in the Management Dashboard.


  ## Signature

  ### How is the Signature calculated?
    The signature is a [HMAC-SHA256](https://en.wikipedia.org/wiki/HMAC) hash in hexadecimal of the request content, using the `private_key` as the key.
    Keep in mind that the string you use to generate the signature and the string you send to the API has to be exactly the same. This includes newlines and spaces. If you compress the JSON body of your request, after generating the signature, the request will be rejected.

  ### POST/PUT/PATCH HTTP methods
    These types of requests use the string representation of the body to calculate the signature.

    For example, for the request with body: `{"foo": "bar"}` the signature calculated using `sec_12345` as the private key would be `4d84ba663b9c6179dd98023087da5baa8a4e3eb59ba45284935261350ba70742`

  ### GET HTTP method
    This type of request uses the query string to calculate the signature. Take into account that the "?" character must not be included while calculating the signature.

    For example, for the request with query string: `?foo=bar` the signature calculated using `sec_12345` as the private key would be `88d64dfcb542c35dc22bae059bd5f5a5d038572a7b391dfc4cd5f3a5530c1760` which is the hash for the string "foo=bar"

    To generate the signature of a GET request without any parameters, simply encode an empty string.

  # Security

  The API uses asymmetric cryptography to authenticate requests using the API
  keys we provide. This provides the following assurances:
    - **Requester identification:** Every request requires your public key to be sent, in conjunction with a signature generated with your secret key.
    - **Protection against man-in-the-middle (MITM) attacks:** The request signature is calculated using the body of the request, which means that any request that has been tampered with during the transport will be rejected by the Currency Alliance platform, since the signature received will not match the request contents.

  The API only supports requests over HTTPS.


  # Idempotency

  The API supports [idempotent](https://en.wikipedia.org/wiki/Idempotence)
  requests to safely retry requests without having to worry about doing the same
  operation more than once.

  For example, if there's a connection error generating a gift card, you can
  retry the request with the same idempotency key without having to worry about
  creating multiple gift cards.


  To send an idempotent request, include an additional `Idempotency-Key: <key>`
  header in the request. An Idempotency Key `<key>` is a unique identifier
  generated by the client with a length between 1 and 255 characters. While this
  can be any type of unique key, we recommend a UUID to avoid collisions. An
  Idempotency key expires 8 hours after the initial request.


  In a repeated request the response will always have the response body of the
  original request, along with the same status and `400` errors, if any. The
  response will also include the header `Idempotency-Repeated: true`. In the
  rare instances where a request is repeated while the first one has not been
  completed yet, the API will respond with a `409 - Conflict` status.


  The API supports idempotency on POST and PATCH requests. Since GET, PUT and
  DELETE are idempotent by default, the `Idempotency-Key` header will be
  ignored.



  # Key fields

  Currency Alliance acts as a connectivity bridge between various partners using
  its standardized APIs and interface, hence, shielding each partner from the
  complexity, nuances, and customizations of hundreds of loyalty systems and
  merchant partners. However, the interacting partners need to have a common
  reference for a transaction in their own system for easy reconciliation as
  well as for customer support purposes.

  In this section, you will find information on some key fields and attributes
  that are used through our API and on different objects. This information will
  help you understand how to use these key fields.


  ## External Reference

  The field `external_reference` is used for each transaction request to provide
  a unique identifier from your system that can be used as a reference during
  the reconciliation process. This could be a GUID, internal transaction
  identifier, invoice number, booking number, itinerary number, or any other
  unique number in your system that can be used to uniquely identify the action.
  Even though this is not a required field, it is strongly recommended that you
  provide value in this field.


  ## Loyalty System Id

  The field `loyalty_system_id` is returned by our system on each transaction
  and it provides the unique identifier in the partner loyalty system. This ID
  is not generated by Currency Alliance but is provided by the partner loyalty
  program and hence could be used as a common field for reconciliation between
  your system and the partner's system.


  ## Loyalty System Data

  Sometimes, a loyalty program requires you to send some additional data to
  connect. For example, user_id, application_id, partner_code, etc. You will be
  able to provide the data in this field for all the transactions with the
  partner loyalty program. To check if and what additional data is required by
  the partner loyalty program, refer to the Partners Endpoint.



  # Common Use cases

  Our API can be used for numerous Loyalty Commerce use cases. Some of the most
  common use cases are mentioned below along with the information on which
  Endpoints to use for each use case. There are auxiliary Endpoints that could
  be used to enhance your integration and customer experience. For example, you
  could pull all transaction history out via the API into your Business
  Intelligence or data staging environments or you could validate the member
  details before issuing Loyalty Currency Units.


  ## Accrual/Issue/Top-up

  The underlying objective of this use case is to “give Loyalty Currency Units
  to a member” for one reason or another. The reason could be a purchase of a
  product, their birthday, completion of a survey, referral, customer service
  issue, etc. Furthermore, you may want to give the member units of your own
  Loyalty Currency or one of your Partners’ Loyalty Currency.


  You should use Accruals Endpoints for this use case. There are three Endpoints
  that can be used for issuing your or a Partner’s currency. You can use any one
  of the Endpoints or a combination of them to issue Loyalty Currency Units to
  the member.


  ### Direct Accruals

  This Endpoint is to be used when you know the exact number of Loyalty Currency
  Units to give to a member. In this scenario, you are calculating the number of
  Loyalty Currency Units in your environment and providing the exact number of
  units in the endpoint.


  ### Purchase Rules

  This Endpoint is to be used when you would like to give the number of Loyalty
  Currency Units based on Purchase Rule(s) defined in the Currency Alliance
  system. For example, giving points worth 1% of the fiat transaction amount. In
  this case, your application does not need to know how to calculate the number
  of Loyalty Currency Units or even the cost of the Loyalty Currency Units in
  any of your Partners' programs.


  ### Activity Rules

  This Endpoint is to be used when you would like to issue the number of Loyalty
  Currency Units based on pre-defined Activity Rule(s) in the system. For
  example, you might offer 200 points for posting a product review or referring
  a friend.


  ## Currency Exchange

  Our API provides tools for quick collaboration among brands to enable their
  respective members to exchange loyalty units between programs. The exchange
  could be one-way only, or both directions – in and out – of the programs. Use
  the Loyalty Currency Exchange Endpoints to implement this use case. There are
  2 Endpoints that can be used to enable exchange between partners.


  ### Simulate an exchange

  This Endpoint allows you to simulate how many Loyalty Currency units the
  member would receive of a Partner’s Loyalty Currency in exchange. This can be
  used to show the member how many points in one or more programs they could get
  if completing the exchange.


  ### Execute an exchange

  This Endpoint allows you to comlete the exchange Loyalty Currency units to the
  Partner’s Loyalty Currency.


  **Tip:** You could use the Partners Endpoints to get the list of Exchange
  Partners and automatically display the fields required for each program to
  complete the exchange. This will be necessary for loyalty programs that
  require more member validation fields than just the membership number.


  ## Redemption/Pay with Points

  Our Redemption Endpoints have standardized the redemption process across
  various types of loyalty programs and underlying loyalty systems. This shields
  you from needing to understand the underlying complexity to integrate into a
  new loyalty system or modifying the existing integration for a different set
  of parameters for a new partner.


  You should use Standard Redemption Endpoints for this use case. There are four
  Endpoints that can be used for allowing a Partner’s Loyalty Currency as a form
  of payment. You can use any one of the Endpoints or a combination of them
  depending on your customer journey. Although not necessary, we highly
  recommend you use the  “Lookup a Member” Endpoint to validate if the member
  exists and if they have enough balance to complete the payment before
  submitting the payment transaction.


  Strictly speaking, Loyalty Exchange and Exchange for Gift Cards are also
  redemptions, but we provide explicit Endpoints for those actions due to the
  very high occurrence of those use cases in the industry. Standard Redemptions
  refers to any other redemptions where the Partners have allowed the member to
  redeem (exchange) their Loyalty Currency Units for your Products and Services.
  The products and services may range from flower delivery to booking a trip,
  buying an insurance plan, topping up their mobile plan, paying at a
  restaurant, buying concert tickets, or even applying points toward the
  purchase of a car.


  ### Simulate a Redemption

  To simulate the redemption action and provide information to the member such
  as the number of points required to complete the action, cancellation allowed,
  etc. without actually deducting the points from their balance or completing
  the transaction.


  ### Execute a Redemption

  Deduct points from the member’s account in exchange for the product or service
  offered.


  ### Adjust a Redemption

  If allowed by the Partner, you may use this Endpoint to notify of any
  modification in an already completed Redemption. The system will automatically
  identify if more points are to be redeemed or points are to be refunded to the
  member.


  ### Cancel a Redemption

  If allowed by the Partner, you may use this Endpoint to cancel an already
  completed Redemption to refund the points.
