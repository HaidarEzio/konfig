hash: 6dd131ddc01156d62dc9a3cdb503d59e2948ea0b41d3d4081e04fd09bed1de11
methodObjects:
  - url: /v1/experiments/{experiment_id_or_slug}/events
    method: sendEvent
    httpMethod: post
    tag: Experiment APIs
    typeScriptTag: experimentApIs
    description: Send Experiment Event
    parameters:
      - name: user_id
        schema: string
        description: ''
        example: '2179873'
      - name: anonymous_id
        schema: string
        description: ''
        example: 403fb18e-98ff-434d-8585-726fabf5ed37
      - name: variant_name
        schema: string
        description: ''
        example: Treatment_Group
      - name: timestamp
        schema: string
        description: ''
        example: '2022-01-23T12:34:56-08:00'
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/interactions
    method: removeData
    httpMethod: delete
    tag: Interaction APIs
    typeScriptTag: interactionApIs
    description: Interaction Delete API
    parameters:
      - name: user_ids
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/interactions
    method: insertRecords
    httpMethod: post
    tag: Interaction APIs
    typeScriptTag: interactionApIs
    description: Interaction Upload API
    parameters:
      - name: data
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/products
    method: bulkInsert
    httpMethod: post
    tag: Product / Content APIs
    typeScriptTag: productContentApIs
    description: Product / Content Upload API
    parameters:
      - name: data
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /v1/products/{product_id}
    method: deleteProductContent
    httpMethod: delete
    tag: Product / Content APIs
    typeScriptTag: productContentApIs
    description: Product / Content Delete API
    parameters:
      - name: productId
        schema: string
        required: true
        description: ''
        example: PRODUCT_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /v1/products/{product_id}
    method: getProductDetails
    httpMethod: get
    tag: Product / Content APIs
    typeScriptTag: productContentApIs
    description: Product / Content Read API
    parameters:
      - name: productId
        schema: string
        required: true
        description: ''
        example: PRODUCT_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /v1/products/_ids
    method: getProductIds
    httpMethod: get
    tag: Product / Content APIs
    typeScriptTag: productContentApIs
    description: Product / Content ID List API
    parameters: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /v1/products/_delete
    method: bulkDelete
    httpMethod: post
    tag: Product / Content APIs
    typeScriptTag: productContentApIs
    description: Product / Content Bulk Delete API
    parameters:
      - name: data
        schema: object
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /v1/users
    method: bulkUpload
    httpMethod: post
    tag: User APIs
    typeScriptTag: userApIs
    description: User Upload API
    parameters:
      - name: data
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /v1/users/{user_id}
    method: deleteUser
    httpMethod: delete
    tag: User APIs
    typeScriptTag: userApIs
    description: User Delete API
    parameters:
      - name: userId
        schema: string
        required: true
        description: ''
        example: USER_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /v1/users/{user_id}
    method: getUserDetails
    httpMethod: get
    tag: User APIs
    typeScriptTag: userApIs
    description: User Read API
    parameters:
      - name: userId
        schema: string
        required: true
        description: ''
        example: USERID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '404'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /v1/users/_delete
    method: bulkUserDelete
    httpMethod: post
    tag: User APIs
    typeScriptTag: userApIs
    description: User Bulk Delete API
    parameters:
      - name: data
        schema: object
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '400'
        description: ''
      - statusCode: '401'
        description: ''
      - statusCode: '403'
        description: ''
      - statusCode: '422'
        description: ''
      - statusCode: '500'
        description: ''
  - url: /v1/search/search
    method: searchRequest
    httpMethod: post
    tag: Search APIs
    typeScriptTag: searchApIs
    description: Search API
    parameters:
      - name: engine_id
        schema: string
        description: ''
      - name: user_id
        schema: string
        description: ''
      - name: anonymous_id
        schema: string
        description: ''
      - name: user_hash
        schema: string
        description: ''
      - name: user_cohort
        schema: object
        description: ''
      - name: rows
        schema: integer
        description: ''
        default: 5
      - name: type
        schema: string
        description: ''
      - name: dedupe_product_group_id
        schema: boolean
        description: ''
        default: true
      - name: additional_interactions
        schema: array
        description: ''
        default: []
      - name: fl
        schema: array
        description: ''
        default: []
      - name: exclude
        schema: array
        description: ''
      - name: q
        schema: string
        description: ''
      - name: advanced_q
        schema: string
        description: ''
      - name: boosting_tags
        schema: array
        description: ''
        example:
          - tag-1
          - quetag-2
        default: []
      - name: enable_boosting_campaigns
        schema: boolean
        description: ''
        default: true
      - name: custom_context
        schema: object
        description: ''
        example:
          session_variable_1:
            - value_1
            - value_2
      - name: language
        schema: string
        description: ''
      - name: like
        schema: string
        description: ''
      - name: category
        schema: array
        description: ''
      - name: spellcheck
        schema: object
        description: ''
      - name: start
        schema: integer
        description: ''
        default: 0
      - name: order_by
        schema: array
        description: ''
        default: []
      - name: facets
        schema: array
        description: ''
        default: []
      - name: facet_filters
        schema: object
        description: ''
        default: {}
      - name: anchoring_settings
        schema: array
        description: ''
        default: []
      - name: enable_partial_match
        schema: boolean
        description: ''
        default: false
      - name: partial_match_mode
        schema: string
        description: ''
        default: blended
      - name: enable_partial_match_threshold
        schema: integer
        description: ''
      - name: enable_semantic_search
        schema: boolean
        description: ''
        default: false
      - name: semantic_search_threshold
        schema: number
        description: ''
        default: 0.5
      - name: enable_matched_fields
        schema: boolean
        description: ''
        default: false
      - name: query_product_existence
        schema: object
        description: ''
      - name: personalization_weight
        schema: integer
        description: ''
        default: 5
      - name: fq
        schema: string
        description: ''
      - name: boost_fq
        schema: string
        description: ''
      - name: boost_positions
        schema: array
        description: ''
      - name: boost_rules
        schema: array
        description: ''
        default: []
      - name: geo
        schema: object
        description: ''
      - name: diversification
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/search/autocomplete
    method: autocompleteRequest
    httpMethod: post
    tag: Search APIs
    typeScriptTag: searchApIs
    description: Autocomplete API
    parameters:
      - name: engine_id
        schema: string
        required: false
        description: ''
      - name: user_id
        schema: string
        required: false
        description: ''
      - name: anonymous_id
        schema: string
        required: false
        description: ''
      - name: user_hash
        schema: string
        required: false
        description: ''
      - name: user_cohort
        schema: object
        required: false
        description: ''
      - name: rows
        schema: integer
        required: false
        description: ''
        default: 5
      - name: type
        schema: string
        required: false
        description: ''
      - name: dedupe_product_group_id
        schema: boolean
        required: false
        description: ''
        default: true
      - name: additional_interactions
        schema: array
        required: false
        description: ''
        default: []
      - name: fq
        schema: string
        required: false
        description: ''
      - name: boost_fq
        schema: string
        required: false
        description: ''
      - name: boost_positions
        schema: array
        required: false
        description: ''
      - name: boost_rules
        schema: array
        required: false
        description: ''
        default: []
      - name: geo
        schema: object
        required: false
        description: ''
      - name: q
        schema: string
        required: true
        description: ''
        example: Q
      - name: language
        schema: string
        required: false
        description: ''
      - name: min_query_users
        schema: integer
        required: false
        description: ''
        default: 5
      - name: completion_fields
        schema: array
        required: false
        description: ''
        default:
          - title
      - name: fl
        schema: array
        required: false
        description: ''
        default: []
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/search/mget
    method: multipleGetProducts
    httpMethod: post
    tag: Search APIs
    typeScriptTag: searchApIs
    description: Multiple Get API
    parameters:
      - name: engine_id
        schema: string
        required: false
        description: ''
      - name: user_id
        schema: string
        required: false
        description: ''
      - name: anonymous_id
        schema: string
        required: false
        description: ''
      - name: user_hash
        schema: string
        required: false
        description: ''
      - name: product_ids
        schema: array
        required: true
        description: ''
      - name: fl
        schema: array
        required: false
        description: ''
        default:
          - '*'
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/ask/questions
    method: submitQuestion
    httpMethod: post
    tag: Ask APIs
    typeScriptTag: askApIs
    description: Create a new qestion
    parameters:
      - name: user_id
        schema: string
        required: false
        description: ''
      - name: anonymous_id
        schema: string
        required: false
        description: ''
      - name: fq
        schema: string
        required: false
        description: ''
      - name: question
        schema: string
        required: true
        description: ''
        example: QUESTION
      - name: parent_question_id
        schema: string
        required: false
        description: ''
      - name: yearly_decay
        schema: number
        required: false
        description: ''
        default: 0.93
      - name: source_fl
        schema: array
        required: false
        description: ''
        default:
          - title
      - name: related_resource_fl
        schema: array
        required: false
        description: ''
        default:
          - title
      - name: cite_start
        schema: string
        required: false
        description: ''
      - name: cite_end
        schema: string
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/ask/questions/{question_id}/answer
    method: getAnswerStage
    httpMethod: get
    tag: Ask APIs
    typeScriptTag: askApIs
    description: Get latest answer of asked question
    parameters:
      - name: questionId
        schema: string
        required: true
        description: ''
        example: QUESTION_ID
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/recommendation/user_to_products
    method: getRecommendedProducts
    httpMethod: post
    tag: Recommendation APIs
    typeScriptTag: recommendationApIs
    description: User to Products API
    parameters:
      - name: engine_id
        schema: string
        description: ''
      - name: user_id
        schema: string
        description: ''
      - name: anonymous_id
        schema: string
        description: ''
      - name: user_hash
        schema: string
        description: ''
      - name: user_cohort
        schema: object
        description: ''
      - name: rows
        schema: integer
        description: ''
        default: 5
      - name: type
        schema: string
        description: ''
      - name: dedupe_product_group_id
        schema: boolean
        description: ''
        default: true
      - name: additional_interactions
        schema: array
        description: ''
        default: &ref_0 []
      - name: fl
        schema: array
        description: ''
        default: &ref_1 []
      - name: exclude
        schema: array
        description: ''
      - name: boosting_tags
        schema: array
        description: ''
        example: &ref_2
          - tag-1
          - quetag-2
        default: &ref_3 []
      - name: fq
        schema: string
        description: ''
      - name: boost_fq
        schema: string
        description: ''
      - name: boost_positions
        schema: array
        description: ''
      - name: boost_rules
        schema: array
        description: ''
        default: &ref_4 []
      - name: geo
        schema: object
        description: ''
      - name: diversification
        schema: object
        description: ''
      - name: pagination_id
        schema: string
        description: ''
      - name: start
        schema: integer
        description: ''
        default: 0
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/recommendation/user_to_categories
    method: getUserCategories
    httpMethod: post
    tag: Recommendation APIs
    typeScriptTag: recommendationApIs
    description: User to Categories API
    parameters:
      - name: engine_id
        schema: string
        description: ''
      - name: user_id
        schema: string
        description: ''
      - name: anonymous_id
        schema: string
        description: ''
      - name: user_hash
        schema: string
        description: ''
      - name: user_cohort
        schema: object
        description: ''
      - name: rows
        schema: integer
        description: ''
        default: 5
      - name: type
        schema: string
        description: ''
      - name: dedupe_product_group_id
        schema: boolean
        description: ''
        default: true
      - name: additional_interactions
        schema: array
        description: ''
        default: []
      - name: fl
        schema: array
        description: ''
        default: []
      - name: exclude
        schema: array
        description: ''
      - name: boosting_tags
        schema: array
        description: ''
        example:
          - tag-1
          - quetag-2
        default: []
      - name: products_per_category
        schema: integer
        description: ''
        default: 5
      - name: root_category
        schema: array
        description: ''
        default: []
      - name: fq
        schema: string
        description: ''
      - name: boost_fq
        schema: string
        description: ''
      - name: boost_positions
        schema: array
        description: ''
      - name: boost_rules
        schema: array
        description: ''
        default: []
      - name: geo
        schema: object
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/recommendation/user_to_attributes
    method: getUserAttributes
    httpMethod: post
    tag: Recommendation APIs
    typeScriptTag: recommendationApIs
    description: User to Attributes API
    parameters:
      - name: boosting_tags
        schema: array
        required: false
        description: ''
        example:
          - tag-1
          - quetag-2
        default: []
      - name: field
        schema: string
        required: true
        description: ''
        example: FIELD
      - name: boost_attributes
        schema: array
        required: false
        description: ''
        default: []
      - name: exclude_attributes
        schema: array
        required: false
        description: ''
        default: []
      - name: rows
        schema: integer
        required: false
        description: ''
        default: 5
      - name: products_per_attribute
        schema: integer
        required: false
        description: ''
        default: 2
      - name: engine_id
        schema: string
        required: false
        description: ''
      - name: user_id
        schema: string
        required: false
        description: ''
      - name: anonymous_id
        schema: string
        required: false
        description: ''
      - name: user_hash
        schema: string
        required: false
        description: ''
      - name: user_cohort
        schema: object
        required: false
        description: ''
      - name: type
        schema: string
        required: false
        description: ''
      - name: dedupe_product_group_id
        schema: boolean
        required: false
        description: ''
        default: true
      - name: additional_interactions
        schema: array
        required: false
        description: ''
        default: []
      - name: fl
        schema: array
        required: false
        description: ''
        default: []
      - name: exclude
        schema: array
        required: false
        description: ''
      - name: fq
        schema: string
        required: false
        description: ''
      - name: boost_fq
        schema: string
        required: false
        description: ''
      - name: boost_positions
        schema: array
        required: false
        description: ''
      - name: boost_rules
        schema: array
        required: false
        description: ''
        default: []
      - name: geo
        schema: object
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/recommendation/user_to_trending
    method: getUserTrending
    httpMethod: post
    tag: Recommendation APIs
    typeScriptTag: recommendationApIs
    description: User to Trending API
    parameters:
      - name: engine_id
        schema: string
        description: ''
      - name: user_id
        schema: string
        description: ''
      - name: anonymous_id
        schema: string
        description: ''
      - name: user_hash
        schema: string
        description: ''
      - name: user_cohort
        schema: object
        description: ''
      - name: rows
        schema: integer
        description: ''
        default: 5
      - name: type
        schema: string
        description: ''
      - name: dedupe_product_group_id
        schema: boolean
        description: ''
        default: true
      - name: additional_interactions
        schema: array
        description: ''
        default: *ref_0
      - name: fl
        schema: array
        description: ''
        default: *ref_1
      - name: exclude
        schema: array
        description: ''
      - name: boosting_tags
        schema: array
        description: ''
        example: *ref_2
        default: *ref_3
      - name: fq
        schema: string
        description: ''
      - name: boost_fq
        schema: string
        description: ''
      - name: boost_positions
        schema: array
        description: ''
      - name: boost_rules
        schema: array
        description: ''
        default: *ref_4
      - name: geo
        schema: object
        description: ''
      - name: diversification
        schema: object
        description: ''
      - name: pagination_id
        schema: string
        description: ''
      - name: start
        schema: integer
        description: ''
        default: 0
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/recommendation/product_to_products
    method: getRelatedProducts
    httpMethod: post
    tag: Recommendation APIs
    typeScriptTag: recommendationApIs
    description: Product to Products API
    parameters:
      - name: product_id
        schema: string
        description: ''
      - name: product_ids
        schema: array
        description: ''
      - name: product_group_id
        schema: string
        description: ''
      - name: product_group_ids
        schema: array
        description: ''
      - name: buy_together
        schema: boolean
        description: ''
        default: false
      - name: engine_id
        schema: string
        description: ''
      - name: user_id
        schema: string
        description: ''
      - name: anonymous_id
        schema: string
        description: ''
      - name: user_hash
        schema: string
        description: ''
      - name: user_cohort
        schema: object
        description: ''
      - name: rows
        schema: integer
        description: ''
        default: 5
      - name: type
        schema: string
        description: ''
      - name: dedupe_product_group_id
        schema: boolean
        description: ''
        default: true
      - name: additional_interactions
        schema: array
        description: ''
        default: []
      - name: fl
        schema: array
        description: ''
        default: []
      - name: exclude
        schema: array
        description: ''
      - name: boosting_tags
        schema: array
        description: ''
        example:
          - tag-1
          - quetag-2
        default: []
      - name: fq
        schema: string
        description: ''
      - name: boost_fq
        schema: string
        description: ''
      - name: boost_positions
        schema: array
        description: ''
      - name: boost_rules
        schema: array
        description: ''
        default: []
      - name: geo
        schema: object
        description: ''
      - name: diversification
        schema: object
        description: ''
      - name: pagination_id
        schema: string
        description: ''
      - name: start
        schema: integer
        description: ''
        default: 0
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/qa/question_answering
    method: extractAnswer
    httpMethod: post
    tag: Q&A APIs
    typeScriptTag: q&aApIs
    description: Q&A API
    parameters:
      - name: version
        schema: string
        required: false
        description: ''
        example: v1.2
        default: v1.2
      - name: q
        schema: string
        required: true
        description: ''
        example: what is gradient descent
      - name: min_probability
        schema: number
        required: true
        description: ''
        example: 0.7
      - name: rows
        schema: integer
        required: false
        description: ''
        default: 1
      - name: fl
        schema: array
        required: false
        description: ''
        default: []
      - name: spellcheck
        schema: object
        required: false
        description: ''
      - name: enable_answer_html
        schema: boolean
        required: false
        description: ''
        default: false
      - name: enable_answer_block
        schema: boolean
        required: false
        description: ''
        default: false
      - name: fq
        schema: string
        required: false
        description: ''
      - name: boost_fq
        schema: string
        required: false
        description: ''
      - name: boost_positions
        schema: array
        required: false
        description: ''
      - name: boost_rules
        schema: array
        required: false
        description: ''
        default: []
      - name: geo
        schema: object
        required: false
        description: ''
      - name: boost_probability_threshold
        schema: number
        required: false
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/qa/questions
    method: uploadQuestionBank
    httpMethod: post
    tag: Q&A APIs
    typeScriptTag: q&aApIs
    description: Upload Question Bank API
    parameters:
      - name: data
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: ''
      - statusCode: '422'
        description: ''
  - url: /v1/qa/question_autocomplete
    method: getAutocomplete
    httpMethod: post
    tag: Q&A APIs
    typeScriptTag: q&aApIs
    description: Question Autocomplete API
    parameters:
      - name: q
        schema: string
        required: true
        description: ''
        example: what is g
      - name: rows
        schema: integer
        required: false
        description: ''
        default: 5
    responses:
      - statusCode: '200'
        description: Autocomplete Response
      - statusCode: '422'
        description: ''
  - url: /v1/bulk
    method: requestPost
    httpMethod: post
    tag: Bulk API
    typeScriptTag: bulkApi
    description: Bulk Request API
    parameters:
      - name: requests
        schema: array
        required: true
        description: ''
    responses:
      - statusCode: '200'
        description: 'Bulk API response '
      - statusCode: '422'
        description: ''
numberOfSchemas: 175
apiDescription: >

  # Overview

  Miso’s approach to personalization is to train machine learning Engines on
  three core data sets:


  1. Your site’s log of historical and real-time interactions,

  2. Your catalog of products and content, and

  3. Your users. Miso provides the output of its Engines to you, so you can
  build search and recommendation

  experiences that are personalized down to the individual level (n=1
  personalization).


  To see how Miso works and explore the power of its Engines, we recommend
  following

  [this tutorial](https://docs.askmiso.com/) to get

  started with our Playground data. Integrating your site or application with
  Miso happens in three basic steps:


  1. Upload your data

  2. Train your Engines

  3. Build search and recommendation experiences with the output of your
  Engines.



  Miso provides two main integration points. The first is your [Dojo
  Dashboard](https://dojo.askmiso.com/),

  which is used to set up your Engines with the conversions you want to optimize
  and your training schedule.

  Dojo is also a great way to get familiar with Miso by manually uploading data
  and exploring the output of

  Miso’s Engines. In Dojo’s Sandboxes, you can tweak your Engine settings and
  see visual examples of Miso’s search

  and recommendations running on your live data.


  The second integration point is Miso’s API, which lets you automatically
  manage your data in Miso and build

  experiences that leverage the output of Miso’s personalization Engines.



  Miso’s API is composed of two major groups of REST API endpoints: Data APIs
  and Engine APIs.


  ### Data APIs

  Data APIs collect input to Miso's personalization Engines. These APIs all
  support high-throughput

  data ingestion through bulk insert, and satisfy GDPR and CCPA compliance by
  letting users delete their data

  from Miso. Subcategories of Data APIs are:


  * [Interaction APIs](https://api.askmiso.com), for managing your Interaction
  records. By uploading historical and real-time Interaction

  records, you tell Miso how users are engaging with the products and content on
  your site, and in turn, Miso’s

  Engines learn how to optimize your conversion funnels.

  * [Product / Content APIs](https://api.askmiso.com), for managing your Product
  / Content records. These records provide a deep semantic

  understanding of your catalog and keep Miso up to date about your offerings so
  it can make smart and timely

  suggestions. The `product_id` is how Miso links Product / Content records to
  your Interaction records.

  * [User APIs](https://api.askmiso.com), for managing your User records. These
  records tell Miso about your site’s users and visitors,

  so Miso can build an understanding of user segmentation and behavior in
  relation to products and content.

  The `user_id` is how Miso links User records to your Interaction records.


  As a rule of thumb, we recommend batching up data to avoid timeout risks. For
  the Product / Content and User

  Upload APIs, we recommend limiting each API upload call to about 100 records
  at a time. For the Interaction

  Upload API, we recommend limiting your calls to around 10,000 records at a
  time.


  ### Engine APIs

  Engine APIs provide the output of Miso's personalization Engines. We designed
  these APIs with a focus on low

  latency and high availability. Most of these APIs' 95th percentile response
  time is under 75ms,

  and the services are replicated to at least three separate instances for high
  availability.

  The types of Engine APIs are:


  * [Search APIs](https://api.askmiso.com), for getting Miso’s personalized
  search results for a user, with search-as-you-type and

  autocompletion.

  * [Recommendation APIs](https://api.askmiso.com), for retrieving Miso’s
  recommendations that match users with

  the products, categories, and product attributes that are likely to drive
  conversions.


  # Authentication

  [View your API Keys in your Dojo
  Dashboard.](https://dojo.askmiso.com/docs/api-browser)


  There are three environments in Miso:

  * **Playground**, a read-only tutorial environment with sample data.

  * **Development**, for staging, QA, and experimentation.

  * **Production**, where you run your live integration with Miso.


  Access a Miso environment by passing in the corresponding API key in your API
  calls. There is one publishable

  key and one secret key per environment.


  API Key can passed with query parameter `api_key`, or using the `X-API-KEY`
  header.
