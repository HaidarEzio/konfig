{
  "securitySchemes": {
    "OAuth2": {
      "type": "oauth2",
      "description": "The standard [client credentials](https://developer.okta.com/docs/guides/implement-grant-type/clientcreds/main/#about-the-client-credentials-grant) flow:\n\n1. Client makes a [request](https://developer.okta.com/docs/guides/implement-grant-type/clientcreds/main/#request-for-token) to authorization server using client credentials\n```\nBASIC_AUTH=$(echo -n $CLIENT_ID:$CLIENT_SECRET | base64)\ncurl --request POST \\\n  --url 'https://eu.id.resistant.ai/oauth2/aus2un1hkrKhPjir4417/v1/token' \\\n  --header 'accept: application/json' \\\n  --header \"authorization: Basic $BASIC_AUTH\" \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data 'grant_type=client_credentials&scope=submissions.read submissions.write'\n```\n2. If the credentials are valid, authorization server responds with an access token\n```\n{\n  \"access_token\": \"eyJhbG[...]1LQ\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"scope\": \"submissions.read submissions.write\"\n}\n```\n3. Client uses the access token to make subsequent API requests with Authorization header\n```\nAuthorization: Bearer eyJhbG[...]1LQ\n```\n\nPlease note that Token URL is specific for a given environment. Correct URL is in the corresponding environment documentation.\n",
      "flows": {
        "clientCredentials": {
          "tokenUrl": "https://eu.id.resistant.ai/oauth2/aus2un1hkrKhPjir4417/v1/token",
          "scopes": {
            "submissions.read": "Read analysis results for a submission",
            "submissions.write": "Create a new submission"
          }
        }
      }
    }
  },
  "apiBaseUrl": "https://api.documents.resistant.ai",
  "apiVersion": "2.0.0b",
  "apiDescription": "\nResistant Documents provides this API to programmatically interact with its document analysis engine.\nInteraction with the API can be divided into three phases:\n\n1. Creating document submission\n2. Uploading a file for for analysis to an address returned from step 1.\n3. Fetching analysis results\n\nIn the first step, the submission is created by posting to the  `/v2/submission` endpoint. The response contains a `submission_id` uniquely identifying the document to be analyzed throughout the entire interaction, and is used to fetch analysis results later.\n\nSubmission response also returns `upload_url` containing a pre-signed URL. This URL should be used to upload the actual document to be analyzed in the second step. Please note the document has to be uploaded using HTTP `PUT` method with `Content-Type` HTTP header set to `application/octet-stream`.\n\nIn the last step, client should repeatedly poll using the `/v2/submission/{submission_id}/fraud` endpoint for analysis results. The best practice is to use polling with an [exponential back-off](https://en.wikipedia.org/wiki/Exponential_backoff) to reduce load on the API.\n\n# Authentication\n\n<SecurityDefinitions />",
  "apiTitle": "Resistant Documents API",
  "endpoints": 10,
  "sdkMethods": 11,
  "schemas": 78,
  "parameters": 24,
  "originalCustomRequest": {
    "lambda": true
  },
  "customRequestSpecFilename": "resistant.ai.yaml",
  "difficultyScore": 56,
  "difficulty": "Easy"
}