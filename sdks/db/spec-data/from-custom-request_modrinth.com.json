{
  "securitySchemes": {
    "TokenAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "apiBaseUrl": "https://api.modrinth.com/v2",
  "apiVersion": "v2.7.0/15cf3fc",
  "apiDescription": "This documentation doesn't provide a way to test our API. In order to facilitate testing, we recommend the following tools:\n\n- [cURL](https://curl.se/) (recommended, command-line)\n- [ReqBIN](https://reqbin.com/) (recommended, online)\n- [Postman](https://www.postman.com/downloads/)\n- [Insomnia](https://insomnia.rest/)\n- Your web browser, if you don't need to send headers or a request body\n\nOnce you have a working client, you can test that it works by making a `GET` request to `https://staging-api.modrinth.com/`:\n\n```json\n{\n  \"about\": \"Welcome traveler!\",\n  \"documentation\": \"https://docs.modrinth.com\",\n  \"name\": \"modrinth-labrinth\",\n  \"version\": \"2.7.0\"\n}\n```\n\nIf you got a response similar to the one above, you can use the Modrinth API!\nWhen you want to go live using the production API, use `api.modrinth.com` instead of `staging-api.modrinth.com`.\n\n## Authentication\nThis API has two options for authentication: personal access tokens and [OAuth2](https://en.wikipedia.org/wiki/OAuth).\nAll tokens are tied to a Modrinth user and use the `Authorization` header of the request.\n\nExample:\n```\nAuthorization: mrp_RNtLRSPmGj2pd1v1ubi52nX7TJJM9sznrmwhAuj511oe4t1jAqAQ3D6Wc8Ic\n```\n\nYou do not need a token for most requests. Generally speaking, only the following types of requests require a token:\n- those which create data (such as version creation)\n- those which modify data (such as editing a project)\n- those which access private data (such as draft projects, notifications, emails, and payout data)\n\nEach request requiring authentication has a certain scope. For example, to view the email of the user being requested, the token must have the `USER_READ_EMAIL` scope.\nYou can find the list of available scopes [on GitHub](https://github.com/modrinth/labrinth/blob/master/src/models/pats.rs#L15). Making a request with an invalid scope will return a 401 error.\n\nPlease note that certain scopes and requests cannot be completed with a personal access token or using OAuth.\nFor example, deleting a user account can only be done through Modrinth's frontend.\n\n### OAuth2\nApplications interacting with the authenticated API should create an OAuth2 application.\nYou can do this in [the developer settings](https://modrinth.com/settings/applications).\n\nOnce you have created a client, use the following URL to have a user authorize your client:\n```\nhttps://modrinth.com/auth/authorize?client_id=<CLIENT_ID>&redirect_uri=<CALLBACK_URL>&scope=<SCOPE_ONE>+<SCOPE_TWO>+<SCOPE_THREE>\n```\n\nThen, use the following URL to get the token:\n```\nhttps://api.modrinth.com/_internal/oauth/token\n```\n\nThis route will be changed in the future to move the `_internal` part to `v3`.\n\n### Personal access tokens\nPersonal access tokens (PATs) can be generated in from [the user settings](https://modrinth.com/settings/account).\n\n### GitHub tokens\nFor backwards compatibility purposes, some types of GitHub tokens also work for authenticating a user with Modrinth's API, granting all scopes.\n**We urge any application still using GitHub tokens to start using personal access tokens for security and reliability purposes.**\nGitHub tokens will cease to function to authenticate with Modrinth's API as soon as version 3 of the API is made generally available.\n\n## Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with the [W3C spec](https://www.w3.org/TR/cors/).\nThis allows for cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n## Identifiers\nThe majority of items you can interact with in the API have a unique eight-digit base62 ID.\nProjects, versions, users, threads, teams, and reports all use this same way of identifying themselves.\nVersion files use the sha1 or sha512 file hashes as identifiers.\n\nEach project and user has a friendlier way of identifying them; slugs and usernames, respectively.\nWhile unique IDs are constant, slugs and usernames can change at any moment.\nIf you want to store something in the long term, it is recommended to use the unique ID.\n\n## Ratelimits\nThe API has a ratelimit defined per IP. Limits and remaining amounts are given in the response headers.\n- `X-Ratelimit-Limit`: the maximum number of requests that can be made in a minute\n- `X-Ratelimit-Remaining`: the number of requests remaining in the current ratelimit window\n- `X-Ratelimit-Reset`: the time in seconds until the ratelimit window resets\n\nRatelimits are the same no matter whether you use a token or not.\nThe ratelimit is currently 300 requests per minute. If you have a use case requiring a higher limit, please [contact us](mailto:admin@modrinth.com).\n\n## User Agents\nTo access the Modrinth API, you **must** use provide a uniquely-identifying `User-Agent` header.\nProviding a user agent that only identifies your HTTP client library (such as \"okhttp/4.9.3\") increases the likelihood that we will block your traffic.\nIt is recommended, but not required, to include contact information in your user agent.\nThis allows us to contact you if we would like a change in your application's behavior without having to block your traffic.\n- Bad: `User-Agent: okhttp/4.9.3`\n- Good: `User-Agent: project_name`\n- Better: `User-Agent: github_username/project_name/1.56.0`\n- Best: `User-Agent: github_username/project_name/1.56.0 (launcher.com)` or `User-Agent: github_username/project_name/1.56.0 (contact@launcher.com)`\n\n## Versioning\nModrinth follows a simple pattern for its API versioning.\nIn the event of a breaking API change, the API version in the URL path is bumped, and migration steps will be published below.\n\nWhen an API is no longer the current one, it will immediately be considered deprecated.\nNo more support will be provided for API versions older than the current one.\nIt will be kept for some time, but this amount of time is not certain.\n\nWe will exercise various tactics to get people to update their implementation of our API.\nOne example is by adding something like `STOP USING THIS API` to various data returned by the API.\n\nOnce an API version is completely deprecated, it will permanently return a 410 error.\nPlease ensure your application handles these 410 errors.\n\n### Migrations\nInside the following spoiler, you will be able to find all changes between versions of the Modrinth API, accompanied by tips and a guide to migrate applications to newer versions.\n\nHere, you can also find changes for [Minotaur](https://github.com/modrinth/minotaur), Modrinth's official Gradle plugin. Major versions of Minotaur directly correspond to major versions of the Modrinth API.\n\n<details><summary>API v1 to API v2</summary>\n\nThese bullet points cover most changes in the v2 API, but please note that fields containing `mod` in most contexts have been shifted to `project`.  For example, in the search route, the field `mod_id` was renamed to `project_id`.\n\n- The search route has been moved from `/api/v1/mod` to `/v2/search`\n- New project fields: `project_type` (may be `mod` or `modpack`), `moderation_message` (which has a `message` and `body`), `gallery`\n- New search facet: `project_type`\n- Alphabetical sort removed (it didn't work and is not possible due to limits in MeiliSearch)\n- New search fields: `project_type`, `gallery`\n  - The gallery field is an array of URLs to images that are part of the project's gallery\n- The gallery is a new feature which allows the user to upload images showcasing their mod to the CDN which will be displayed on their mod page\n- Internal change: Any project file uploaded to Modrinth is now validated to make sure it's a valid Minecraft mod, Modpack, etc.\n  - For example, a Forge 1.17 mod with a JAR not containing a mods.toml will not be allowed to be uploaded to Modrinth\n- In project creation, projects may not upload a mod with no versions to review, however they can be saved as a draft\n  - Similarly, for version creation, a version may not be uploaded without any files\n- Donation URLs have been enabled\n- New project status: `archived`. Projects with this status do not appear in search\n- Tags (such as categories, loaders) now have icons (SVGs) and specific project types attached\n- Dependencies have been wiped and replaced with a new system\n- Notifications now have a `type` field, such as `project_update`\n\nAlong with this, project subroutes (such as `/v2/project/{id}/version`) now allow the slug to be used as the ID. This is also the case with user routes.\n\n</details><details><summary>Minotaur v1 to Minotaur v2</summary>\n\nMinotaur 2.x introduced a few breaking changes to how your buildscript is formatted.\n\nFirst, instead of registering your own `publishModrinth` task, Minotaur now automatically creates a `modrinth` task. As such, you can replace the `task publishModrinth(type: TaskModrinthUpload) {` line with just `modrinth {`.\n\nTo declare supported Minecraft versions and mod loaders, the `gameVersions` and `loaders` arrays must now be used. The syntax for these are pretty self-explanatory.\n\nInstead of using `releaseType`, you must now use `versionType`. This was actually changed in v1.2.0, but very few buildscripts have moved on from v1.1.0.\n\nDependencies have been changed to a special DSL. Create a `dependencies` block within the `modrinth` block, and then use `scope.type(\"project/version\")`. For example, `required.project(\"fabric-api\")` adds a required project dependency on Fabric API.\n\nYou may now use the slug anywhere that a project ID was previously required.\n\n</details>\n",
  "apiTitle": "Labrinth",
  "endpoints": 55,
  "sdkMethods": 115,
  "schemas": 58,
  "parameters": 73,
  "contactUrl": "https://support.modrinth.com",
  "contactEmail": "support@modrinth.com",
  "originalCustomRequest": {
    "type": "GET",
    "url": "https://docs.modrinth.com/redocusaurus/plugin-redoc-0.yaml"
  },
  "customRequestSpecFilename": "modrinth.com.yaml",
  "difficultyScore": 162.25,
  "difficulty": "Medium"
}