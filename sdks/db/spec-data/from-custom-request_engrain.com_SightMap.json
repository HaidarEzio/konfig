{
  "securitySchemes": {
    "apiKey": {
      "type": "apiKey",
      "name": "API-Key",
      "x-displayName": "API Key",
      "description": "An API key sent via the `API-Key` header.\n```\ncurl -i -H \"API-Key: 12345\" https://api.sightmap.com/v1/assets\n```\n",
      "in": "header"
    }
  },
  "apiBaseUrl": "https://api.sightmap.com/v1",
  "apiVersion": "v1.20230828",
  "apiDescription": "# Introduction\n\nThe SightMap® API uses standard HTTP verbs to communicate and HTTP status\ncodes to indicate status and errors. All responses come in standard JSON.\nThe SightMap API is served over HTTPS to ensure data privacy; HTTP is not\nsupported.\n\n# Versioning\n\nVersions are communicated as `VERSION.RELEASE-DATE`, where `VERSION` denotes\nthe version number of the API and prefixed to all API request paths, such as\n`/v1/assets`. `RELEASE-DATE` denotes backwards-compatible changes to the\nAPI.\n\nWhen any non-backwards compatible additions must be made to the API, the\nversion number will be incremented.\n\n## Backwards-compatible changes\n\nWe consider the following changes to be backwards-compatible:\n\n- Adding new API resources.\n- Adding new optional request parameters to existing API methods.\n- Adding new properties to existing API responses.\n- Changing the order of properties in existing API responses.\n- Changing the length or format of object IDs or other opaque strings.\n- You can safely assume object IDs we generate will never exceed 255\n  characters, but you should be able to handle IDs of up to that length. If\n  for example you’re using MySQL, you should store IDs in a `VARCHAR(255)\n  COLLATE utf8_bin` column (the `COLLATE` configuration ensures\n  case-sensitivity in lookups).\n\n# Authentication\n\nFor requests which require Authentication, an API Key can be provided by\neither the `api-key` query parameter or `API-Key` header. We recommend the\nheader over the query parameter as it avoids your API key from being stored\nin browser history and most server logs. If neither query parameter or\nheader is provided, a `401` status code is returned with the following JSON:\n\n```\n{\n  \"message\": \"No API key found in request\"\n}\n```\n\nIf your API key cannot be validated, a `403` status code is returned with\nthe following JSON:\n\n```\n{\n  \"message\": \"Invalid authentication credentials\"\n}\n```\n\n<SecurityDefinitions />\n\n# Experimental features\n\nWe provide new API features via experimental flags. This allows users to opt-in\nfor new functionality and provide feedback prior to a feature becoming generally\navailable (GA). We believe in stability without stagnation. This ability allows\nour team to build and ship best-in-class APIs faster while upholding\nbackwards-compatibility on GA features.\n\nExperimental features are subject to change while undergoing development and\nfeedback. Therefore, they are exempt from any backwards-compatibility guarantees\nuntil they reach GA. We do not expect nor recommend using experimental features\nin production environments unless a partnership has been established with our\nteams working closely together.\n\nFlags are provided via the `Experimental-Flags` header. A comma-separated list\nis expected in order to pass multiple flags on a single request.\n\n```\ncurl -i https://api.sightmap.com/v1/assets \\\n  -H \"API-Key: 12345\" \\\n  -H \"Experimental-Flags: flag-1,flag-2\"\n```\n\n# Errors\n\nThe SightMap API uses standard HTTP status codes to indicate the success or\nfailure of the API request. The body of the response will be JSON in the\nfollowing format:\n\n```\n{\n  \"message\": \"Not found\"\n}\n```\n",
  "apiTitle": "SightMap® REST API",
  "endpoints": 52,
  "sdkMethods": 138,
  "schemas": 47,
  "parameters": 215,
  "contactUrl": "https://developers.sightmap.com",
  "originalCustomRequest": {
    "lambda": true
  },
  "customRequestSpecFilename": "engrain.com_SightMap.yaml",
  "difficultyScore": 215.25,
  "difficulty": "Hard"
}