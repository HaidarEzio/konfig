{
  "securitySchemes": {},
  "apiBaseUrl": "https://us-east.api.pipelinersales.com/api/v100/rest/spaces/{space_id}",
  "apiVersion": "v100",
  "apiTitle": "Pipeliner Cloud API",
  "endpoints": 742,
  "sdkMethods": 1264,
  "schemas": 2345,
  "parameters": 7113,
  "originalCustomRequest": {
    "type": "GET",
    "url": "https://stoplight.io/api/v1/projects/pipeliner/api-docs/nodes/openapi.json?fromExportButton=true&snapshotType=http_service&deref=optimizedBundle"
  },
  "customRequestSpecFilename": "pipelinersales.com.yaml",
  "difficultyScore": 3409.25,
  "difficulty": "Very Hard",
  "company": "Pipeliner",
  "sdkName": "pipeliner-{language}-sdk",
  "clientName": "Pipeliner",
  "metaDescription": "Pipeliner has revolutionized the complexity of CRM with a simple, unique visual interface, a no-code workflow automation engine, and instant, dynamic insights and reporting.\nThere is no other CRM that provides sales reps and sales management with so many ways to view and analyze sales data, while delivering intelligent, system-generated insights.\nPlus, thanks to our automation engine and easy integration with other systems (such as email, ERP, marketing), Pipeliner eliminates many of the manual and routine tasks that other systems impose on both sales reps and sales managers.\nThe Pipeliner CRM experience is so different from traditional CRM, which is why we drive the highest adoption rates, lower total cost of ownership, and rapid return on investment. Plus, with our quick onboarding and ease of learning to use and/or administer the system, there is little to no business disruption during deployment.\nAnd because we are committed to supporting the professional development of salespeople, we have even integrated our online sales magazine Sales POP! into the product to provide unparalleled sales-related content at the point of impact.",
  "apiStatusUrls": false,
  "homepage": "pipelinersales.com",
  "developerDocumentation": "developers.pipelinersales.com/api-docs",
  "categories": [
    "crm",
    "automation",
    "sales"
  ],
  "category": "CRM (Customer Relationship Management)",
  "apiDescription": "Pipeliner has revolutionized the complexity of CRM with a simple, unique visual interface, a no-code workflow automation engine, and instant, dynamic insights and reporting.\nThere is no other CRM that provides sales reps and sales management with so many ways to view and analyze sales data, while delivering intelligent, system-generated insights.\nPlus, thanks to our automation engine and easy integration with other systems (such as email, ERP, marketing), Pipeliner eliminates many of the manual and routine tasks that other systems impose on both sales reps and sales managers.\nThe Pipeliner CRM experience is so different from traditional CRM, which is why we drive the highest adoption rates, lower total cost of ownership, and rapid return on investment. Plus, with our quick onboarding and ease of learning to use and/or administer the system, there is little to no business disruption during deployment.\nAnd because we are committed to supporting the professional development of salespeople, we have even integrated our online sales magazine Sales POP! into the product to provide unparalleled sales-related content at the point of impact.",
  "methods": [
    {
      "url": "/entities/Accounts/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Accounts.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Account to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Account on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Accounts/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Accounts.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Account to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Accounts/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Accounts.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Account to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Account on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "picture",
          "schema": "object",
          "description": ""
        },
        {
          "name": "account_class",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "account_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "address",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "city",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "comments",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "country",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "customer_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email1",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "email2",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "email3",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "email4",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "email5",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "home_page",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "industry_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_archived",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "parent_account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "parent_account_relation_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "phone1",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "phone2",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "phone3",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "phone4",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "phone5",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "picture_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quick_parent_account_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "state_province",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "zip_code",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "social_media",
          "schema": "object",
          "description": ""
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "is_unsubscribed",
          "schema": "boolean",
          "description": "",
          "example": false
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Accounts",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Accounts.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Accounts are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Accounts",
      "method": "addNewAccount",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Accounts.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Account on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "picture",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "account_class",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "account_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "address",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "city",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "comments",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "country",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "customer_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email1",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "email2",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "email3",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "email4",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "email5",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "home_page",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "industry_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_archived",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "parent_account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "parent_account_relation_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "phone1",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "phone2",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "phone3",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "phone4",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "phone5",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "picture_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quick_parent_account_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "state_province",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "zip_code",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "social_media",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "is_unsubscribed",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Accounts/merge",
      "method": "mergeAccounts",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Accounts.merge",
      "parameters": [
        {
          "name": "master",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "secondary_ids",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Accounts/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Accounts.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Accounts on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Accounts. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Accounts/batch-modify",
      "method": "batchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "Accounts.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Accounts on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Accounts. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountDataExRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountDataExRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountDataExRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountDataExRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountDataExRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AccountDataExRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountKPIs/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountKPIs.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountKPI to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountKPI on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountKPIs/{id}",
      "method": "getKpiById",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountKPIs.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountKPI to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountKPIs/{id}",
      "method": "modifyKpiById",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountKPIs.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountKPI to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountKPI on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "application_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "kpi",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountKPIs",
      "method": "getAllKpis",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountKPIs.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AccountKPIs are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountKPIs",
      "method": "createNewKpi",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountKPIs.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountKPI on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "application_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "kpi",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountKPIs/batch-delete",
      "method": "removeBatchKpIs",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountKPIs.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountKPIs on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountKPIs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountKPIs/batch-modify",
      "method": "modifyBatchAccountKpIs",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountKPIs.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountKPIs on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountKPIs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account1_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "account2_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelations",
      "method": "getAllAccountRelations",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AccountRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelations",
      "method": "createNewRelation",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account1_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "account2_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelations/batch-delete",
      "method": "removeBatchRelations",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelations/batch-modify",
      "method": "modifyBatchRelations",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationLabels/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationLabels.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountRelationLabel to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelationLabel on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationLabels/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationLabels.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountRelationLabel to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationLabels/{id}",
      "method": "modifyLabel",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationLabels.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountRelationLabel to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelationLabel on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_relation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "account_relation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "account_relation_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationLabels",
      "method": "getAllLabels",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationLabels.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AccountRelationLabels are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationLabels",
      "method": "createLabel",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationLabels.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelationLabel on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_relation",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "account_relation_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "account_relation_type_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationLabels/batch-delete",
      "method": "removeBatchLabels",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationLabels.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelationLabels on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountRelationLabels. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationLabels/batch-modify",
      "method": "modifyRelationLabelsBatch",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationLabels.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelationLabels on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountRelationLabels. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountRelationType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelationType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationTypes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountRelationType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationTypes/{id}",
      "method": "modifyRelationType",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountRelationType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelationType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "color",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "label",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationTypes",
      "method": "getAllTypes",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AccountRelationTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationTypes",
      "method": "createNewAccountRelationType",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelationType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "color",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationTypes/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelationTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountRelationTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRelationTypes/batch-modify",
      "method": "modifyBatchAccountRelationTypes",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRelationTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRelationTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountRelationTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRoles/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRoles.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountRole to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRole on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRoles/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRoles.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountRole to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRoles/{id}",
      "method": "modifyRole",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRoles.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountRole to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRole on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "color",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "label",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRoles",
      "method": "getAllRoles",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRoles.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AccountRoles are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRoles",
      "method": "createRole",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRoles.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRole on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "color",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRoles/batch-delete",
      "method": "removeBatchAccountRoles",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRoles.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRoles on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountRoles. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountRoles/batch-modify",
      "method": "modifyBatchRoles",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountRoles.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountRoles on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountRoles. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingClientRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingClientRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountSharingClientRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSharingClientRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingClientRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountSharingClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingClientRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingClientRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountSharingClientRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSharingClientRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingClientRelations",
      "method": "getAllClientRelations",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AccountSharingClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingClientRelations",
      "method": "createNewRelation",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingClientRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSharingClientRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingClientRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingClientRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSharingClientRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingClientRelations/batch-modify",
      "method": "modifyBatchAccountSharingClientRelations",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingClientRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSharingClientRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingSalesUnitRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingSalesUnitRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountSharingSalesUnitRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSharingSalesUnitRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingSalesUnitRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingSalesUnitRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountSharingSalesUnitRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingSalesUnitRelations/{id}",
      "method": "updateRelation",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingSalesUnitRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountSharingSalesUnitRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSharingSalesUnitRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingSalesUnitRelations",
      "method": "listRelations",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingSalesUnitRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AccountSharingSalesUnitRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingSalesUnitRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingSalesUnitRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSharingSalesUnitRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingSalesUnitRelations/batch-delete",
      "method": "removeBatchSalesUnitRelations",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingSalesUnitRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSharingSalesUnitRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSharingSalesUnitRelations/batch-modify",
      "method": "updateBatch",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSharingSalesUnitRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSharingSalesUnitRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSocialRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSocialRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountSocialRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSocialRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSocialRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSocialRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountSocialRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSocialRelations/{id}",
      "method": "modifySocialRelation",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSocialRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountSocialRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSocialRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "angellist_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "crunchbase_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "disqus_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "facebook_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "facebook_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "flickr_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "foursquare_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "google_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "google_plus_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "gravatar_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "klout_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "linkedin_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "linkedin_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "pinterest_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quora_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "reddit_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "skype_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "slideshare_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "twitter_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "twitter_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "vimeo_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "wordpress_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "xing_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "yahoo_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "yelp_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "youtube_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSocialRelations",
      "method": "getAllSocialRelations",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSocialRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AccountSocialRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSocialRelations",
      "method": "createNewSocialRelation",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSocialRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSocialRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "angellist_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "crunchbase_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "disqus_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "facebook_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "facebook_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "flickr_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "foursquare_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "google_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "google_plus_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "gravatar_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "klout_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "linkedin_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "linkedin_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "pinterest_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quora_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "reddit_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "skype_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "slideshare_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "twitter_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "twitter_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "vimeo_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "wordpress_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "xing_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "yahoo_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "yelp_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "youtube_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSocialRelations/batch-delete",
      "method": "removeBatchSocialRelations",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSocialRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSocialRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountSocialRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountSocialRelations/batch-modify",
      "method": "modifyBatchSocialRelations",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountSocialRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountSocialRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountSocialRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountTypes/{id}",
      "method": "getTypeById",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountTypes/{id}",
      "method": "updateAccountType",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AccountType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "form_edit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountTypes",
      "method": "getAllAccountTypes",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AccountTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountTypes",
      "method": "createNewType",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "form_edit",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountTypes/batch-delete",
      "method": "removeBatchAccountTypes",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AccountTypes/batch-modify",
      "method": "modifyBatchAccountTypes",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "AccountTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AccountTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AccountTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Activities/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Activities.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Activity to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Activities",
      "method": "getAllActivities",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Activities.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Activities are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityComments/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityComments.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ActivityComment to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityComment on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityComments/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityComments.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ActivityComment to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityComments/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityComments.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ActivityComment to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityComment on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "activity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "comment",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityComments",
      "method": "getAllActivityComments",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityComments.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ActivityComments are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityComments",
      "method": "createNewActivityComment",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityComments.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityComment on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "activity_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityComments/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityComments.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityComments on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ActivityComments. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityComments/batch-modify",
      "method": "modifyBatchComments",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityComments.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityComments on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ActivityComments. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityDataExRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityDataExRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ActivityDataExRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityDataExRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityDataExRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ActivityDataExRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityKPIs/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityKPIs.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ActivityKPI to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityKPI on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityKPIs/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityKPIs.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ActivityKPI to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityKPIs/{id}",
      "method": "modifyKpiById",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityKPIs.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ActivityKPI to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityKPI on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "activity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "application_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "kpi",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityKPIs",
      "method": "getAllKpis",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityKPIs.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ActivityKPIs are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityKPIs",
      "method": "createNewKpi",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityKPIs.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityKPI on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "activity_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "application_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "kpi",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityKPIs/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityKPIs.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityKPIs on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ActivityKPIs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityKPIs/batch-modify",
      "method": "createOrUpdateBatch",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityKPIs.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityKPIs on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ActivityKPIs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ActivityRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ActivityRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ActivityRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "project_objective",
          "schema": "object",
          "description": ""
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "activity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "custom_entity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_objective_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityRelations",
      "method": "getAllActivityRelations",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ActivityRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityRelations",
      "method": "createNewActivityRelation",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "project_objective",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "activity_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "custom_entity_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_objective_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityRelations/batch-delete",
      "method": "removeBatchActivityRelations",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ActivityRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ActivityRelations/batch-modify",
      "method": "modifyBatchRelations",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "ActivityRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ActivityRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ActivityRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedAccountTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedAccountTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedAccountType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedAccountType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedAccountTypes/{id}",
      "method": "getAllowedAccountTypeById",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedAccountTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedAccountType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedAccountTypes/{id}",
      "method": "modifyAllowedAccountType",
      "httpMethod": "patch",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedAccountTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedAccountType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedAccountType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedAccountTypes",
      "method": "getAllowedAccountTypes",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedAccountTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AllowedAccountTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedAccountTypes",
      "method": "createAllowedAccountType",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedAccountTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedAccountType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_type_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedAccountTypes/batch-delete",
      "method": "removeAllowedAccountTypes",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedAccountTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedAccountTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedAccountTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedAccountTypes/batch-modify",
      "method": "modifyAllowedAccountTypesBatch",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedAccountTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedAccountTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedAccountTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyEmails/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyEmails.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedCompanyEmail to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedCompanyEmail on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyEmails/{id}",
      "method": "getAllowedCompanyEmail",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyEmails.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedCompanyEmail to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyEmails/{id}",
      "method": "updateAllowedCompanyEmail",
      "httpMethod": "patch",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyEmails.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedCompanyEmail to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedCompanyEmail on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "company_email_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyEmails",
      "method": "getAllAllowedCompanyEmails",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyEmails.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AllowedCompanyEmails are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyEmails",
      "method": "createAllowedCompanyEmail",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyEmails.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedCompanyEmail on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "company_email_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyEmails/batch-delete",
      "method": "removeBatchAllowedCompanyEmails",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyEmails.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedCompanyEmails on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedCompanyEmails. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyEmails/batch-modify",
      "method": "modifyAllowedCompanyEmailsBatch",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyEmails.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedCompanyEmails on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedCompanyEmails. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyPhones/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyPhones.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedCompanyPhone to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedCompanyPhone on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyPhones/{id}",
      "method": "getAllowedCompanyPhone",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyPhones.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedCompanyPhone to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyPhones/{id}",
      "method": "updateAllowedCompanyPhone",
      "httpMethod": "patch",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyPhones.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedCompanyPhone to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedCompanyPhone on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "phone_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyPhones",
      "method": "getAllowedPhones",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyPhones.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AllowedCompanyPhones are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyPhones",
      "method": "createAllowedCompanyPhone",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyPhones.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedCompanyPhone on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "phone_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyPhones/batch-delete",
      "method": "removeBatchAllowedCompanyPhones",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyPhones.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedCompanyPhones on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedCompanyPhones. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedCompanyPhones/batch-modify",
      "method": "modifyAllowedCompanyPhonesBatch",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedCompanyPhones.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedCompanyPhones on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedCompanyPhones. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedContactTypes/{id}",
      "method": "removeAllowedContactType",
      "httpMethod": "delete",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedContactTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedContactType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedContactType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedContactTypes/{id}",
      "method": "getAllowedContactType",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedContactTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedContactType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedContactTypes/{id}",
      "method": "updateAllowedContactTypes",
      "httpMethod": "patch",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedContactTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedContactType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedContactType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "contact_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedContactTypes",
      "method": "getAllowedContactTypes",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedContactTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AllowedContactTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedContactTypes",
      "method": "createAllowedContactType",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedContactTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedContactType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "contact_type_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedContactTypes/batch-delete",
      "method": "removeAllowedContactTypes",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedContactTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedContactTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedContactTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedContactTypes/batch-modify",
      "method": "modifyAllowedContactTypesBatch",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedContactTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedContactTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedContactTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedLeadTypes/{id}",
      "method": "removeAllowedLeadType",
      "httpMethod": "delete",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedLeadTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedLeadType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedLeadType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedLeadTypes/{id}",
      "method": "getAllowedLeadType",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedLeadTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedLeadType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedLeadTypes/{id}",
      "method": "modifyAllowedLeadTypes",
      "httpMethod": "patch",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedLeadTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedLeadType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedLeadType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "lead_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedLeadTypes",
      "method": "getAllowedLeadTypes",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedLeadTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AllowedLeadTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedLeadTypes",
      "method": "createAllowedLeadType",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedLeadTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedLeadType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "lead_type_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedLeadTypes/batch-delete",
      "method": "removeAllowedLeadTypes",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedLeadTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedLeadTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedLeadTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedLeadTypes/batch-modify",
      "method": "modifyAllowedLeadTypesBatch",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedLeadTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedLeadTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedLeadTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedPipelines/{id}",
      "method": "removeAllowedPipeline",
      "httpMethod": "delete",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedPipelines.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedPipeline to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedPipeline on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedPipelines/{id}",
      "method": "getAllowedPipeline",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedPipelines.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedPipeline to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedPipelines/{id}",
      "method": "modifyAllowedPipeline",
      "httpMethod": "patch",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedPipelines.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedPipeline to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedPipeline on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "access_step_documents",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "pipeline_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedPipelines",
      "method": "getAllowedPipelines",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedPipelines.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AllowedPipelines are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedPipelines",
      "method": "createAllowedPipeline",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedPipelines.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedPipeline on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "access_step_documents",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "pipeline_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedPipelines/batch-delete",
      "method": "removeBatchAllowedPipelines",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedPipelines.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedPipelines on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedPipelines. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedPipelines/batch-modify",
      "method": "batchModifyAllowedPipelines",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedPipelines.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedPipelines on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedPipelines. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedQuoteTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedQuoteTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedQuoteType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedQuoteType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedQuoteTypes/{id}",
      "method": "getAllowedQuoteType",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedQuoteTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedQuoteType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedQuoteTypes/{id}",
      "method": "updateAllowedQuoteType",
      "httpMethod": "patch",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedQuoteTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AllowedQuoteType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedQuoteType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedQuoteTypes",
      "method": "getAllowedQuoteTypes",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedQuoteTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AllowedQuoteTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedQuoteTypes",
      "method": "createAllowedQuoteType",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedQuoteTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedQuoteType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_type_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedQuoteTypes/batch-delete",
      "method": "removeAllowedQuoteTypes",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedQuoteTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedQuoteTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedQuoteTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AllowedQuoteTypes/batch-modify",
      "method": "modifyAllowedQuoteTypesBatch",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "AllowedQuoteTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AllowedQuoteTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AllowedQuoteTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApiAccesses/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Api",
      "typeScriptTag": "api",
      "description": "ApiAccesses.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ApiAccess to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApiAccesses",
      "method": "accessesList",
      "httpMethod": "get",
      "tag": "Api",
      "typeScriptTag": "api",
      "description": "ApiAccesses.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ApiAccesses are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Appointments/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Appointments.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Appointment to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Appointment on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Appointments/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Appointments.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Appointment to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Appointments/{id}",
      "method": "modifyAppointment",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Appointments.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Appointment to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Appointment on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "activity_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "duration",
          "schema": "number",
          "description": "",
          "example": 4.32
        },
        {
          "name": "end_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "invitees_can_edit",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "is_recurrence_active",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "is_recurrence_exception",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "location",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "meeting_url",
          "schema": "object",
          "description": ""
        },
        {
          "name": "occurence_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "organizer",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "recurrence_master_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "recurrence_rule",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "recurrence_tzid",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "schedule_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "schedule_tzid",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "start_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "subject",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "account_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "lead_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "opportunity_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "project_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "custom_entity_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "invitees_contacts",
          "schema": "array",
          "description": ""
        },
        {
          "name": "invitees_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "exchange_entity_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "gapi_entity_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "o365_entity_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "comments",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Appointments",
      "method": "getAllAppointments",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Appointments.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Appointments are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Appointments",
      "method": "createNewAppointment",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Appointments.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Appointment on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "activity_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "duration",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 4.32
        },
        {
          "name": "end_date",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "invitees_can_edit",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "is_recurrence_active",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "is_recurrence_exception",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "location",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "meeting_url",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "occurence_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "organizer",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "recurrence_master_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "recurrence_rule",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "recurrence_tzid",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "schedule_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "schedule_tzid",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "start_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "subject",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "account_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "lead_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "opportunity_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "project_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "custom_entity_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "invitees_contacts",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "invitees_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "reminder",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "comments",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Appointments/batch-delete",
      "method": "removeAppointments",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Appointments.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Appointments on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Appointments. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Appointments/batch-modify",
      "method": "modifyBatchAppointments",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Appointments.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Appointments on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Appointments. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentClientInviteesRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentClientInviteesRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentClientInviteesRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentClientInviteesRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentClientInviteesRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentClientInviteesRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentClientInviteesRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentClientInviteesRelations/{id}",
      "method": "updateAppointmentClientInviteesRelation",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentClientInviteesRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentClientInviteesRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentClientInviteesRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "appointment_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "response",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentClientInviteesRelations",
      "method": "listAppointmentClientInviteesRelations",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentClientInviteesRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AppointmentClientInviteesRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentClientInviteesRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentClientInviteesRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentClientInviteesRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "appointment_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "response",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentClientInviteesRelations/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentClientInviteesRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentClientInviteesRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AppointmentClientInviteesRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentClientInviteesRelations/batch-modify",
      "method": "batchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentClientInviteesRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentClientInviteesRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AppointmentClientInviteesRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentContactInviteesRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentContactInviteesRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentContactInviteesRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentContactInviteesRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentContactInviteesRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentContactInviteesRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentContactInviteesRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentContactInviteesRelations/{id}",
      "method": "updateRelation",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentContactInviteesRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentContactInviteesRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentContactInviteesRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "appointment_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "first_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "invitee_type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "last_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "response",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentContactInviteesRelations",
      "method": "listAppointmentContactInviteesRelations",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentContactInviteesRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AppointmentContactInviteesRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentContactInviteesRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentContactInviteesRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentContactInviteesRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "appointment_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "first_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "invitee_type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "last_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "response",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentContactInviteesRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentContactInviteesRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentContactInviteesRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AppointmentContactInviteesRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentContactInviteesRelations/batch-modify",
      "method": "batchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentContactInviteesRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentContactInviteesRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AppointmentContactInviteesRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentReminders/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentReminders.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentReminder to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentReminder on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentReminders/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentReminders.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentReminder to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentReminders/{id}",
      "method": "modifyAppointmentReminder",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentReminders.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentReminder to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentReminder on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "appointment_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "end_date_offset",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "snooze_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentReminders",
      "method": "getAllAppointmentReminders",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentReminders.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AppointmentReminders are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentReminders",
      "method": "createAppointmentReminder",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentReminders.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentReminder on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "appointment_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "end_date_offset",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "snooze_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentReminders/batch-delete",
      "method": "removeBatchAppointmentReminders",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentReminders.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentReminders on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AppointmentReminders. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentReminders/batch-modify",
      "method": "modifyBatchReminder",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentReminders.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentReminders on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AppointmentReminders. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentSchedules/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentSchedules.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentSchedule to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentSchedule on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentSchedules/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentSchedules.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentSchedule to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentSchedules/{id}",
      "method": "modifyAppointmentSchedule",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentSchedules.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentSchedule to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentSchedule on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "appointment_description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "appointment_duration",
          "schema": "number",
          "description": "",
          "example": 4.32
        },
        {
          "name": "appointment_location",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "appointment_location_type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "appointment_owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "appointment_subject",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "appointment_subject_uses_schedule_name",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "appointment_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "availability_tzid",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "buffer_time_after",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "buffer_time_before",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "confirmation_page_type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "confirmation_page_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "minimum_notice_time",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "planning_day_offset",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "planning_period_from",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "planning_period_to",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "planning_type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "reminder_email_enabled",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "reminder_email_offset",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "reminder_email_offset_type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "schedule_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "time_increment",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "additional_fields_data",
          "schema": "array",
          "description": ""
        },
        {
          "name": "availability_data",
          "schema": "object",
          "description": ""
        },
        {
          "name": "appointment_invitees_data",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentSchedules",
      "method": "getAllAppointmentSchedules",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentSchedules.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AppointmentSchedules are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentSchedules",
      "method": "createAppointmentSchedule",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentSchedules.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentSchedule on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "appointment_description",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "appointment_duration",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 4.32
        },
        {
          "name": "appointment_location",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "appointment_location_type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "appointment_owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "appointment_subject",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "appointment_subject_uses_schedule_name",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "appointment_type_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "availability_tzid",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "buffer_time_after",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "buffer_time_before",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "confirmation_page_type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "confirmation_page_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "minimum_notice_time",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "planning_day_offset",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "planning_period_from",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "planning_period_to",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "planning_type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "reminder_email_enabled",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "reminder_email_offset",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "reminder_email_offset_type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "schedule_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "time_increment",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "additional_fields_data",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "availability_data",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "appointment_invitees_data",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentSchedules/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentSchedules.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentSchedules on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AppointmentSchedules. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentSchedules/batch-modify",
      "method": "modifyBatchAppointmentSchedules",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentSchedules.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentSchedules on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AppointmentSchedules. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentTypes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentTypes/{id}",
      "method": "modifyAppointmentType",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of AppointmentType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "form_edit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "icon",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentTypes",
      "method": "getAllAppointmentTypes",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted AppointmentTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentTypes",
      "method": "createAppointmentType",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "form_edit",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "icon",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentTypes/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AppointmentTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/AppointmentTypes/batch-modify",
      "method": "modifyAppointmentTypesBatch",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "AppointmentTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of AppointmentTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for AppointmentTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Approvals/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "Approvals.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Approval to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Approval on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Approvals/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "Approvals.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Approval to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Approvals/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "Approvals.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Approval to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Approval on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "actor_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "application_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "approval_process_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "approval_status",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "comment",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "approvers",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Approvals",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "Approvals.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Approvals are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Approvals",
      "method": "generateNew",
      "httpMethod": "post",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "Approvals.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Approval on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "actor_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "application_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "approval_process_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "approval_status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "approvers",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Approvals/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "Approvals.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Approvals on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Approvals. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Approvals/batch-modify",
      "method": "modifyBatchApprovals",
      "httpMethod": "post",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "Approvals.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Approvals on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Approvals. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalApprovers/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalApprovers.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ApprovalApprover to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalApprover on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalApprovers/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalApprovers.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ApprovalApprover to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalApprovers/{id}",
      "method": "modifyApprover",
      "httpMethod": "patch",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalApprovers.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ApprovalApprover to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalApprover on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "approval_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "comment",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalApprovers",
      "method": "getAllApprovers",
      "httpMethod": "get",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalApprovers.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ApprovalApprovers are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalApprovers",
      "method": "createNewApprover",
      "httpMethod": "post",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalApprovers.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalApprover on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "approval_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalApprovers/batch-delete",
      "method": "removeWithIds",
      "httpMethod": "post",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalApprovers.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalApprovers on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ApprovalApprovers. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalApprovers/batch-modify",
      "method": "modifyBatchApprovalApprovers",
      "httpMethod": "post",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalApprovers.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalApprovers on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ApprovalApprovers. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcesses/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcesses.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ApprovalProcess to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalProcess on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcesses/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcesses.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ApprovalProcess to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcesses/{id}",
      "method": "modifyProcessById",
      "httpMethod": "patch",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcesses.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ApprovalProcess to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalProcess on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "last_schema_change",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "last_status_change",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcesses",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcesses.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ApprovalProcesses are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcesses",
      "method": "createNewApproval",
      "httpMethod": "post",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcesses.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalProcess on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "last_schema_change",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "last_status_change",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "settings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcesses/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcesses.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalProcesses on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ApprovalProcesses. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcesses/batch-modify",
      "method": "modifyBatchApprovalProcesses",
      "httpMethod": "post",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcesses.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalProcesses on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ApprovalProcesses. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcessActivityLogLines/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcessActivityLogLines.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ApprovalProcessActivityLogLine to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalProcessActivityLogLine on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcessActivityLogLines/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcessActivityLogLines.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ApprovalProcessActivityLogLine to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcessActivityLogLines/{id}",
      "method": "modifyLogLine",
      "httpMethod": "patch",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcessActivityLogLines.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ApprovalProcessActivityLogLine to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalProcessActivityLogLine on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "approval_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "data",
          "schema": "object",
          "description": ""
        },
        {
          "name": "executed_at",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_visible",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcessActivityLogLines",
      "method": "listApprovalProcessActivityLogLines",
      "httpMethod": "get",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcessActivityLogLines.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ApprovalProcessActivityLogLines are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcessActivityLogLines",
      "method": "createLogLine",
      "httpMethod": "post",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcessActivityLogLines.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalProcessActivityLogLine on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "approval_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "data",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "executed_at",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_visible",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcessActivityLogLines/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcessActivityLogLines.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalProcessActivityLogLines on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ApprovalProcessActivityLogLines. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ApprovalProcessActivityLogLines/batch-modify",
      "method": "updateBatch",
      "httpMethod": "post",
      "tag": "Approval",
      "typeScriptTag": "approval",
      "description": "ApprovalProcessActivityLogLines.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ApprovalProcessActivityLogLines on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ApprovalProcessActivityLogLines. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Calls/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Call",
      "typeScriptTag": "call",
      "description": "Calls.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Call to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Call on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Calls/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Call",
      "typeScriptTag": "call",
      "description": "Calls.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Call to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Calls/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Call",
      "typeScriptTag": "call",
      "description": "Calls.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Call to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Call on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "oppty_product_relation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "caller_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_product_relation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "phone_number",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "product_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "twilio_call_log_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Calls",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Call",
      "typeScriptTag": "call",
      "description": "Calls.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Calls are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Calls",
      "method": "newCall",
      "httpMethod": "post",
      "tag": "Call",
      "typeScriptTag": "call",
      "description": "Calls.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Call on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "oppty_product_relation",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "caller_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_product_relation_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "phone_number",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "product_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "twilio_call_log_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Calls/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Call",
      "typeScriptTag": "call",
      "description": "Calls.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Calls on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Calls. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Calls/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Call",
      "typeScriptTag": "call",
      "description": "Calls.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Calls on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Calls. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Clients/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "Clients.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Client to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Client on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Clients/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "Clients.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Client to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Clients/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "Clients.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Client to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Client on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "default_unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "position",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "unit_membership",
          "schema": "array",
          "description": ""
        },
        {
          "name": "appointment_favorite",
          "schema": "array",
          "description": ""
        },
        {
          "name": "task_favorite",
          "schema": "array",
          "description": ""
        },
        {
          "name": "account_favorite",
          "schema": "array",
          "description": ""
        },
        {
          "name": "contact_favorite",
          "schema": "array",
          "description": ""
        },
        {
          "name": "profile_favorite",
          "schema": "array",
          "description": ""
        },
        {
          "name": "report_favorite",
          "schema": "array",
          "description": ""
        },
        {
          "name": "lead_favorite",
          "schema": "array",
          "description": ""
        },
        {
          "name": "opportunity_favorite",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Clients",
      "method": "getAllDefinedClients",
      "httpMethod": "get",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "Clients.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Clients are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Clients",
      "method": "registerNewClient",
      "httpMethod": "post",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "Clients.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Client on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "default_unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "first_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "last_active",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "last_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "middle_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "phone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "position",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "region",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "timezone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "unit_membership",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "appointment_favorite",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "task_favorite",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "account_favorite",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "contact_favorite",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "profile_favorite",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "report_favorite",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "lead_favorite",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "opportunity_favorite",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Clients/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "Clients.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Clients on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Clients. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Clients/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "Clients.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Clients on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Clients. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientExcludedOppties/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientExcludedOppties.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ClientExcludedOppty to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientExcludedOppty on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientExcludedOppties/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientExcludedOppties.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ClientExcludedOppty to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientExcludedOppties/{id}",
      "method": "modifyExcludedOpptiesById",
      "httpMethod": "patch",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientExcludedOppties.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ClientExcludedOppty to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientExcludedOppty on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "is_excluded",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientExcludedOppties",
      "method": "listExcludedOpportunities",
      "httpMethod": "get",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientExcludedOppties.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ClientExcludedOppties are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientExcludedOppties",
      "method": "createNewOppty",
      "httpMethod": "post",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientExcludedOppties.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientExcludedOppty on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_excluded",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "oppty_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientExcludedOppties/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientExcludedOppties.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientExcludedOppties on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ClientExcludedOppties. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientExcludedOppties/batch-modify",
      "method": "modifyBatchClientExcludedOppties",
      "httpMethod": "post",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientExcludedOppties.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientExcludedOppties on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ClientExcludedOppties. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientFavorites/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientFavorites.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ClientFavorite to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientFavorite on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientFavorites/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientFavorites.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ClientFavorite to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientFavorites/{id}",
      "method": "updateClientFavorite",
      "httpMethod": "patch",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientFavorites.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ClientFavorite to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientFavorite on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "activity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "custom_entity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "profile_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "report_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientFavorites",
      "method": "getAllFavorites",
      "httpMethod": "get",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientFavorites.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ClientFavorites are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientFavorites",
      "method": "createNewFavorite",
      "httpMethod": "post",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientFavorites.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientFavorite on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "activity_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "custom_entity_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "profile_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "report_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientFavorites/batch-delete",
      "method": "removeBatchFavorites",
      "httpMethod": "post",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientFavorites.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientFavorites on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ClientFavorites. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientFavorites/batch-modify",
      "method": "modifyFavoritesBatch",
      "httpMethod": "post",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientFavorites.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientFavorites on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ClientFavorites. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientSettings/{id}",
      "method": "getSettingsById",
      "httpMethod": "get",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientSettings.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ClientSetting to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientSettings",
      "method": "getSettings",
      "httpMethod": "get",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientSettings.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ClientSettings are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientStoryReads/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientStoryReads.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ClientStoryRead to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientStoryRead on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientStoryReads/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientStoryReads.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ClientStoryRead to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientStoryReads/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientStoryReads.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ClientStoryRead to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientStoryRead on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "activity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "message_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "no_follow",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "read_at",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientStoryReads",
      "method": "getAllClientStoryReads",
      "httpMethod": "get",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientStoryReads.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ClientStoryReads are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientStoryReads",
      "method": "createClientStoryRead",
      "httpMethod": "post",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientStoryReads.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientStoryRead on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "activity_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "message_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "no_follow",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "read_at",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientStoryReads/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientStoryReads.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientStoryReads on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ClientStoryReads. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ClientStoryReads/batch-modify",
      "method": "createOrUpdateBatchClientStoryReads",
      "httpMethod": "post",
      "tag": "Client",
      "typeScriptTag": "client",
      "description": "ClientStoryReads.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ClientStoryReads on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ClientStoryReads. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjects/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjects.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObject to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObject on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjects/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjects.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObject to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjects/{id}",
      "method": "modifyCloudObject",
      "httpMethod": "patch",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjects.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObject to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObject on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "application_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "company_cloud_object_folder_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "creator_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "filename",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "is_public",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "params",
          "schema": "object",
          "description": ""
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjects",
      "method": "getAllCloudObjects",
      "httpMethod": "get",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjects.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted CloudObjects are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjects",
      "method": "createCloudObject",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjects.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObject on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "application_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "company_cloud_object_folder_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "creator_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "filename",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_public",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "mime_type",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "params",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": -1
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "content",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "blob"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjects/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjects.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjects on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CloudObjects. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjects/batch-modify",
      "method": "modifyCloudObjectsBatch",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjects.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjects on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CloudObjects. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectFolders/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectFolders.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObjectFolder to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectFolder on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectFolders/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectFolders.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObjectFolder to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectFolders/{id}",
      "method": "modifyCloudObjectFolder",
      "httpMethod": "patch",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectFolders.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObjectFolder to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectFolder on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "entity_api_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "parent_cloud_object_folder_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectFolders",
      "method": "getAllCloudObjectFolders",
      "httpMethod": "get",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectFolders.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted CloudObjectFolders are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectFolders",
      "method": "createFolder",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectFolders.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectFolder on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "entity_api_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "entity_type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "parent_cloud_object_folder_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectFolders/batch-delete",
      "method": "removeWithIds",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectFolders.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectFolders on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CloudObjectFolders. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectFolders/batch-modify",
      "method": "modifyCloudObjectFoldersBatch",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectFolders.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectFolders on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CloudObjectFolders. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObjectRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObjectRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectRelations/{id}",
      "method": "modifyCloudObjectRelations",
      "httpMethod": "patch",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObjectRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "cloud_object",
          "schema": "object",
          "description": ""
        },
        {
          "name": "report_schedule",
          "schema": "object",
          "description": ""
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "activity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "approval_process_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "cloud_object_folder_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "cloud_object_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "custom_entity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_sequence_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_template_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "message_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "process_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "process_template_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "report_schedule_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectRelations",
      "method": "getAllCloudObjectRelations",
      "httpMethod": "get",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted CloudObjectRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "cloud_object",
          "schema": "object",
          "description": ""
        },
        {
          "name": "report_schedule",
          "schema": "object",
          "description": ""
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "activity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "approval_process_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "cloud_object_folder_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "cloud_object_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "custom_entity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_sequence_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_template_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "message_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "process_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "process_template_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "report_schedule_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectRelations/batch-delete",
      "method": "removeWithIds",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CloudObjectRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectRelations/batch-modify",
      "method": "modifyCloudObjectRelationsBatch",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CloudObjectRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectStepRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectStepRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObjectStepRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectStepRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectStepRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectStepRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObjectStepRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectStepRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectStepRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObjectStepRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectStepRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "cloud_object",
          "schema": "object",
          "description": ""
        },
        {
          "name": "cloud_object_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "step_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectStepRelations",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectStepRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted CloudObjectStepRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectStepRelations",
      "method": "createNewCloudObjectStepRelation",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectStepRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectStepRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "cloud_object",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "cloud_object_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "step_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectStepRelations/batch-delete",
      "method": "removeCloudObjectStepRelations",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectStepRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectStepRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CloudObjectStepRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectStepRelations/batch-modify",
      "method": "createOrUpdateBatchCloudObjectStepRelations",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectStepRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectStepRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CloudObjectStepRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectTemplates/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectTemplates.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObjectTemplate to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectTemplate on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectTemplates/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectTemplates.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObjectTemplate to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectTemplates/{id}",
      "method": "modifyCloudObjectTemplate",
      "httpMethod": "patch",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectTemplates.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CloudObjectTemplate to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectTemplate on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "application_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "company_cloud_object_folder_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "creator_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "filename",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "is_public",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "content",
          "schema": "string",
          "description": "",
          "example": "blob"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectTemplates",
      "method": "getAllCloudObjectTemplates",
      "httpMethod": "get",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectTemplates.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted CloudObjectTemplates are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectTemplates",
      "method": "createNewCloudObjectTemplate",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectTemplates.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectTemplate on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "application_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "company_cloud_object_folder_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "creator_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "filename",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_public",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "template_entity_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "Account"
        },
        {
          "name": "type",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": -1
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "content",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "blob"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectTemplates/batch-delete",
      "method": "removeWithIds",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectTemplates.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectTemplates on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CloudObjectTemplates. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CloudObjectTemplates/batch-modify",
      "method": "modifyCloudObjectTemplatesBatch",
      "httpMethod": "post",
      "tag": "Document",
      "typeScriptTag": "document",
      "description": "CloudObjectTemplates.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CloudObjectTemplates on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CloudObjectTemplates. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CompanyEmails/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Company Email",
      "typeScriptTag": "companyEmail",
      "description": "CompanyEmails.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CompanyEmail to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CompanyEmails",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Company Email",
      "typeScriptTag": "companyEmail",
      "description": "CompanyEmails.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted CompanyEmails are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Contacts/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "Contacts.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Contact to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Contact on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Contacts/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "Contacts.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Contact to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Contacts/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "Contacts.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Contact to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Contact on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "created",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "picture",
          "schema": "object",
          "description": ""
        },
        {
          "name": "address",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "city",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "comments",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "contact_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "country",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "email1",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "email2",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "email3",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "email4",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "email5",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "first_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "gender",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "is_archived",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "last_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "middle_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "phone1",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "phone2",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "phone3",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "phone4",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "phone5",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "picture_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "position",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "state_province",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "zip_code",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "social_media",
          "schema": "object",
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "exchange_entity_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "gapi_entity_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "o365_entity_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "primary_account_account_roles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "account_position",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "is_unsubscribed",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "primary_account_relationship",
          "schema": "string",
          "description": "",
          "example": "string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Contacts",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "Contacts.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Contacts are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Contacts",
      "method": "addNew",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "Contacts.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Contact on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "picture",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "address",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "city",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "comments",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "contact_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "country",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "email1",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "email2",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "email3",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "email4",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "email5",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "first_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "gender",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "is_archived",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "last_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "middle_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "phone1",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "phone2",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "phone3",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "phone4",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "phone5",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "picture_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "position",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "state_province",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "zip_code",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "social_media",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "primary_account_account_roles",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "account_position",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_unsubscribed",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "primary_account_relationship",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Contacts/merge",
      "method": "mergeContacts",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "Contacts.merge",
      "parameters": [
        {
          "name": "master",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "secondary_ids",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Contacts/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "Contacts.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Contacts on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Contacts. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Contacts/batch-modify",
      "method": "batchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "Contacts.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Contacts on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Contacts. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountAccountRoleRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountAccountRoleRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactAccountAccountRoleRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactAccountAccountRoleRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountAccountRoleRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountAccountRoleRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactAccountAccountRoleRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountAccountRoleRelations/{id}",
      "method": "updateRelation",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountAccountRoleRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactAccountAccountRoleRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactAccountAccountRoleRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "contact_account_relation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "account_role_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_account_relation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountAccountRoleRelations",
      "method": "listRelations",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountAccountRoleRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ContactAccountAccountRoleRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountAccountRoleRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountAccountRoleRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactAccountAccountRoleRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "contact_account_relation",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "account_role_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_account_relation_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountAccountRoleRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountAccountRoleRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactAccountAccountRoleRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactAccountAccountRoleRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountAccountRoleRelations/batch-modify",
      "method": "updateBatch",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountAccountRoleRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactAccountAccountRoleRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactAccountAccountRoleRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactAccountRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactAccountRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactAccountRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactAccountRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactAccountRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "comment",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_assistant",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "is_sibling",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "position",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "relationship",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "account_roles",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountRelations",
      "method": "getAllContactAccountRelations",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ContactAccountRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactAccountRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_assistant",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "is_sibling",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "position",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "relationship",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "account_roles",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountRelations/batch-delete",
      "method": "removeBatchRelations",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactAccountRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactAccountRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactAccountRelations/batch-modify",
      "method": "modifyBatchRelations",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactAccountRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactAccountRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactAccountRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactDataExRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactDataExRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactDataExRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactDataExRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactDataExRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ContactDataExRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactKPIs/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactKPIs.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactKPI to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactKPI on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactKPIs/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactKPIs.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactKPI to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactKPIs/{id}",
      "method": "modifyKpiById",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactKPIs.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactKPI to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactKPI on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "application_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "kpi",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactKPIs",
      "method": "getAllKpis",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactKPIs.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ContactKPIs are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactKPIs",
      "method": "createNewKpi",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactKPIs.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactKPI on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "application_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "kpi",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactKPIs/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactKPIs.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactKPIs on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactKPIs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactKPIs/batch-modify",
      "method": "createOrUpdateBatch",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactKPIs.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactKPIs on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactKPIs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelations/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "contact1_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact2_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelations",
      "method": "getAllDefinedContactRelations",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ContactRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelations",
      "method": "createNewContactRelation",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "contact1_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact2_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelations/batch-modify",
      "method": "modifyBatchRelations",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationLabels/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationLabels.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactRelationLabel to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelationLabel on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationLabels/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationLabels.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactRelationLabel to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationLabels/{id}",
      "method": "modifyLabel",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationLabels.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactRelationLabel to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelationLabel on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "contact_relation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "contact_relation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_relation_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationLabels",
      "method": "getAllLabels",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationLabels.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ContactRelationLabels are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationLabels",
      "method": "createLabel",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationLabels.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelationLabel on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "contact_relation",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "contact_relation_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_relation_type_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationLabels/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationLabels.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelationLabels on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactRelationLabels. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationLabels/batch-modify",
      "method": "modifyBatchLabels",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationLabels.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelationLabels on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactRelationLabels. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactRelationType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelationType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationTypes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactRelationType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationTypes/{id}",
      "method": "modifyByIds",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactRelationType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelationType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "color",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "label",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationTypes",
      "method": "getAllContactRelationTypes",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ContactRelationTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationTypes",
      "method": "createNew",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelationType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "color",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationTypes/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelationTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactRelationTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactRelationTypes/batch-modify",
      "method": "modifyBatchContactRelationTypes",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactRelationTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactRelationTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactRelationTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingClientRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingClientRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactSharingClientRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSharingClientRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingClientRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactSharingClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingClientRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingClientRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactSharingClientRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSharingClientRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingClientRelations",
      "method": "getAllClientRelations",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ContactSharingClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingClientRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingClientRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSharingClientRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingClientRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingClientRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSharingClientRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingClientRelations/batch-modify",
      "method": "modifyBatchContactRelations",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingClientRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSharingClientRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingSalesUnitRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingSalesUnitRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactSharingSalesUnitRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSharingSalesUnitRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingSalesUnitRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingSalesUnitRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactSharingSalesUnitRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingSalesUnitRelations/{id}",
      "method": "updateById",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingSalesUnitRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactSharingSalesUnitRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSharingSalesUnitRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingSalesUnitRelations",
      "method": "listRelations",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingSalesUnitRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ContactSharingSalesUnitRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingSalesUnitRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingSalesUnitRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSharingSalesUnitRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingSalesUnitRelations/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingSalesUnitRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSharingSalesUnitRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSharingSalesUnitRelations/batch-modify",
      "method": "updateBatch",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSharingSalesUnitRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSharingSalesUnitRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSocialRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSocialRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactSocialRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSocialRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSocialRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSocialRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactSocialRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSocialRelations/{id}",
      "method": "modifySocialRelation",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSocialRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactSocialRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSocialRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "angellist_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "crunchbase_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "disqus_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "facebook_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "facebook_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "flickr_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "foursquare_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "google_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "google_plus_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "gravatar_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "klout_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "linkedin_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "linkedin_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "pinterest_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quora_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "reddit_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "skype_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "slideshare_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "twitter_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "twitter_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "vimeo_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "wordpress_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "xing_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "yahoo_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "yelp_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "youtube_url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSocialRelations",
      "method": "getAllSocialRelations",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSocialRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ContactSocialRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSocialRelations",
      "method": "createNewSocialRelation",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSocialRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSocialRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "angellist_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "crunchbase_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "disqus_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "facebook_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "facebook_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "flickr_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "foursquare_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "google_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "google_plus_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "gravatar_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "klout_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "linkedin_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "linkedin_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "pinterest_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quora_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "reddit_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "skype_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "slideshare_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "twitter_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "twitter_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "vimeo_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "wordpress_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "xing_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "yahoo_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "yelp_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "youtube_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSocialRelations/batch-delete",
      "method": "removeBatchSocialRelations",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSocialRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSocialRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactSocialRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactSocialRelations/batch-modify",
      "method": "modifyBatchSocialRelations",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactSocialRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactSocialRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactSocialRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactTypes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactTypes/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ContactType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "form_edit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactTypes",
      "method": "getAllTypes",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ContactTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactTypes",
      "method": "createNewType",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "form_edit",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactTypes/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ContactTypes/batch-modify",
      "method": "modifyBatchContactTypes",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "ContactTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ContactTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ContactTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Currencies/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "Currencies.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Currency to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Currency on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Currencies/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "Currencies.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Currency to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Currencies/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "Currencies.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Currency to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Currency on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "currency_exchange_rates",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Currencies",
      "method": "getAllCurrencies",
      "httpMethod": "get",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "Currencies.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Currencies are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Currencies",
      "method": "createNewCurrency",
      "httpMethod": "post",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "Currencies.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Currency on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "code",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "symbol",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "currency_exchange_rates",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Currencies/batch-delete",
      "method": "removeById",
      "httpMethod": "post",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "Currencies.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Currencies on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Currencies. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Currencies/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "Currencies.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Currencies on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Currencies. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRates/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRates.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CurrencyExchangeRate to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CurrencyExchangeRate on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRates/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRates.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CurrencyExchangeRate to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRates/{id}",
      "method": "modifyExchangeRate",
      "httpMethod": "patch",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRates.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CurrencyExchangeRate to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CurrencyExchangeRate on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "currency_exchange_rate_list_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "currency_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "exchange_rate",
          "schema": "number",
          "description": "",
          "example": 4.32
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRates",
      "method": "getAllRates",
      "httpMethod": "get",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRates.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted CurrencyExchangeRates are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRates",
      "method": "createExchangeRate",
      "httpMethod": "post",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRates.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CurrencyExchangeRate on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "currency_exchange_rate_list_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "currency_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "exchange_rate",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 4.32
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRates/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRates.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CurrencyExchangeRates on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CurrencyExchangeRates. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRates/batch-modify",
      "method": "exchangeRatesBatchModify",
      "httpMethod": "post",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRates.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CurrencyExchangeRates on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CurrencyExchangeRates. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRatesLists/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRatesLists.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CurrencyExchangeRatesList to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CurrencyExchangeRatesList on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRatesLists/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRatesLists.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CurrencyExchangeRatesList to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRatesLists/{id}",
      "method": "updateExchangeRatesList",
      "httpMethod": "patch",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRatesLists.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CurrencyExchangeRatesList to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CurrencyExchangeRatesList on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "valid_from",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "currency_exchange_rates",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRatesLists",
      "method": "getAllLists",
      "httpMethod": "get",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRatesLists.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted CurrencyExchangeRatesLists are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRatesLists",
      "method": "createExchangeRatesList",
      "httpMethod": "post",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRatesLists.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CurrencyExchangeRatesList on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "valid_from",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "currency_exchange_rates",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRatesLists/batch-delete",
      "method": "removeList",
      "httpMethod": "post",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRatesLists.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CurrencyExchangeRatesLists on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CurrencyExchangeRatesLists. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/CurrencyExchangeRatesLists/batch-modify",
      "method": "exchangeRatesBatchModify",
      "httpMethod": "post",
      "tag": "Currency",
      "typeScriptTag": "currency",
      "description": "CurrencyExchangeRatesLists.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CurrencyExchangeRatesLists on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for CurrencyExchangeRatesLists. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_api_name}/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntities.delete",
      "parameters": [
        {
          "name": "customEntityApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity api name",
          "example": "CUSTOM_ENTITY_API_NAME"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CustomEntity to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CustomEntity on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_api_name}/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntities.get",
      "parameters": [
        {
          "name": "customEntityApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity api name",
          "example": "CUSTOM_ENTITY_API_NAME"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CustomEntity to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_api_name}/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntities.update",
      "parameters": [
        {
          "name": "customEntityApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity api name",
          "example": "CUSTOM_ENTITY_API_NAME"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CustomEntity to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CustomEntity on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_api_name}",
      "method": "getAllEntities",
      "httpMethod": "get",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntities.list",
      "parameters": [
        {
          "name": "customEntityApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity api name",
          "example": "CUSTOM_ENTITY_API_NAME"
        },
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted {custom_entity_api_name} are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_api_name}",
      "method": "createNewCustomEntity",
      "httpMethod": "post",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntities.create",
      "parameters": [
        {
          "name": "customEntityApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity api name",
          "example": "CUSTOM_ENTITY_API_NAME"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CustomEntity on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_api_name}/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntities.batch_delete",
      "parameters": [
        {
          "name": "customEntityApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity api name",
          "example": "CUSTOM_ENTITY_API_NAME"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of {custom_entity_api_name} on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for {custom_entity_api_name}. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_api_name}/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntities.batch_create_or_update",
      "parameters": [
        {
          "name": "customEntityApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity api name",
          "example": "CUSTOM_ENTITY_API_NAME"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of {custom_entity_api_name} on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for {custom_entity_api_name}. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_type_api_name}/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntityTypes.delete",
      "parameters": [
        {
          "name": "customEntityTypeApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity type api name",
          "example": "CUSTOM_ENTITY_TYPE_API_NAME"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CustomEntityType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CustomEntityType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_type_api_name}/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntityTypes.get",
      "parameters": [
        {
          "name": "customEntityTypeApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity type api name",
          "example": "CUSTOM_ENTITY_TYPE_API_NAME"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CustomEntityType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_type_api_name}/{id}",
      "method": "updateById",
      "httpMethod": "patch",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntityTypes.update",
      "parameters": [
        {
          "name": "customEntityTypeApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity type api name",
          "example": "CUSTOM_ENTITY_TYPE_API_NAME"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of CustomEntityType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CustomEntityType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "form_edit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_type_api_name}",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntityTypes.list",
      "parameters": [
        {
          "name": "customEntityTypeApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity type api name",
          "example": "CUSTOM_ENTITY_TYPE_API_NAME"
        },
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted {custom_entity_type_api_name} are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_type_api_name}",
      "method": "createNew",
      "httpMethod": "post",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntityTypes.create",
      "parameters": [
        {
          "name": "customEntityTypeApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity type api name",
          "example": "CUSTOM_ENTITY_TYPE_API_NAME"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of CustomEntityType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "form_edit",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_type_api_name}/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntityTypes.batch_delete",
      "parameters": [
        {
          "name": "customEntityTypeApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity type api name",
          "example": "CUSTOM_ENTITY_TYPE_API_NAME"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of {custom_entity_type_api_name} on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for {custom_entity_type_api_name}. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/{custom_entity_type_api_name}/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "CustomEntityTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "customEntityTypeApiName",
          "schema": "string",
          "required": true,
          "description": "Custom entity type api name",
          "example": "CUSTOM_ENTITY_TYPE_API_NAME"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of {custom_entity_type_api_name} on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for {custom_entity_type_api_name}. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Data/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "Data.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Data to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Data on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Data/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "Data.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Data to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Data/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "Data.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Data to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Data on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "calc_value",
          "schema": "number",
          "description": "",
          "example": 4.32
        },
        {
          "name": "option_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "option_name_translations",
          "schema": "string",
          "description": "",
          "example": "blob"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Data",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "Data.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Data are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Data",
      "method": "addNew",
      "httpMethod": "post",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "Data.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Data on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "calc_value",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 4.32
        },
        {
          "name": "data_set_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "option_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "option_name_translations",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "blob"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Data/batch-delete",
      "method": "removeByIdBatch",
      "httpMethod": "post",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "Data.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Data on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Data. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Data/batch-modify",
      "method": "modifyBatch",
      "httpMethod": "post",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "Data.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Data on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Data. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/DataRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "DataRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of DataRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of DataRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/DataRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "DataRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of DataRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/DataRelations/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "DataRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of DataRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of DataRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "data_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "parent_data_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/DataRelations",
      "method": "getAllDataRelations",
      "httpMethod": "get",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "DataRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted DataRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/DataRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "DataRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of DataRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "data_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "parent_data_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/DataRelations/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "DataRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of DataRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for DataRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/DataRelations/batch-modify",
      "method": "modifyBatch",
      "httpMethod": "post",
      "tag": "Data",
      "typeScriptTag": "data",
      "description": "DataRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of DataRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for DataRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Emails/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "Emails.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Email to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Email on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Emails/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "Emails.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Email to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Emails/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "Emails.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Email to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Email on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "additional_headers",
          "schema": "object",
          "description": ""
        },
        {
          "name": "body",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "body_summary",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "cc",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "company_email_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "content_share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "content_type",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "date_sent",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "direction",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "error_code",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "is_tracked",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "original_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "parent_email_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sender",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "sender_account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sender_client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sender_contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "subject",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "template_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "thread_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "to",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "uid",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "content_sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "content_sharing_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "project_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "custom_entity_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "lead_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "opportunity_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Emails",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "Emails.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Emails are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Emails",
      "method": "createNew",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "Emails.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Email on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "additional_headers",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "body",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "body_summary",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "cc",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "company_email_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "content_share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "content_type",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "date_sent",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "direction",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "error_code",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "is_tracked",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "original_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "parent_email_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sender",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "sender_account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sender_client_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sender_contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "subject",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "template_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "thread_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "uid",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "content_sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "content_sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "project_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "custom_entity_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "lead_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "opportunity_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Emails/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "Emails.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Emails on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Emails. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Emails/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "Emails.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Emails on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Emails. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingClientRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingClientRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailContentSharingClientRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailContentSharingClientRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingClientRelations/{id}",
      "method": "getContentSharingClientRelation",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailContentSharingClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingClientRelations/{id}",
      "method": "updateContentSharingClientRelation",
      "httpMethod": "patch",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingClientRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailContentSharingClientRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailContentSharingClientRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingClientRelations",
      "method": "listRelations",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EmailContentSharingClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingClientRelations",
      "method": "createNewEmailContentSharingClientRelation",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingClientRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailContentSharingClientRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingClientRelations/batch-delete",
      "method": "removeBatchContentRelations",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingClientRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailContentSharingClientRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailContentSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingClientRelations/batch-modify",
      "method": "batchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingClientRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailContentSharingClientRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailContentSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingSalesUnitRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingSalesUnitRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailContentSharingSalesUnitRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailContentSharingSalesUnitRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingSalesUnitRelations/{id}",
      "method": "getContentSharingSalesUnitRelations",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingSalesUnitRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailContentSharingSalesUnitRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingSalesUnitRelations/{id}",
      "method": "modifyContentSharingSalesUnitRelation",
      "httpMethod": "patch",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingSalesUnitRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailContentSharingSalesUnitRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailContentSharingSalesUnitRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "email_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingSalesUnitRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingSalesUnitRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EmailContentSharingSalesUnitRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingSalesUnitRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingSalesUnitRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailContentSharingSalesUnitRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "email_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingSalesUnitRelations/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingSalesUnitRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailContentSharingSalesUnitRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailContentSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailContentSharingSalesUnitRelations/batch-modify",
      "method": "modifyBatchEmailContentSharingSalesUnitRelations",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailContentSharingSalesUnitRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailContentSharingSalesUnitRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailContentSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailEvents/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailEvents.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailEvent to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailEvent on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailEvents/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailEvents.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailEvent to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailEvents/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailEvents.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailEvent to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailEvent on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "email_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "url",
          "schema": "string",
          "description": "",
          "example": "string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailEvents",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailEvents.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EmailEvents are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailEvents",
      "method": "createNewEmailEvent",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailEvents.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailEvent on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "email_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailEvents/batch-delete",
      "method": "removeBatchEvents",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailEvents.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailEvents on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailEvents. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailEvents/batch-modify",
      "method": "modifyBatchEvents",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailEvents.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailEvents on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailEvents. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequences/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequences.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailSequence to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequence on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequences/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequences.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailSequence to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequences/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequences.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailSequence to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequence on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequences",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequences.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EmailSequences are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequences",
      "method": "createNewSequence",
      "httpMethod": "post",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequences.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequence on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "settings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequences/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequences.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequences on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailSequences. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequences/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequences.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequences on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailSequences. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogs/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogs.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailSequenceActivityLog to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceActivityLog on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogs/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogs.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailSequenceActivityLog to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogs/{id}",
      "method": "modifyLogById",
      "httpMethod": "patch",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogs.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailSequenceActivityLog to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceActivityLog on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "actor_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "application_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_sequence_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "end_time",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_test_run",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "start_time",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogs",
      "method": "getAllLogs",
      "httpMethod": "get",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogs.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EmailSequenceActivityLogs are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogs",
      "method": "createActivityLog",
      "httpMethod": "post",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogs.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceActivityLog on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "actor_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "application_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_sequence_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "end_time",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_test_run",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "start_time",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "status",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogs/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogs.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceActivityLogs on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailSequenceActivityLogs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogs/batch-modify",
      "method": "modifyBatchLogs",
      "httpMethod": "post",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogs.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceActivityLogs on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailSequenceActivityLogs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogLines/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogLines.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailSequenceActivityLogLine to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceActivityLogLine on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogLines/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogLines.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailSequenceActivityLogLine to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogLines/{id}",
      "method": "modifyLogLine",
      "httpMethod": "patch",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogLines.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailSequenceActivityLogLine to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceActivityLogLine on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "email_sequence_activity_log_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_visible",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogLines",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogLines.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EmailSequenceActivityLogLines are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogLines",
      "method": "addNewLogLine",
      "httpMethod": "post",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogLines.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceActivityLogLine on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "email_sequence_activity_log_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_visible",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogLines/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogLines.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceActivityLogLines on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailSequenceActivityLogLines. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceActivityLogLines/batch-modify",
      "method": "processBatchModify",
      "httpMethod": "post",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceActivityLogLines.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceActivityLogLines on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailSequenceActivityLogLines. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceEnrolleds/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceEnrolleds.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailSequenceEnrolled to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceEnrolled on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceEnrolleds/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceEnrolleds.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailSequenceEnrolled to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceEnrolleds/{id}",
      "method": "modifyEnrolled",
      "httpMethod": "patch",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceEnrolleds.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailSequenceEnrolled to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceEnrolled on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "actor_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "application_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_sequence_activity_log_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_sequence_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "end_reason",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "end_time",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "excluded_from_stats",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "lead_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "start_time",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceEnrolleds",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceEnrolleds.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EmailSequenceEnrolleds are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceEnrolleds",
      "method": "enrollNew",
      "httpMethod": "post",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceEnrolleds.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceEnrolled on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "actor_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "application_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_sequence_activity_log_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_sequence_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "end_reason",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "end_time",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "excluded_from_stats",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "lead_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "start_time",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2019-01-01T00:00:00"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceEnrolleds/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceEnrolleds.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceEnrolleds on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailSequenceEnrolleds. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailSequenceEnrolleds/batch-modify",
      "method": "batchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Email Sequence",
      "typeScriptTag": "emailSequence",
      "description": "EmailSequenceEnrolleds.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailSequenceEnrolleds on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailSequenceEnrolleds. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplates/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplates.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailTemplate to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplate on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplates/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplates.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailTemplate to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplates/{id}",
      "method": "modifyTemplate",
      "httpMethod": "patch",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplates.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailTemplate to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplate on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "body",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "email_template_folder_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "subject",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplates",
      "method": "getAllTemplates",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplates.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EmailTemplates are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplates",
      "method": "createNewEmailTemplate",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplates.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplate on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "body",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "email_template_folder_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "subject",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "type",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplates/batch-delete",
      "method": "removeBatchEmailTemplates",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplates.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplates on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailTemplates. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplates/batch-modify",
      "method": "modifyBatchTemplates",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplates.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplates on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailTemplates. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateFolders/{id}",
      "method": "removeTemplateFolder",
      "httpMethod": "delete",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateFolders.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailTemplateFolder to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateFolder on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateFolders/{id}",
      "method": "getTemplateFolder",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateFolders.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailTemplateFolder to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateFolders/{id}",
      "method": "modifyByIds",
      "httpMethod": "patch",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateFolders.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailTemplateFolder to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateFolder on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "parent_email_template_folder_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateFolders",
      "method": "getAllFolders",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateFolders.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EmailTemplateFolders are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateFolders",
      "method": "createFolder",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateFolders.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateFolder on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "parent_email_template_folder_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateFolders/batch-delete",
      "method": "removeBatchEmailTemplateFolders",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateFolders.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateFolders on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailTemplateFolders. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateFolders/batch-modify",
      "method": "modifyBatchTemplateFolders",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateFolders.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateFolders on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailTemplateFolders. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingClientRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingClientRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailTemplateSharingClientRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateSharingClientRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingClientRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailTemplateSharingClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingClientRelations/{id}",
      "method": "updateRelation",
      "httpMethod": "patch",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingClientRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailTemplateSharingClientRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateSharingClientRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_template_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingClientRelations",
      "method": "listEmailTemplateSharingClientRelations",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EmailTemplateSharingClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingClientRelations",
      "method": "createNewEmailTemplateSharingClientRelation",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingClientRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateSharingClientRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_template_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingClientRelations/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingClientRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateSharingClientRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailTemplateSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingClientRelations/batch-modify",
      "method": "templateBatchModify",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingClientRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateSharingClientRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailTemplateSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingSalesUnitRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingSalesUnitRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailTemplateSharingSalesUnitRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateSharingSalesUnitRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingSalesUnitRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingSalesUnitRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailTemplateSharingSalesUnitRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingSalesUnitRelations/{id}",
      "method": "modifySalesUnitRelations",
      "httpMethod": "patch",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingSalesUnitRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EmailTemplateSharingSalesUnitRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateSharingSalesUnitRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "email_template_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingSalesUnitRelations",
      "method": "getAllDefinedSalesUnitRelations",
      "httpMethod": "get",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingSalesUnitRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EmailTemplateSharingSalesUnitRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingSalesUnitRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingSalesUnitRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateSharingSalesUnitRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "email_template_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingSalesUnitRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingSalesUnitRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateSharingSalesUnitRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailTemplateSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EmailTemplateSharingSalesUnitRelations/batch-modify",
      "method": "modifyBatchEmailTemplateSharingSalesUnitRelations",
      "httpMethod": "post",
      "tag": "Email",
      "typeScriptTag": "email",
      "description": "EmailTemplateSharingSalesUnitRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EmailTemplateSharingSalesUnitRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EmailTemplateSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Entities/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "Entities.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Entity to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Entities",
      "method": "getAllEntities",
      "httpMethod": "get",
      "tag": "Custom Entity",
      "typeScriptTag": "customEntity",
      "description": "Entities.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Entities are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnesses/{id}",
      "method": "removeFitness",
      "httpMethod": "delete",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnesses.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EntityFitness to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityFitness on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnesses/{id}",
      "method": "getFitness",
      "httpMethod": "get",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnesses.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EntityFitness to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnesses/{id}",
      "method": "modifyFitness",
      "httpMethod": "patch",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnesses.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EntityFitness to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityFitness on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "indicator_relations",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnesses",
      "method": "getAllEntityFitnesses",
      "httpMethod": "get",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnesses.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EntityFitnesses are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnesses",
      "method": "createFitness",
      "httpMethod": "post",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnesses.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityFitness on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "indicator_relations",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnesses/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnesses.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityFitnesses on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EntityFitnesses. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnesses/batch-modify",
      "method": "batchModifyEntityFitnesses",
      "httpMethod": "post",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnesses.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityFitnesses on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EntityFitnesses. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnessIndicators/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnessIndicators.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EntityFitnessIndicator to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityFitnessIndicator on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnessIndicators/{id}",
      "method": "getFitnessIndicator",
      "httpMethod": "get",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnessIndicators.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EntityFitnessIndicator to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnessIndicators/{id}",
      "method": "updateFitnessIndicatorsById",
      "httpMethod": "patch",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnessIndicators.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EntityFitnessIndicator to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityFitnessIndicator on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "description_use_lang",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "entity_fitness_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "how_to_fix",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "how_to_fix_use_lang",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "name_use_lang",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "settings",
          "schema": "string",
          "description": "",
          "example": "blob"
        },
        {
          "name": "type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnessIndicators",
      "method": "listEntityFitnessIndicators",
      "httpMethod": "get",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnessIndicators.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EntityFitnessIndicators are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnessIndicators",
      "method": "createNewEntityFitnessIndicator",
      "httpMethod": "post",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnessIndicators.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityFitnessIndicator on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "description_use_lang",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "entity_fitness_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "how_to_fix",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "how_to_fix_use_lang",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "name_use_lang",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "settings",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "blob"
        },
        {
          "name": "type",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnessIndicators/batch-delete",
      "method": "batchDeleteEntityFitnessIndicators",
      "httpMethod": "post",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnessIndicators.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityFitnessIndicators on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EntityFitnessIndicators. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityFitnessIndicators/batch-modify",
      "method": "modifyEntityFitnessIndicatorsBatch",
      "httpMethod": "post",
      "tag": "Opportunity",
      "typeScriptTag": "opportunity",
      "description": "EntityFitnessIndicators.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityFitnessIndicators on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EntityFitnessIndicators. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityHealths/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "EntityHealths.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EntityHealth to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityHealth on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityHealths/{id}",
      "method": "getEntityHealth",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "EntityHealths.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EntityHealth to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityHealths/{id}",
      "method": "modifyHealth",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "EntityHealths.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EntityHealth to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityHealth on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "last_recalculation",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "settings",
          "schema": "string",
          "description": "",
          "example": "blob"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityHealths",
      "method": "getAllEntityHealths",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "EntityHealths.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EntityHealths are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityHealths",
      "method": "createEntityHealth",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "EntityHealths.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityHealth on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "last_recalculation",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityHealths/batch-delete",
      "method": "removeBatchEntityHealths",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "EntityHealths.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityHealths on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EntityHealths. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityHealths/batch-modify",
      "method": "modifyEntityHealthsBatch",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "EntityHealths.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityHealths on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EntityHealths. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityScorings/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead",
      "typeScriptTag": "lead",
      "description": "EntityScorings.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EntityScoring to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityScoring on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityScorings/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Lead",
      "typeScriptTag": "lead",
      "description": "EntityScorings.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EntityScoring to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityScorings/{id}",
      "method": "modifyScoring",
      "httpMethod": "patch",
      "tag": "Lead",
      "typeScriptTag": "lead",
      "description": "EntityScorings.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of EntityScoring to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityScoring on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "use_lang",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityScorings",
      "method": "getAllEntityScorings",
      "httpMethod": "get",
      "tag": "Lead",
      "typeScriptTag": "lead",
      "description": "EntityScorings.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted EntityScorings are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityScorings",
      "method": "createEntityScoring",
      "httpMethod": "post",
      "tag": "Lead",
      "typeScriptTag": "lead",
      "description": "EntityScorings.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityScoring on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "entity_type",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "settings",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "use_lang",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityScorings/batch-delete",
      "method": "removeBatchEntityScorings",
      "httpMethod": "post",
      "tag": "Lead",
      "typeScriptTag": "lead",
      "description": "EntityScorings.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityScorings on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EntityScorings. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/EntityScorings/batch-modify",
      "method": "createOrUpdateBatchEntityScorings",
      "httpMethod": "post",
      "tag": "Lead",
      "typeScriptTag": "lead",
      "description": "EntityScorings.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of EntityScorings on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for EntityScorings. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Fields/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "Fields.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Field to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Field on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Fields/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "Fields.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Field to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Fields/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "Fields.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Field to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Field on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "calc_formula",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "default_value",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "name_translations",
          "schema": "string",
          "description": "",
          "example": "blob"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Fields",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "Fields.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Fields are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Fields",
      "method": "addNewField",
      "httpMethod": "post",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "Fields.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Field on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "entity_name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "type_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "data_set_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "calc_formula",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "default_value",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_unique",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "name_translations",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "blob"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FieldPermissions/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "FieldPermissions.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FieldPermission to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FieldPermission on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FieldPermissions/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "FieldPermissions.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FieldPermission to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FieldPermissions/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "FieldPermissions.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FieldPermission to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FieldPermission on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "permission_level",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FieldPermissions",
      "method": "getAllPermissions",
      "httpMethod": "get",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "FieldPermissions.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted FieldPermissions are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FieldPermissions",
      "method": "createFieldPermission",
      "httpMethod": "post",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "FieldPermissions.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FieldPermission on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "field_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "master_right_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "permission_level",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FieldPermissions/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "FieldPermissions.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FieldPermissions on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for FieldPermissions. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FieldPermissions/batch-modify",
      "method": "modifyBatchPermissions",
      "httpMethod": "post",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "FieldPermissions.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FieldPermissions on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for FieldPermissions. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FieldSequences/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "FieldSequences.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FieldSequence to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FieldSequences",
      "method": "getAllFieldSequences",
      "httpMethod": "get",
      "tag": "Field",
      "typeScriptTag": "field",
      "description": "FieldSequences.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted FieldSequences are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Forecasts/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Forecast",
      "typeScriptTag": "forecast",
      "description": "Forecasts.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Forecast to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Forecast on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Forecasts/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Forecast",
      "typeScriptTag": "forecast",
      "description": "Forecasts.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Forecast to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Forecasts/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Forecast",
      "typeScriptTag": "forecast",
      "description": "Forecasts.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Forecast to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Forecast on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "share_mode_params",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "shared_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "shared_units",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Forecasts",
      "method": "getAllForecasts",
      "httpMethod": "get",
      "tag": "Forecast",
      "typeScriptTag": "forecast",
      "description": "Forecasts.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Forecasts are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Forecasts",
      "method": "generateNewForecast",
      "httpMethod": "post",
      "tag": "Forecast",
      "typeScriptTag": "forecast",
      "description": "Forecasts.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Forecast on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "settings",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "share_mode_params",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "shared_clients",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "shared_units",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Forecasts/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Forecast",
      "typeScriptTag": "forecast",
      "description": "Forecasts.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Forecasts on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Forecasts. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Forecasts/batch-modify",
      "method": "modifyBatchForecast",
      "httpMethod": "post",
      "tag": "Forecast",
      "typeScriptTag": "forecast",
      "description": "Forecasts.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Forecasts on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Forecasts. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViews/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViews.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FormView to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormView on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViews/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViews.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FormView to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViews/{id}",
      "method": "modifyView",
      "httpMethod": "patch",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViews.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FormView to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormView on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "hidden_item_ids",
          "schema": "object",
          "description": ""
        },
        {
          "name": "item_colors",
          "schema": "object",
          "description": ""
        },
        {
          "name": "lead_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "oppty_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "use_lang",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViews",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViews.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted FormViews are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViews",
      "method": "createView",
      "httpMethod": "post",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViews.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormView on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "hidden_item_ids",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "item_colors",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "lead_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "oppty_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "use_lang",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViews/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViews.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormViews on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for FormViews. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViews/batch-modify",
      "method": "modifyBatchFormViews",
      "httpMethod": "post",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViews.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormViews on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for FormViews. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingClientRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingClientRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FormViewSharingClientRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormViewSharingClientRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingClientRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FormViewSharingClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingClientRelations/{id}",
      "method": "updateFormViewSharingClientRelation",
      "httpMethod": "patch",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingClientRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FormViewSharingClientRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormViewSharingClientRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "form_view_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingClientRelations",
      "method": "getAllFormViewSharingClientRelations",
      "httpMethod": "get",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted FormViewSharingClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingClientRelations",
      "method": "createClientRelation",
      "httpMethod": "post",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingClientRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormViewSharingClientRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "form_view_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingClientRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingClientRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormViewSharingClientRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for FormViewSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingClientRelations/batch-modify",
      "method": "batchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingClientRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormViewSharingClientRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for FormViewSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingSalesUnitRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingSalesUnitRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FormViewSharingSalesUnitRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormViewSharingSalesUnitRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingSalesUnitRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingSalesUnitRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FormViewSharingSalesUnitRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingSalesUnitRelations/{id}",
      "method": "modifySalesUnitRelation",
      "httpMethod": "patch",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingSalesUnitRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of FormViewSharingSalesUnitRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormViewSharingSalesUnitRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "form_view_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingSalesUnitRelations",
      "method": "getAllSharingSalesUnitRelations",
      "httpMethod": "get",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingSalesUnitRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted FormViewSharingSalesUnitRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingSalesUnitRelations",
      "method": "createNewRelation",
      "httpMethod": "post",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingSalesUnitRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormViewSharingSalesUnitRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "form_view_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingSalesUnitRelations/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingSalesUnitRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormViewSharingSalesUnitRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for FormViewSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/FormViewSharingSalesUnitRelations/batch-modify",
      "method": "batchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Form",
      "typeScriptTag": "form",
      "description": "FormViewSharingSalesUnitRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of FormViewSharingSalesUnitRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for FormViewSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContacts/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContacts.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostContact to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContact on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContacts/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContacts.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostContact to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContacts/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContacts.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostContact to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContact on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "position",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContacts",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContacts.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted GhostContacts are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContacts",
      "method": "createNew",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContacts.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContact on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "position",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContacts/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContacts.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContacts on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for GhostContacts. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContacts/batch-modify",
      "method": "modifyBatchGhost",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContacts.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContacts on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for GhostContacts. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountAccountRoleRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountAccountRoleRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostContactAccountAccountRoleRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContactAccountAccountRoleRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountAccountRoleRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountAccountRoleRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostContactAccountAccountRoleRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountAccountRoleRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountAccountRoleRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostContactAccountAccountRoleRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContactAccountAccountRoleRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "ghost_contact_account_relation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "account_role_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "ghost_contact_account_relation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountAccountRoleRelations",
      "method": "listGhostAccountRoleRelations",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountAccountRoleRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted GhostContactAccountAccountRoleRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountAccountRoleRelations",
      "method": "createGhostAccountRoleRelation",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountAccountRoleRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContactAccountAccountRoleRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "ghost_contact_account_relation",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "account_role_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "ghost_contact_account_relation_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountAccountRoleRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountAccountRoleRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContactAccountAccountRoleRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for GhostContactAccountAccountRoleRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountAccountRoleRelations/batch-modify",
      "method": "createOrUpdateBatch",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountAccountRoleRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContactAccountAccountRoleRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for GhostContactAccountAccountRoleRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostContactAccountRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContactAccountRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountRelations/{id}",
      "method": "getRelationById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostContactAccountRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountRelations/{id}",
      "method": "updateRelation",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostContactAccountRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContactAccountRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "ghost_contact",
          "schema": "object",
          "description": ""
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "comment",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "ghost_contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_assistant",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "is_sibling",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "position",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "account_roles",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted GhostContactAccountRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContactAccountRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "ghost_contact",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "ghost_contact_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_assistant",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "is_sibling",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "position",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "account_roles",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountRelations/batch-delete",
      "method": "removeBatchGhostContactRelations",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContactAccountRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for GhostContactAccountRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostContactAccountRelations/batch-modify",
      "method": "createOrUpdateBatchRelations",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostContactAccountRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostContactAccountRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for GhostContactAccountRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostLeadOpptyContactRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostLeadOpptyContactRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostLeadOpptyContactRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactRelations/{id}",
      "method": "modifyRelationWithId",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostLeadOpptyContactRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostLeadOpptyContactRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "ghost_contact",
          "schema": "object",
          "description": ""
        },
        {
          "name": "lead_oppty_contact_group_relation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "comment",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "ghost_contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_contact_group_relation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "position_in_group",
          "schema": "object",
          "description": ""
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "sales_roles",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactRelations",
      "method": "listGhostLeadOpptyContactRelations",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted GhostLeadOpptyContactRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactRelations",
      "method": "createGhostLeadOpptyContactRelation",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostLeadOpptyContactRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "ghost_contact",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "lead_oppty_contact_group_relation",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "ghost_contact_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_contact_group_relation_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "position_in_group",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "sales_roles",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactRelations/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostLeadOpptyContactRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for GhostLeadOpptyContactRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactRelations/batch-modify",
      "method": "modifyBatchGhostLeadOpptyContactRelations",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostLeadOpptyContactRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for GhostLeadOpptyContactRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactSalesRoleRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactSalesRoleRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostLeadOpptyContactSalesRoleRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostLeadOpptyContactSalesRoleRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactSalesRoleRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactSalesRoleRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostLeadOpptyContactSalesRoleRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactSalesRoleRelations/{id}",
      "method": "updateGhostLeadOpptyContactSalesRoleRelation",
      "httpMethod": "patch",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactSalesRoleRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of GhostLeadOpptyContactSalesRoleRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostLeadOpptyContactSalesRoleRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "ghost_lead_oppty_contact_relation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "ghost_lead_oppty_contact_relation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sales_role_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactSalesRoleRelations",
      "method": "listDefinedRelations",
      "httpMethod": "get",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactSalesRoleRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted GhostLeadOpptyContactSalesRoleRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactSalesRoleRelations",
      "method": "createNewGhostLeadOpptyContactSalesRoleRelation",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactSalesRoleRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostLeadOpptyContactSalesRoleRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "ghost_lead_oppty_contact_relation",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "ghost_lead_oppty_contact_relation_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sales_role_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactSalesRoleRelations/batch-delete",
      "method": "removeBatchGhostLeadOpptySalesRoleRelations",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactSalesRoleRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostLeadOpptyContactSalesRoleRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for GhostLeadOpptyContactSalesRoleRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/GhostLeadOpptyContactSalesRoleRelations/batch-modify",
      "method": "modifyBatchGhostLeadOpptySalesRoleRelations",
      "httpMethod": "post",
      "tag": "Contact",
      "typeScriptTag": "contact",
      "description": "GhostLeadOpptyContactSalesRoleRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of GhostLeadOpptyContactSalesRoleRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for GhostLeadOpptyContactSalesRoleRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ImportMappingMasks/{id}",
      "method": "mappingMaskremoveById",
      "httpMethod": "delete",
      "tag": "Import",
      "typeScriptTag": "import",
      "description": "ImportMappingMasks.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ImportMappingMask to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ImportMappingMask on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ImportMappingMasks/{id}",
      "method": "mappingMaskGet",
      "httpMethod": "get",
      "tag": "Import",
      "typeScriptTag": "import",
      "description": "ImportMappingMasks.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ImportMappingMask to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ImportMappingMasks/{id}",
      "method": "modifyMappingMask",
      "httpMethod": "patch",
      "tag": "Import",
      "typeScriptTag": "import",
      "description": "ImportMappingMasks.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ImportMappingMask to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ImportMappingMask on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "entity_api_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "entity_type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "mapping",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "relation_types",
          "schema": "object",
          "description": ""
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ImportMappingMasks",
      "method": "mappingMasksList",
      "httpMethod": "get",
      "tag": "Import",
      "typeScriptTag": "import",
      "description": "ImportMappingMasks.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ImportMappingMasks are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ImportMappingMasks",
      "method": "mappingMaskCreate",
      "httpMethod": "post",
      "tag": "Import",
      "typeScriptTag": "import",
      "description": "ImportMappingMasks.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ImportMappingMask on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "entity_api_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "entity_type",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "mapping",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "relation_types",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ImportMappingMasks/batch-delete",
      "method": "mappingMasksremoveBatch",
      "httpMethod": "post",
      "tag": "Import",
      "typeScriptTag": "import",
      "description": "ImportMappingMasks.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ImportMappingMasks on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ImportMappingMasks. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ImportMappingMasks/batch-modify",
      "method": "mappingBatchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Import",
      "typeScriptTag": "import",
      "description": "ImportMappingMasks.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ImportMappingMasks on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ImportMappingMasks. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/InterfacePreviews/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Interface",
      "typeScriptTag": "interface",
      "description": "InterfacePreviews.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of InterfacePreview to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of InterfacePreview on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/InterfacePreviews/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Interface",
      "typeScriptTag": "interface",
      "description": "InterfacePreviews.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of InterfacePreview to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/InterfacePreviews/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Interface",
      "typeScriptTag": "interface",
      "description": "InterfacePreviews.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of InterfacePreview to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of InterfacePreview on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "card_field_ids",
          "schema": "object",
          "description": ""
        },
        {
          "name": "charts",
          "schema": "object",
          "description": ""
        },
        {
          "name": "detail_tabs",
          "schema": "object",
          "description": ""
        },
        {
          "name": "detail_widgets",
          "schema": "object",
          "description": ""
        },
        {
          "name": "field_ids",
          "schema": "object",
          "description": ""
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/InterfacePreviews",
      "method": "getAllPreviews",
      "httpMethod": "get",
      "tag": "Interface",
      "typeScriptTag": "interface",
      "description": "InterfacePreviews.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted InterfacePreviews are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/InterfacePreviews",
      "method": "generatePreview",
      "httpMethod": "post",
      "tag": "Interface",
      "typeScriptTag": "interface",
      "description": "InterfacePreviews.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of InterfacePreview on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "appointment_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "card_field_ids",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "charts",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "contact_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "custom_entity_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "detail_tabs",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "detail_widgets",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "field_ids",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "lead_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "task_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "entity_type_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/InterfacePreviews/batch-delete",
      "method": "removeWithIds",
      "httpMethod": "post",
      "tag": "Interface",
      "typeScriptTag": "interface",
      "description": "InterfacePreviews.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of InterfacePreviews on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for InterfacePreviews. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/InterfacePreviews/batch-modify",
      "method": "modifyBatchInterfacePreviews",
      "httpMethod": "post",
      "tag": "Interface",
      "typeScriptTag": "interface",
      "description": "InterfacePreviews.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of InterfacePreviews on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for InterfacePreviews. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Leads/{id}",
      "method": "removeLeadById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Leads.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Lead to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Lead on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Leads/{id}",
      "method": "getLeadById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Leads.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Lead to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Leads/{id}",
      "method": "modifyLead",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Leads.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Lead to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Lead on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "created",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_archived",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "label_flag",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "lead_source_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quick_account_email",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_phone",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_contact_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_email",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_phone",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "ranking",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "reason_of_close_description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "reason_of_close_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "step_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "lost_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Leads",
      "method": "getAllLeads",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Leads.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Leads are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Leads",
      "method": "registerNewLead",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Leads.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Lead on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_archived",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "label_flag",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "lead_source_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quick_account_email",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_phone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_contact_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_email",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_phone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "ranking",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "reason_of_close_description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "reason_of_close_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "step_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "lost_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Leads/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Leads.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Leads on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Leads. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Leads/batch-modify",
      "method": "modifyBatchLeads",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Leads.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Leads on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Leads. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOppties/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOppties.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOppty to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOppties",
      "method": "getAllLeadOpportunities",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOppties.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted LeadOppties are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyAccountRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyAccountRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyAccountRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyAccountRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyAccountRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyAccountRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyAccountRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyAccountRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyAccountRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyAccountRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyAccountRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyAccountRelations",
      "method": "getList",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyAccountRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted LeadOpptyAccountRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyAccountRelations",
      "method": "createNewRelation",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyAccountRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyAccountRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyAccountRelations/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyAccountRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyAccountRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptyAccountRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyAccountRelations/batch-modify",
      "method": "modifyBatchLeadOpptyAccountRelations",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyAccountRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyAccountRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptyAccountRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactGroupRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactGroupRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyContactGroupRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactGroupRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactGroupRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactGroupRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyContactGroupRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactGroupRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactGroupRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyContactGroupRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactGroupRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "color",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "group_position",
          "schema": "object",
          "description": ""
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactGroupRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactGroupRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted LeadOpptyContactGroupRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactGroupRelations",
      "method": "createNewRelation",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactGroupRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactGroupRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "color",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "group_position",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactGroupRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactGroupRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactGroupRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptyContactGroupRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactGroupRelations/batch-modify",
      "method": "batchModifyLeadOpptyContactGroupRelations",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactGroupRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactGroupRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptyContactGroupRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyContactRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyContactRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyContactRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "lead_oppty_contact_group_relation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "comment",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "lead_oppty_contact_group_relation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "position_in_group",
          "schema": "object",
          "description": ""
        },
        {
          "name": "relationship",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "sales_roles",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted LeadOpptyContactRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactRelations",
      "method": "createNewRelation",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "lead_oppty_contact_group_relation",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "lead_oppty_contact_group_relation_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "position_in_group",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "relationship",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "sales_roles",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactRelations/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptyContactRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactRelations/batch-modify",
      "method": "modifyBatchLeadOpptyContactRelations",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptyContactRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactSalesRoleRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactSalesRoleRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyContactSalesRoleRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactSalesRoleRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactSalesRoleRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactSalesRoleRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyContactSalesRoleRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactSalesRoleRelations/{id}",
      "method": "modifyContactSalesRoleRelation",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactSalesRoleRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyContactSalesRoleRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactSalesRoleRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "lead_oppty_contact_relation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "lead_oppty_contact_relation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sales_role_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactSalesRoleRelations",
      "method": "getRelations",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactSalesRoleRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted LeadOpptyContactSalesRoleRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactSalesRoleRelations",
      "method": "createNewLeadOpptyContactSalesRoleRelation",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactSalesRoleRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactSalesRoleRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "lead_oppty_contact_relation",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lead_oppty_contact_relation_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sales_role_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactSalesRoleRelations/batch-delete",
      "method": "removeRelations",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactSalesRoleRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactSalesRoleRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptyContactSalesRoleRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyContactSalesRoleRelations/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyContactSalesRoleRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyContactSalesRoleRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptyContactSalesRoleRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyDataExRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyDataExRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyDataExRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyDataExRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyDataExRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted LeadOpptyDataExRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyKPIs/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyKPIs.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyKPI to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyKPI on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyKPIs/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyKPIs.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyKPI to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyKPIs/{id}",
      "method": "modifyKpi",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyKPIs.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyKPI to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyKPI on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "application_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "kpi",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyKPIs",
      "method": "getAllKpis",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyKPIs.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted LeadOpptyKPIs are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyKPIs",
      "method": "createNewLeadOpptyKpi",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyKPIs.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyKPI on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "application_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "kpi",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyKPIs/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyKPIs.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyKPIs on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptyKPIs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyKPIs/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyKPIs.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyKPIs on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptyKPIs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingClientRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingClientRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptySharingClientRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptySharingClientRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingClientRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptySharingClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingClientRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingClientRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptySharingClientRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptySharingClientRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingClientRelations",
      "method": "getAllClientRelations",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted LeadOpptySharingClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingClientRelations",
      "method": "createNewRelation",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingClientRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptySharingClientRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingClientRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingClientRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptySharingClientRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptySharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingClientRelations/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingClientRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptySharingClientRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptySharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingSalesUnitRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingSalesUnitRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptySharingSalesUnitRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptySharingSalesUnitRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingSalesUnitRelations/{id}",
      "method": "getSalesUnitRelation",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingSalesUnitRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptySharingSalesUnitRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingSalesUnitRelations/{id}",
      "method": "updateRelation",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingSalesUnitRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptySharingSalesUnitRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptySharingSalesUnitRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingSalesUnitRelations",
      "method": "getRelations",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingSalesUnitRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted LeadOpptySharingSalesUnitRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingSalesUnitRelations",
      "method": "createNewRelation",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingSalesUnitRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptySharingSalesUnitRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingSalesUnitRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingSalesUnitRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptySharingSalesUnitRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptySharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptySharingSalesUnitRelations/batch-modify",
      "method": "batchModifySalesUnitRelations",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptySharingSalesUnitRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptySharingSalesUnitRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptySharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyStepCheckListRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyStepCheckListRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyStepCheckListRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyStepCheckListRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyStepCheckListRelations/{id}",
      "method": "getRelationById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyStepCheckListRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyStepCheckListRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyStepCheckListRelations/{id}",
      "method": "modifyCheckListRelation",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyStepCheckListRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadOpptyStepCheckListRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyStepCheckListRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "cloud_object",
          "schema": "object",
          "description": ""
        },
        {
          "name": "note",
          "schema": "object",
          "description": ""
        },
        {
          "name": "activity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "cloud_object_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "item_checked",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "note_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "step_checklist_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyStepCheckListRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyStepCheckListRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted LeadOpptyStepCheckListRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyStepCheckListRelations",
      "method": "createChecklistRelation",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyStepCheckListRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyStepCheckListRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "cloud_object",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "note",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "activity_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "cloud_object_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "item_checked",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "note_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "step_checklist_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyStepCheckListRelations/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyStepCheckListRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyStepCheckListRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptyStepCheckListRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadOpptyStepCheckListRelations/batch-modify",
      "method": "batchModifyRelations",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadOpptyStepCheckListRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadOpptyStepCheckListRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadOpptyStepCheckListRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadProcesses/{id}",
      "method": "removeLeadProcess",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadProcesses.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadProcess to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadProcess on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadProcesses/{id}",
      "method": "getLeadProcess",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadProcesses.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadProcess to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadProcesses/{id}",
      "method": "modifyLeadProcess",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadProcesses.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadProcess to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadProcess on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "color",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "steps",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadProcesses",
      "method": "getAllProcesses",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadProcesses.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted LeadProcesses are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadProcesses",
      "method": "createLeadProcess",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadProcesses.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadProcess on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "color",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "steps",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadProcesses/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadProcesses.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadProcesses on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadProcesses. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadProcesses/batch-modify",
      "method": "batchModifyLeadProcesses",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadProcesses.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadProcesses on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadProcesses. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadTypes/{id}",
      "method": "removeLeadType",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadTypes/{id}",
      "method": "getLeadType",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadTypes/{id}",
      "method": "modifyLeadType",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of LeadType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "form_edit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "form_lost",
          "schema": "object",
          "description": ""
        },
        {
          "name": "form_lost_enabled",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "lead_process_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadTypes",
      "method": "getLeadTypes",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted LeadTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadTypes",
      "method": "createLeadType",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "form_edit",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "form_lost",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "form_lost_enabled",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "lead_process_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadTypes/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/LeadTypes/batch-modify",
      "method": "batchModifyLeadTypes",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "LeadTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of LeadTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for LeadTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MasterRights/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "MasterRights.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MasterRight to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MasterRight on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MasterRights/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "MasterRights.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MasterRight to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MasterRights/{id}",
      "method": "modifyByIds",
      "httpMethod": "patch",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "MasterRights.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MasterRight to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MasterRight on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "access_account_relation_types",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_accounts",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_appointment_scheduler",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_appointment_scheduler_management",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_approval_processes",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_approval_processes_management",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_approvals",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_archive",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_audit",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_audit_log",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_bulk_update",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_calling",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_calling_company_phone",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_calling_purchase_phone",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_company_emails",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_contacts",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_document_management",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_document_management_company",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_document_management_record",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_account",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_account_delete",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_account_direction",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_account_private",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_account_tag_create",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_account_types",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_appointment",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_appointment_delete",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_appointment_direction",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_contact",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_contact_delete",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_contact_direction",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_contact_private",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_contact_tag_create",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_contact_types",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_dashboard",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_dashboard_delete_not_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_dashboard_delete_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_dashboard_sharing_custom",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_dashboard_sharing_public",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_email_content_share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_email_delete_not_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_email_sequence",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_email_template",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_email_template_create_delete_folder",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_email_template_delete_not_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_email_template_delete_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_email_template_sharing_custom",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_email_template_sharing_public",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_forecast",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_forecast_delete_not_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_forecast_delete_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_forecast_sharing_custom",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_forecast_sharing_public",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_form_view",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_form_view_delete_not_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_form_view_delete_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_form_view_sharing_custom",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_form_view_sharing_public",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_lead",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_lead_delete",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_lead_direction",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_lead_private",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_lead_tag_create",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_lead_types",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_oppty",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_oppty_delete",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_oppty_direction",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_oppty_private",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_oppty_tag_create",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_pipeline",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_process",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_profile",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_profile_default_screen_profiles",
          "schema": "object",
          "description": ""
        },
        {
          "name": "access_entity_profile_delete_not_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_profile_delete_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_profile_sharing_custom",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_profile_sharing_public",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_project",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_project_delete",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_project_direction",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_project_private",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_project_tag_create",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_quote",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_quote_delete",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_quote_direction",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_quote_types",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_report",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_report_create_delete_folder",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_report_delete_not_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_report_delete_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_report_sharing_custom",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_report_sharing_public",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_target",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_target_delete_not_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_target_delete_owned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_task",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_task_delete",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_task_direction",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_task_unassigned",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_export",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_feeds",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_foreign_currencies",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_form_and_fields",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_global_settings",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_home_screen",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_import",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_insights",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_leads",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_online_forms",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_online_forms_management",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_opportunity",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_pipeline_configuration",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_print",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_products_services",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_projects",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_quotes",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_sales_roles",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_security",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_units",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "access_user_and_roles",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "allowed_pipelines",
          "schema": "array",
          "description": ""
        },
        {
          "name": "allowed_lead_types",
          "schema": "array",
          "description": ""
        },
        {
          "name": "allowed_quote_types",
          "schema": "array",
          "description": ""
        },
        {
          "name": "allowed_account_types",
          "schema": "array",
          "description": ""
        },
        {
          "name": "allowed_contact_types",
          "schema": "array",
          "description": ""
        },
        {
          "name": "allowed_company_emails",
          "schema": "array",
          "description": ""
        },
        {
          "name": "allowed_company_phones",
          "schema": "array",
          "description": ""
        },
        {
          "name": "custom_entities",
          "schema": "string",
          "description": "",
          "example": "blob"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MasterRights",
      "method": "listAllDefined",
      "httpMethod": "get",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "MasterRights.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted MasterRights are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MasterRights",
      "method": "generateNewMasterRight",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "MasterRights.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MasterRight on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "access_account_relation_types",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_accounts",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_appointment_scheduler",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_appointment_scheduler_management",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_approval_processes",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_approval_processes_management",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_approvals",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_archive",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_audit",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_audit_log",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_bulk_update",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_calling",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_calling_company_phone",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_calling_purchase_phone",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_company_emails",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_contacts",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_document_management",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_document_management_company",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_document_management_record",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_account",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_account_delete",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_account_direction",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_account_private",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_account_tag_create",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_account_types",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_appointment",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_appointment_delete",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_appointment_direction",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_contact",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_contact_delete",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_contact_direction",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_contact_private",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_contact_tag_create",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_contact_types",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_dashboard",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_dashboard_delete_not_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_dashboard_delete_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_dashboard_sharing_custom",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_dashboard_sharing_public",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_email_content_share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_email_delete_not_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_email_sequence",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_email_template",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_email_template_create_delete_folder",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_email_template_delete_not_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_email_template_delete_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_email_template_sharing_custom",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_email_template_sharing_public",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_forecast",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_forecast_delete_not_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_forecast_delete_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_forecast_sharing_custom",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_forecast_sharing_public",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_form_view",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_form_view_delete_not_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_form_view_delete_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_form_view_sharing_custom",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_form_view_sharing_public",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_lead",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_lead_delete",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_lead_direction",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_lead_private",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_lead_tag_create",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_lead_types",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_oppty",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_oppty_delete",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_oppty_direction",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_oppty_private",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_oppty_tag_create",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_pipeline",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_process",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_profile",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_profile_default_screen_profiles",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "access_entity_profile_delete_not_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_profile_delete_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_profile_sharing_custom",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_profile_sharing_public",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_project",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_project_delete",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_project_direction",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_project_private",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_project_tag_create",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_quote",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_quote_delete",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_quote_direction",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_quote_types",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_report",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_report_create_delete_folder",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_report_delete_not_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_report_delete_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_report_sharing_custom",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_report_sharing_public",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_target",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_target_delete_not_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_target_delete_owned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_task",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "access_entity_task_delete",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_entity_task_direction",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "access_entity_task_unassigned",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_export",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_feeds",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_foreign_currencies",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_form_and_fields",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_global_settings",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_home_screen",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_import",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_insights",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_leads",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_online_forms",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_online_forms_management",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_opportunity",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_pipeline_configuration",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_print",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_products_services",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_projects",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_quotes",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_sales_roles",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_security",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_units",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "access_user_and_roles",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "allowed_pipelines",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "allowed_lead_types",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "allowed_quote_types",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "allowed_account_types",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "allowed_contact_types",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "allowed_company_emails",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "allowed_company_phones",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "custom_entities",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "blob"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MasterRights/batch-delete",
      "method": "removeById",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "MasterRights.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MasterRights on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for MasterRights. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MasterRights/batch-modify",
      "method": "modifyBatchMasterRights",
      "httpMethod": "post",
      "tag": "MasterRight",
      "typeScriptTag": "masterRight",
      "description": "MasterRights.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MasterRights on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for MasterRights. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Memos/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "Memos.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Memo to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Memo on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Memos/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "Memos.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Memo to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Memos/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "Memos.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Memo to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Memo on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "subject",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "project_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "lead_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "opportunity_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "custom_entity_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "comments",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Memos",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "Memos.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Memos are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Memos",
      "method": "addNew",
      "httpMethod": "post",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "Memos.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Memo on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "subject",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "project_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "lead_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "opportunity_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "custom_entity_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "comments",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Memos/batch-delete",
      "method": "removeById",
      "httpMethod": "post",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "Memos.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Memos on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Memos. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Memos/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "Memos.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Memos on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Memos. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MemoComments/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "MemoComments.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MemoComment to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MemoComment on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MemoComments/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "MemoComments.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MemoComment to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MemoComments/{id}",
      "method": "updateMemoComment",
      "httpMethod": "patch",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "MemoComments.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MemoComment to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MemoComment on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "comment",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "memo_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MemoComments",
      "method": "getAllMemoComments",
      "httpMethod": "get",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "MemoComments.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted MemoComments are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MemoComments",
      "method": "createNewMemoComment",
      "httpMethod": "post",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "MemoComments.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MemoComment on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "memo_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MemoComments/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "MemoComments.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MemoComments on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for MemoComments. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MemoComments/batch-modify",
      "method": "modifyBatchMemoComments",
      "httpMethod": "post",
      "tag": "Memo",
      "typeScriptTag": "memo",
      "description": "MemoComments.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MemoComments on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for MemoComments. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MessageRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MessageRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageRelations/{id}",
      "method": "modifyByIds",
      "httpMethod": "patch",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MessageRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "custom_entity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "message_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageRelations",
      "method": "getAllMessageRelations",
      "httpMethod": "get",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted MessageRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageRelations",
      "method": "createNewMessageRelation",
      "httpMethod": "post",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "custom_entity_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "message_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for MessageRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageRelations/batch-modify",
      "method": "modifyBatchRelations",
      "httpMethod": "post",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for MessageRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingClientRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingClientRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MessageSharingClientRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageSharingClientRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingClientRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MessageSharingClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingClientRelations/{id}",
      "method": "updateRelation",
      "httpMethod": "patch",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingClientRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MessageSharingClientRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageSharingClientRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "message_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingClientRelations",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted MessageSharingClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingClientRelations",
      "method": "createNewRelation",
      "httpMethod": "post",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingClientRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageSharingClientRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "message_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingClientRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingClientRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageSharingClientRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for MessageSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingClientRelations/batch-modify",
      "method": "createOrUpdateBatch",
      "httpMethod": "post",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingClientRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageSharingClientRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for MessageSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingSalesUnitRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingSalesUnitRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MessageSharingSalesUnitRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageSharingSalesUnitRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingSalesUnitRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingSalesUnitRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MessageSharingSalesUnitRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingSalesUnitRelations/{id}",
      "method": "updateById",
      "httpMethod": "patch",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingSalesUnitRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of MessageSharingSalesUnitRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageSharingSalesUnitRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "message_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingSalesUnitRelations",
      "method": "listRelations",
      "httpMethod": "get",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingSalesUnitRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted MessageSharingSalesUnitRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingSalesUnitRelations",
      "method": "createNewRelation",
      "httpMethod": "post",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingSalesUnitRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageSharingSalesUnitRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "message_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingSalesUnitRelations/batch-delete",
      "method": "removeBatchMessageSharingSalesUnitRelations",
      "httpMethod": "post",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingSalesUnitRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageSharingSalesUnitRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for MessageSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/MessageSharingSalesUnitRelations/batch-modify",
      "method": "updateBatch",
      "httpMethod": "post",
      "tag": "Message",
      "typeScriptTag": "message",
      "description": "MessageSharingSalesUnitRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of MessageSharingSalesUnitRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for MessageSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Notes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Note",
      "typeScriptTag": "note",
      "description": "Notes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Note to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Note on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Notes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Note",
      "typeScriptTag": "note",
      "description": "Notes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Note to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Notes/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Note",
      "typeScriptTag": "note",
      "description": "Notes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Note to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Note on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "custom_entity_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "note",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Notes",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Note",
      "typeScriptTag": "note",
      "description": "Notes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Notes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Notes",
      "method": "addNew",
      "httpMethod": "post",
      "tag": "Note",
      "typeScriptTag": "note",
      "description": "Notes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Note on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "custom_entity_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "note",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Notes/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Note",
      "typeScriptTag": "note",
      "description": "Notes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Notes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Notes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Notes/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Note",
      "typeScriptTag": "note",
      "description": "Notes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Notes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Notes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineForms/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineForms.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineForm to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineForm on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineForms/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineForms.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineForm to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineForms/{id}",
      "method": "modifyFormById",
      "httpMethod": "patch",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineForms.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineForm to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineForm on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "email_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "field_ids",
          "schema": "object",
          "description": ""
        },
        {
          "name": "online_form_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "account_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "lead_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "opportunity_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "project_relations",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineForms",
      "method": "getAllForms",
      "httpMethod": "get",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineForms.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OnlineForms are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineForms",
      "method": "createNewForm",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineForms.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineForm on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "email_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "field_ids",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "online_form_type_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "account_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "lead_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "opportunity_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "project_relations",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineForms/batch-delete",
      "method": "removeBatchOnlineForms",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineForms.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineForms on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OnlineForms. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineForms/batch-modify",
      "method": "modifyBatchOnlineForms",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineForms.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineForms on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OnlineForms. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormActivityLogLines/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormActivityLogLines.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormActivityLogLine to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormActivityLogLine on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormActivityLogLines/{id}",
      "method": "activityLogGetById",
      "httpMethod": "get",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormActivityLogLines.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormActivityLogLine to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormActivityLogLines/{id}",
      "method": "modifyLogLine",
      "httpMethod": "patch",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormActivityLogLines.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormActivityLogLine to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormActivityLogLine on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "executed_at",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_visible",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "online_form_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormActivityLogLines",
      "method": "listActivityLogLines",
      "httpMethod": "get",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormActivityLogLines.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OnlineFormActivityLogLines are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormActivityLogLines",
      "method": "createNewLogLine",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormActivityLogLines.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormActivityLogLine on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "executed_at",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_visible",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "online_form_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormActivityLogLines/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormActivityLogLines.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormActivityLogLines on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OnlineFormActivityLogLines. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormActivityLogLines/batch-modify",
      "method": "activityBatchModify",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormActivityLogLines.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormActivityLogLines on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OnlineFormActivityLogLines. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormDataExRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormDataExRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormDataExRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormDataExRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormDataExRelations/{id}",
      "method": "formDataExRelationsGet",
      "httpMethod": "get",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormDataExRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormDataExRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormDataExRelations/{id}",
      "method": "modifyFormDataExRelationsById",
      "httpMethod": "patch",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormDataExRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormDataExRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormDataExRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "data_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "data_set_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "online_form_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormDataExRelations",
      "method": "getRelations",
      "httpMethod": "get",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormDataExRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OnlineFormDataExRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormDataExRelations",
      "method": "createFormRelation",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormDataExRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormDataExRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "data_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "data_set_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "online_form_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormDataExRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormDataExRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormDataExRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OnlineFormDataExRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormDataExRelations/batch-modify",
      "method": "createOrUpdateBatchOnlineFormDataExRelations",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormDataExRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormDataExRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OnlineFormDataExRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "online_form_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormRelations",
      "method": "getAllOnlineFormRelations",
      "httpMethod": "get",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OnlineFormRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "online_form_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormRelations/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OnlineFormRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormRelations/batch-modify",
      "method": "modifyFormRelationsBatch",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OnlineFormRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypes/{id}",
      "method": "modifyFormType",
      "httpMethod": "patch",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "entity_type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "form_edit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "last_schema_change",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "last_status_change",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "custom_recaptcha",
          "schema": "string",
          "description": "",
          "example": "blob"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypes",
      "method": "getAllOnlineFormTypes",
      "httpMethod": "get",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OnlineFormTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypes",
      "method": "createFormType",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "entity_type",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "form_edit",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "is_enabled",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "last_schema_change",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "last_status_change",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "custom_recaptcha",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "blob"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypes/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OnlineFormTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypes/batch-modify",
      "method": "modifyFormBatch",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OnlineFormTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypeEmailRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypeEmailRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormTypeEmailRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormTypeEmailRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypeEmailRelations/{id}",
      "method": "formTypeEmailgetById",
      "httpMethod": "get",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypeEmailRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormTypeEmailRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypeEmailRelations/{id}",
      "method": "updateById",
      "httpMethod": "patch",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypeEmailRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OnlineFormTypeEmailRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormTypeEmailRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "online_form_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypeEmailRelations",
      "method": "listOnlineFormTypeEmailRelations",
      "httpMethod": "get",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypeEmailRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OnlineFormTypeEmailRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypeEmailRelations",
      "method": "createNewOnlineFormTypeEmailRelation",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypeEmailRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormTypeEmailRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "online_form_type_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypeEmailRelations/batch-delete",
      "method": "removeBatchEmailRelations",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypeEmailRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormTypeEmailRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OnlineFormTypeEmailRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OnlineFormTypeEmailRelations/batch-modify",
      "method": "formTypeEmailRelationsBatchModify",
      "httpMethod": "post",
      "tag": "Online",
      "typeScriptTag": "online",
      "description": "OnlineFormTypeEmailRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OnlineFormTypeEmailRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OnlineFormTypeEmailRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Opportunities/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Opportunities.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Opportunity to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Opportunity on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Opportunities/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Opportunities.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Opportunity to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Opportunities/{id}",
      "method": "modifyOpportunity",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Opportunities.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Opportunity to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Opportunity on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "created",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "active_quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "closing_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "is_archived",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "is_value_auto_calculate",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "label_flag",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "lead_source_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "oppty_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_currency_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_price_list_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_sections",
          "schema": "object",
          "description": ""
        },
        {
          "name": "quick_account_email",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_phone",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_contact_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_email",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_phone",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "ranking",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "reason_of_close_description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "reason_of_close_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "step_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "was_qualified",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "value",
          "schema": "object",
          "description": ""
        },
        {
          "name": "oppty_recurrence",
          "schema": "object",
          "description": ""
        },
        {
          "name": "revenue_schedule",
          "schema": "object",
          "description": ""
        },
        {
          "name": "product_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "won_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "lost_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Opportunities",
      "method": "getAllOpportunities",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Opportunities.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Opportunities are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Opportunities",
      "method": "createNewOpportunity",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Opportunities.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Opportunity on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "active_quote_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "closing_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "is_archived",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "is_value_auto_calculate",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "label_flag",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "lead_source_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "oppty_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_currency_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_price_list_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_sections",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "quick_account_email",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_phone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_contact_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_email",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_phone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "ranking",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "reason_of_close_description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "reason_of_close_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "step_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "was_qualified",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "value",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "oppty_recurrence",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "revenue_schedule",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "product_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "won_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "lost_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Opportunities/batch-delete",
      "method": "removeBatchOpportunities",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Opportunities.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Opportunities on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Opportunities. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Opportunities/batch-modify",
      "method": "modifyBatch",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "Opportunities.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Opportunities on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Opportunities. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpportunityTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpportunityTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpportunityType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpportunityType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpportunityTypes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpportunityTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpportunityType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpportunityTypes/{id}",
      "method": "modifyOpportunityType",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpportunityTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpportunityType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpportunityType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "form_edit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "form_lost",
          "schema": "object",
          "description": ""
        },
        {
          "name": "form_qualify",
          "schema": "object",
          "description": ""
        },
        {
          "name": "form_won",
          "schema": "object",
          "description": ""
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "pipeline_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpportunityTypes",
      "method": "getAllOpportunityTypes",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpportunityTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OpportunityTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpportunityTypes",
      "method": "createNewOpportunityType",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpportunityTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpportunityType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "form_edit",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "form_lost",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "form_qualify",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "form_won",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "pipeline_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpportunityTypes/batch-delete",
      "method": "removeBatchOpportunityTypes",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpportunityTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpportunityTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpportunityTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpportunityTypes/batch-modify",
      "method": "batchModifyOpportunityTypes",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpportunityTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpportunityTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpportunityTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Product Line Items",
      "typeScriptTag": "productLineItems",
      "description": "OpptyProductRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Product Line Items",
      "typeScriptTag": "productLineItems",
      "description": "OpptyProductRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelations/{id}",
      "method": "modifyOpptyProductRelation",
      "httpMethod": "patch",
      "tag": "Product Line Items",
      "typeScriptTag": "productLineItems",
      "description": "OpptyProductRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "paired_oppty_product_relation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "amount",
          "schema": "number",
          "description": "",
          "example": 4.32
        },
        {
          "name": "comment",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_product_relation_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "paired_oppty_product_relation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "price",
          "schema": "number",
          "description": "",
          "example": 4.32
        },
        {
          "name": "quantity",
          "schema": "number",
          "description": "",
          "example": 4.32
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "section_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revenue_schedule",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelations",
      "method": "getAllOpptyProductRelations",
      "httpMethod": "get",
      "tag": "Product Line Items",
      "typeScriptTag": "productLineItems",
      "description": "OpptyProductRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OpptyProductRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelations",
      "method": "createNew",
      "httpMethod": "post",
      "tag": "Product Line Items",
      "typeScriptTag": "productLineItems",
      "description": "OpptyProductRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "paired_oppty_product_relation",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "amount",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 4.32
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_product_relation_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "paired_oppty_product_relation_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "price",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 4.32
        },
        {
          "name": "product_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quantity",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 4.32
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "section_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revenue_schedule",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelations/batch-delete",
      "method": "removeBatchOpptyProductRelations",
      "httpMethod": "post",
      "tag": "Product Line Items",
      "typeScriptTag": "productLineItems",
      "description": "OpptyProductRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyProductRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelations/batch-modify",
      "method": "batchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Product Line Items",
      "typeScriptTag": "productLineItems",
      "description": "OpptyProductRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyProductRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationDataExRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationDataExRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelationDataExRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationDataExRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationDataExRelations/{id}",
      "method": "getProductRelationDataExRelationById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationDataExRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelationDataExRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationDataExRelations/{id}",
      "method": "updateRelationDataEx",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationDataExRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelationDataExRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationDataExRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "oppty_product_relation",
          "schema": "object",
          "description": ""
        },
        {
          "name": "data_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "data_set_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_product_relation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationDataExRelations",
      "method": "getAllOpptyProductRelationDataExRelations",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationDataExRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OpptyProductRelationDataExRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationDataExRelations",
      "method": "createOpptyProductRelationDataExRelation",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationDataExRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationDataExRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "oppty_product_relation",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "data_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "data_set_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_product_relation_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationDataExRelations/batch-delete",
      "method": "removeRelationsByIds",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationDataExRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationDataExRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyProductRelationDataExRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationDataExRelations/batch-modify",
      "method": "batchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationDataExRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationDataExRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyProductRelationDataExRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedules/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedules.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelationRevenueSchedule to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationRevenueSchedule on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedules/{id}",
      "method": "getOpptyProductRelationRevenueSchedule",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedules.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelationRevenueSchedule to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedules/{id}",
      "method": "updateRevenueSchedule",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedules.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelationRevenueSchedule to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationRevenueSchedule on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "is_deleted",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "cancelation_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "period_count",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "period_type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "start_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedules",
      "method": "getAllOpptyProductRelationRevenueSchedules",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedules.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OpptyProductRelationRevenueSchedules are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedules",
      "method": "createNewOpptyProductRelationRevenueSchedule",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedules.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationRevenueSchedule on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_deleted",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "cancelation_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "period_count",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "period_type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "start_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedules/batch-delete",
      "method": "removeBatchOpptyProductRelationRevenueSchedules",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedules.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationRevenueSchedules on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyProductRelationRevenueSchedules. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedules/batch-modify",
      "method": "batchModifyOpptyProductRelationRevenueSchedules",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedules.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationRevenueSchedules on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyProductRelationRevenueSchedules. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedulePeriods/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedulePeriods.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelationRevenueSchedulePeriod to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationRevenueSchedulePeriod on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedulePeriods/{id}",
      "method": "getRevenueSchedulePeriodById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedulePeriods.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelationRevenueSchedulePeriod to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedulePeriods/{id}",
      "method": "updatePeriod",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedulePeriods.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelationRevenueSchedulePeriod to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationRevenueSchedulePeriod on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "oppty_product_relation_revenue_schedule",
          "schema": "object",
          "description": ""
        },
        {
          "name": "date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "oppty_product_relation_revenue_schedule_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "transaction_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "value",
          "schema": "number",
          "description": "",
          "example": 4.32
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedulePeriods",
      "method": "listOpptyProductRelationRevenueSchedulePeriods",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedulePeriods.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OpptyProductRelationRevenueSchedulePeriods are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedulePeriods",
      "method": "createNewOpptyProductRelationRevenueSchedulePeriod",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedulePeriods.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationRevenueSchedulePeriod on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "oppty_product_relation_revenue_schedule",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "oppty_product_relation_revenue_schedule_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "transaction_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "value",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 4.32
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedulePeriods/batch-delete",
      "method": "removeBatchOpptyProductRelationRevenueSchedulePeriods",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedulePeriods.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationRevenueSchedulePeriods on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyProductRelationRevenueSchedulePeriods. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationRevenueSchedulePeriods/batch-modify",
      "method": "batchModifyOpptyProductRelationRevenueSchedulePeriods",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationRevenueSchedulePeriods.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationRevenueSchedulePeriods on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyProductRelationRevenueSchedulePeriods. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelationType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationTypes/{id}",
      "method": "getOpptyProductRelationType",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelationType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationTypes/{id}",
      "method": "modifyOpptyProductRelationType",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyProductRelationType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "form_edit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationTypes",
      "method": "getList",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OpptyProductRelationTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationTypes",
      "method": "createNewOpptyProductRelationType",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "form_edit",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationTypes/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyProductRelationTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyProductRelationTypes/batch-modify",
      "method": "modifyOpptyProductRelationTypesBatch",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyProductRelationTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyProductRelationTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyProductRelationTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRecurrences/{id}",
      "method": "removeOpptyRecurrence",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRecurrences.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyRecurrence to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRecurrence on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRecurrences/{id}",
      "method": "getOpptyRecurrence",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRecurrences.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyRecurrence to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRecurrences/{id}",
      "method": "updateOpptyRecurrence",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRecurrences.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyRecurrence to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRecurrence on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "apply_recurrence",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "condition",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "day",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "day_of_week",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "end_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "month",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "occur_every",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "occurrences_count",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "start_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "step_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "week",
          "schema": "integer",
          "description": "",
          "example": -1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRecurrences",
      "method": "getAllOpptyRecurrences",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRecurrences.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OpptyRecurrences are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRecurrences",
      "method": "createOpptyRecurrence",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRecurrences.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRecurrence on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "apply_recurrence",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "condition",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "day",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "day_of_week",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "end_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "month",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "occur_every",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "occurrences_count",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "oppty_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "start_date",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "step_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "week",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": -1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRecurrences/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRecurrences.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRecurrences on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyRecurrences. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRecurrences/batch-modify",
      "method": "batchModifyOpptyRecurrences",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRecurrences.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRecurrences on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyRecurrences. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedules/{id}",
      "method": "removeOpptyRevenueSchedule",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedules.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyRevenueSchedule to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRevenueSchedule on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedules/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedules.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyRevenueSchedule to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedules/{id}",
      "method": "modifyOpptyRevenueSchedule",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedules.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyRevenueSchedule to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRevenueSchedule on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "is_deleted",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "cancelation_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "period_count",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "period_type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "start_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedules",
      "method": "getAllOpptyRevenueSchedules",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedules.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OpptyRevenueSchedules are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedules",
      "method": "createOpptyRevenueSchedule",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedules.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRevenueSchedule on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_deleted",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "cancelation_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "period_count",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "period_type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "start_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedules/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedules.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRevenueSchedules on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyRevenueSchedules. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedules/batch-modify",
      "method": "modifyBatchOpptyRevenueSchedules",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedules.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRevenueSchedules on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyRevenueSchedules. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedulePeriods/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedulePeriods.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyRevenueSchedulePeriod to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRevenueSchedulePeriod on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedulePeriods/{id}",
      "method": "getOpptyRevenueSchedulePeriod",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedulePeriods.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyRevenueSchedulePeriod to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedulePeriods/{id}",
      "method": "updateOpptyRevenueSchedulePeriod",
      "httpMethod": "patch",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedulePeriods.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of OpptyRevenueSchedulePeriod to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRevenueSchedulePeriod on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "oppty_revenue_schedule",
          "schema": "object",
          "description": ""
        },
        {
          "name": "date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "oppty_revenue_schedule_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "transaction_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "value",
          "schema": "number",
          "description": "",
          "example": 4.32
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedulePeriods",
      "method": "getAllOpptyRevenueSchedulePeriods",
      "httpMethod": "get",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedulePeriods.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted OpptyRevenueSchedulePeriods are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedulePeriods",
      "method": "createNewOpptyRevenueSchedulePeriod",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedulePeriods.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRevenueSchedulePeriod on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "oppty_revenue_schedule",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "oppty_revenue_schedule_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "transaction_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "value",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 4.32
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedulePeriods/batch-delete",
      "method": "removeBatchOpptyRevenueSchedulePeriods",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedulePeriods.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRevenueSchedulePeriods on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyRevenueSchedulePeriods. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/OpptyRevenueSchedulePeriods/batch-modify",
      "method": "batchModifyOpptyRevenueSchedulePeriods",
      "httpMethod": "post",
      "tag": "Lead & Opportunity",
      "typeScriptTag": "lead &Opportunity",
      "description": "OpptyRevenueSchedulePeriods.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of OpptyRevenueSchedulePeriods on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for OpptyRevenueSchedulePeriods. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ParentAccountRelationTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "ParentAccountRelationTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ParentAccountRelationType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ParentAccountRelationType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ParentAccountRelationTypes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "ParentAccountRelationTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ParentAccountRelationType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ParentAccountRelationTypes/{id}",
      "method": "updateRelationType",
      "httpMethod": "patch",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "ParentAccountRelationTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ParentAccountRelationType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ParentAccountRelationType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "child_label",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "parent_label",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ParentAccountRelationTypes",
      "method": "listParentAccountRelationTypes",
      "httpMethod": "get",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "ParentAccountRelationTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ParentAccountRelationTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ParentAccountRelationTypes",
      "method": "createNewParentAccountRelationType",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "ParentAccountRelationTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ParentAccountRelationType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "child_label",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "parent_label",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ParentAccountRelationTypes/batch-delete",
      "method": "removeParentAccountRelationTypes",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "ParentAccountRelationTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ParentAccountRelationTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ParentAccountRelationTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ParentAccountRelationTypes/batch-modify",
      "method": "modifyParentAccountRelationTypesBatch",
      "httpMethod": "post",
      "tag": "Account",
      "typeScriptTag": "account",
      "description": "ParentAccountRelationTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ParentAccountRelationTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ParentAccountRelationTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Phones/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Phone",
      "typeScriptTag": "phone",
      "description": "Phones.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Phone to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Phone on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Phones/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Phone",
      "typeScriptTag": "phone",
      "description": "Phones.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Phone to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Phones/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Phone",
      "typeScriptTag": "phone",
      "description": "Phones.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Phone to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Phone on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "phone_number",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "twilio_caller_sid",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Phones",
      "method": "getAllPhones",
      "httpMethod": "get",
      "tag": "Phone",
      "typeScriptTag": "phone",
      "description": "Phones.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Phones are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Phones",
      "method": "registerNewPhone",
      "httpMethod": "post",
      "tag": "Phone",
      "typeScriptTag": "phone",
      "description": "Phones.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Phone on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "phone_number",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "twilio_caller_sid",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "type",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Phones/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Phone",
      "typeScriptTag": "phone",
      "description": "Phones.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Phones on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Phones. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Phones/batch-modify",
      "method": "batchModifyPhones",
      "httpMethod": "post",
      "tag": "Phone",
      "typeScriptTag": "phone",
      "description": "Phones.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Phones on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Phones. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Pipelines/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Pipeline",
      "typeScriptTag": "pipeline",
      "description": "Pipelines.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Pipeline to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Pipeline on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Pipelines/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Pipeline",
      "typeScriptTag": "pipeline",
      "description": "Pipelines.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Pipeline to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Pipelines/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Pipeline",
      "typeScriptTag": "pipeline",
      "description": "Pipelines.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Pipeline to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Pipeline on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "color",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "steps",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Pipelines",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Pipeline",
      "typeScriptTag": "pipeline",
      "description": "Pipelines.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Pipelines are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Pipelines",
      "method": "registerNewPipeline",
      "httpMethod": "post",
      "tag": "Pipeline",
      "typeScriptTag": "pipeline",
      "description": "Pipelines.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Pipeline on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "color",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "steps",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Pipelines/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Pipeline",
      "typeScriptTag": "pipeline",
      "description": "Pipelines.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Pipelines on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Pipelines. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Pipelines/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Pipeline",
      "typeScriptTag": "pipeline",
      "description": "Pipelines.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Pipelines on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Pipelines. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Processes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "Processes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Process to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Process on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Processes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "Processes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Process to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Processes/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "Processes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Process to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Process on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Processes",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "Processes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Processes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Processes",
      "method": "registerNewProcess",
      "httpMethod": "post",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "Processes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Process on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "settings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Processes/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "Processes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Processes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Processes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Processes/batch-modify",
      "method": "batchModifyEntities",
      "httpMethod": "post",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "Processes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Processes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Processes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogs/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogs.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProcessActivityLog to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessActivityLog on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogs/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogs.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProcessActivityLog to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogs/{id}",
      "method": "modifyActivityLog",
      "httpMethod": "patch",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogs.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProcessActivityLog to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessActivityLog on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "actor_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "application_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "cpu_run_time",
          "schema": "number",
          "description": "",
          "example": 4.32
        },
        {
          "name": "end_time",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_test_run",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "parent_process_ids",
          "schema": "object",
          "description": ""
        },
        {
          "name": "process_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "run_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "start_time",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogs",
      "method": "getAllLogs",
      "httpMethod": "get",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogs.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProcessActivityLogs are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogs",
      "method": "createActivityLog",
      "httpMethod": "post",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogs.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessActivityLog on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "actor_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "application_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "cpu_run_time",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 4.32
        },
        {
          "name": "end_time",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_test_run",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "parent_process_ids",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "process_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "run_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "start_time",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "status",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogs/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogs.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessActivityLogs on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProcessActivityLogs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogs/batch-modify",
      "method": "modifyBatchActivityLogs",
      "httpMethod": "post",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogs.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessActivityLogs on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProcessActivityLogs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogLines/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogLines.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProcessActivityLogLine to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessActivityLogLine on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogLines/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogLines.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProcessActivityLogLine to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogLines/{id}",
      "method": "modifyLogLines",
      "httpMethod": "patch",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogLines.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProcessActivityLogLine to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessActivityLogLine on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "executed_at",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_visible",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "process_activity_log_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogLines",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogLines.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProcessActivityLogLines are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogLines",
      "method": "createLogLine",
      "httpMethod": "post",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogLines.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessActivityLogLine on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "executed_at",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_visible",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "process_activity_log_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogLines/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogLines.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessActivityLogLines on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProcessActivityLogLines. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessActivityLogLines/batch-modify",
      "method": "createOrUpdateBatchLogLines",
      "httpMethod": "post",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessActivityLogLines.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessActivityLogLines on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProcessActivityLogLines. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessTemplates/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessTemplates.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProcessTemplate to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessTemplate on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessTemplates/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessTemplates.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProcessTemplate to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessTemplates/{id}",
      "method": "modifyTemplateById",
      "httpMethod": "patch",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessTemplates.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProcessTemplate to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessTemplate on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "is_recommended",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessTemplates",
      "method": "getAllTemplates",
      "httpMethod": "get",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessTemplates.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProcessTemplates are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessTemplates",
      "method": "createNewProcessTemplate",
      "httpMethod": "post",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessTemplates.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessTemplate on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "is_recommended",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "settings",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessTemplates/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessTemplates.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessTemplates on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProcessTemplates. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProcessTemplates/batch-modify",
      "method": "modifyBatchProcessTemplates",
      "httpMethod": "post",
      "tag": "Process",
      "typeScriptTag": "process",
      "description": "ProcessTemplates.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProcessTemplates on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProcessTemplates. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Products/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "Products.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Product to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Product on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Products/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "Products.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Product to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Products/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "Products.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Product to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Product on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "picture",
          "schema": "object",
          "description": ""
        },
        {
          "name": "allowed_pipelines",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "picture_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_category_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sku",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "unit_symbol",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "product_pipeline_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "product_pipelines",
          "schema": "object",
          "description": ""
        },
        {
          "name": "picture_source_url",
          "schema": "string",
          "description": "",
          "example": "string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Products",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "Products.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Products are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Products",
      "method": "createNewProduct",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "Products.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Product on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "picture",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "allowed_pipelines",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "picture_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_category_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sku",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "unit_symbol",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "product_pipeline_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "product_pipelines",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "picture_source_url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Products/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "Products.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Products on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Products. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Products/batch-modify",
      "method": "batchModifyProducts",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "Products.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Products on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Products. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductCategories/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductCategories.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductCategory to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductCategory on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductCategories/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductCategories.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductCategory to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductCategories/{id}",
      "method": "modifyCategoryById",
      "httpMethod": "patch",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductCategories.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductCategory to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductCategory on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "parent_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "product_relations",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductCategories",
      "method": "getAllProductCategories",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductCategories.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProductCategories are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductCategories",
      "method": "createNewCategory",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductCategories.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductCategory on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "parent_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "product_relations",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductCategories/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductCategories.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductCategories on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProductCategories. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductCategories/batch-modify",
      "method": "modifyProductCategoriesBatch",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductCategories.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductCategories on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProductCategories. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductDataExRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductDataExRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductDataExRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductDataExRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductDataExRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProductDataExRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPipelineRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPipelineRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductPipelineRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPipelineRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPipelineRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPipelineRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductPipelineRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPipelineRelations/{id}",
      "method": "updateRelation",
      "httpMethod": "patch",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPipelineRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductPipelineRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPipelineRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "pipeline_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPipelineRelations",
      "method": "listRelations",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPipelineRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProductPipelineRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPipelineRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPipelineRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPipelineRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "pipeline_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPipelineRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPipelineRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPipelineRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProductPipelineRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPipelineRelations/batch-modify",
      "method": "modifyBatchProductPipelineRelations",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPipelineRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPipelineRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProductPipelineRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceLists/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceLists.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductPriceList to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPriceList on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceLists/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceLists.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductPriceList to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceLists/{id}",
      "method": "modifyPriceList",
      "httpMethod": "patch",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceLists.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductPriceList to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPriceList on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "end_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "start_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "product_price_list_prices",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceLists",
      "method": "listProductPriceLists",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceLists.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProductPriceLists are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceLists",
      "method": "createNewProductPriceList",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceLists.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPriceList on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "end_date",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "start_date",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "product_price_list_prices",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceLists/batch-delete",
      "method": "deleteBatch",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceLists.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPriceLists on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProductPriceLists. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceLists/batch-modify",
      "method": "modifyBatchProductPriceLists",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceLists.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPriceLists on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProductPriceLists. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceListPrices/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceListPrices.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductPriceListPrice to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPriceListPrice on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceListPrices/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceListPrices.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductPriceListPrice to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceListPrices/{id}",
      "method": "updatePriceListPrices",
      "httpMethod": "patch",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceListPrices.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductPriceListPrice to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPriceListPrice on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "currency_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "price",
          "schema": "number",
          "description": "",
          "example": 4.32
        },
        {
          "name": "product_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_price_list_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceListPrices",
      "method": "getAllPrices",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceListPrices.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProductPriceListPrices are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceListPrices",
      "method": "createPriceListPrice",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceListPrices.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPriceListPrice on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "currency_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "price",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 4.32
        },
        {
          "name": "product_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_price_list_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceListPrices/batch-delete",
      "method": "removeBatchPrices",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceListPrices.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPriceListPrices on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProductPriceListPrices. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductPriceListPrices/batch-modify",
      "method": "priceListPricesBatchModify",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductPriceListPrices.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductPriceListPrices on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProductPriceListPrices. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductTypes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductTypes/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProductType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "form_edit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductTypes",
      "method": "getAllProductTypes",
      "httpMethod": "get",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProductTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductTypes",
      "method": "createNewProductType",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "form_edit",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductTypes/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProductTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProductTypes/batch-modify",
      "method": "modifyBatchProductTypes",
      "httpMethod": "post",
      "tag": "Product",
      "typeScriptTag": "product",
      "description": "ProductTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProductTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProductTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Profiles/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Profiles.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Profile to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Profiles",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Profiles.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Profiles are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProfileSharingClientRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "ProfileSharingClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProfileSharingClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProfileSharingClientRelations",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "ProfileSharingClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProfileSharingClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProfileSharingSalesUnitRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "ProfileSharingSalesUnitRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProfileSharingSalesUnitRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProfileSharingSalesUnitRelations",
      "method": "listRelations",
      "httpMethod": "get",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "ProfileSharingSalesUnitRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProfileSharingSalesUnitRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Projects/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "Projects.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Project to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Project on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Projects/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "Projects.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Project to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Projects/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "Projects.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Project to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Project on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "end_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "start_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revenue_goal",
          "schema": "object",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Projects",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "Projects.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Projects are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Projects",
      "method": "createNewProject",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "Projects.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Project on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "end_date",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "start_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revenue_goal",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Projects/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "Projects.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Projects on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Projects. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Projects/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "Projects.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Projects on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Projects. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectContactRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectContactRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectContactRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectContactRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectContactRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectContactRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectContactRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectContactRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectContactRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectContactRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectContactRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectContactRelations",
      "method": "getAllProjectContactRelations",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectContactRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProjectContactRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectContactRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectContactRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectContactRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectContactRelations/batch-delete",
      "method": "removeRelationsBatch",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectContactRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectContactRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProjectContactRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectContactRelations/batch-modify",
      "method": "modifyRelationsBatch",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectContactRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectContactRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProjectContactRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectDataExRelations/{id}",
      "method": "getExRelationById",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectDataExRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectDataExRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectDataExRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectDataExRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProjectDataExRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectKPIs/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectKPIs.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectKPI to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectKPI on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectKPIs/{id}",
      "method": "getKpi",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectKPIs.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectKPI to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectKPIs/{id}",
      "method": "modifyKpiById",
      "httpMethod": "patch",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectKPIs.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectKPI to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectKPI on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "application_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "kpi",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectKPIs",
      "method": "getAllKpis",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectKPIs.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProjectKPIs are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectKPIs",
      "method": "createNewProjectKpi",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectKPIs.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectKPI on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "application_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "kpi",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectKPIs/batch-delete",
      "method": "removeBatchKpIs",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectKPIs.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectKPIs on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProjectKPIs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectKPIs/batch-modify",
      "method": "modifyBatchProjectKpIs",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectKPIs.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectKPIs on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProjectKPIs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectObjectives/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectObjectives.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectObjective to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectObjective on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectObjectives/{id}",
      "method": "getObjectivesById",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectObjectives.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectObjective to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectObjectives/{id}",
      "method": "modifyObjectives",
      "httpMethod": "patch",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectObjectives.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectObjective to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectObjective on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectObjectives",
      "method": "getAllProjectObjectives",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectObjectives.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProjectObjectives are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectObjectives",
      "method": "createNewObjective",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectObjectives.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectObjective on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "sort_order",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectObjectives/batch-delete",
      "method": "removeBatchProjectObjectives",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectObjectives.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectObjectives on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProjectObjectives. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectObjectives/batch-modify",
      "method": "modifyProjectObjectivesBatch",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectObjectives.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectObjectives on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProjectObjectives. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingClientRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingClientRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectSharingClientRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectSharingClientRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingClientRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectSharingClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingClientRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingClientRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectSharingClientRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectSharingClientRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingClientRelations",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProjectSharingClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingClientRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingClientRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectSharingClientRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingClientRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingClientRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectSharingClientRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProjectSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingClientRelations/batch-modify",
      "method": "modifyBatchProjectSharingClientRelations",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingClientRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectSharingClientRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProjectSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingSalesUnitRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingSalesUnitRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectSharingSalesUnitRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectSharingSalesUnitRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingSalesUnitRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingSalesUnitRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectSharingSalesUnitRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingSalesUnitRelations/{id}",
      "method": "updateRelation",
      "httpMethod": "patch",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingSalesUnitRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectSharingSalesUnitRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectSharingSalesUnitRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingSalesUnitRelations",
      "method": "listRelations",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingSalesUnitRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProjectSharingSalesUnitRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingSalesUnitRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingSalesUnitRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectSharingSalesUnitRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingSalesUnitRelations/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingSalesUnitRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectSharingSalesUnitRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProjectSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectSharingSalesUnitRelations/batch-modify",
      "method": "updateBatch",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectSharingSalesUnitRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectSharingSalesUnitRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProjectSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectTypes/{id}",
      "method": "getTypeById",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectTypes/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ProjectType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "form_edit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "icon",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectTypes",
      "method": "getAllProjectTypes",
      "httpMethod": "get",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ProjectTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectTypes",
      "method": "createNewProjectType",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "form_edit",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "icon",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectTypes/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProjectTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ProjectTypes/batch-modify",
      "method": "modifyBatchProjectTypes",
      "httpMethod": "post",
      "tag": "Project",
      "typeScriptTag": "project",
      "description": "ProjectTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ProjectTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ProjectTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Quotes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "Quotes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Quote to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Quote on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Quotes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "Quotes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Quote to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Quotes/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "Quotes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Quote to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Quote on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "version",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "expiration_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "is_archived",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_currency_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_price_list_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_sections",
          "schema": "object",
          "description": ""
        },
        {
          "name": "quick_account_email",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_phone",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_contact_name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_email",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_phone",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quote_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "reason_of_close_description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "reason_of_close_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "step_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "total_amount",
          "schema": "object",
          "description": ""
        },
        {
          "name": "product_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "is_active_in_opportunity",
          "schema": "boolean",
          "description": "",
          "example": false
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Quotes",
      "method": "getAllQuotes",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "Quotes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Quotes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Quotes",
      "method": "registerNewQuote",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "Quotes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Quote on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "version",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "expiration_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "is_archived",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_currency_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_price_list_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_sections",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "quick_account_email",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_account_phone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_contact_name",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_email",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quick_phone",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "quote_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "reason_of_close_description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "reason_of_close_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "step_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "total_amount",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "product_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "is_active_in_opportunity",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Quotes/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "Quotes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Quotes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Quotes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Quotes/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "Quotes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Quotes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Quotes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteAccountRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteAccountRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteAccountRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteAccountRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteAccountRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteAccountRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteAccountRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteAccountRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteAccountRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteAccountRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteAccountRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteAccountRelations",
      "method": "getAllQuoteAccountRelations",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteAccountRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted QuoteAccountRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteAccountRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteAccountRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteAccountRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteAccountRelations/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteAccountRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteAccountRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteAccountRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteAccountRelations/batch-modify",
      "method": "modifyBatchQuoteAccountRelations",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteAccountRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteAccountRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteAccountRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteContactRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteContactRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteContactRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteContactRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteContactRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteContactRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteContactRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteContactRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteContactRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteContactRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteContactRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteContactRelations",
      "method": "getAllQuoteContactRelations",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteContactRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted QuoteContactRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteContactRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteContactRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteContactRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_primary",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteContactRelations/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteContactRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteContactRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteContactRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteContactRelations/batch-modify",
      "method": "modifyBatchQuoteContactRelations",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteContactRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteContactRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteContactRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteDataExRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteDataExRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteDataExRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteDataExRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteDataExRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteDataExRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteDataExRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteDataExRelations/{id}",
      "method": "updateRelation",
      "httpMethod": "patch",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteDataExRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteDataExRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteDataExRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "data_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "data_set_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteDataExRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteDataExRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted QuoteDataExRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteDataExRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteDataExRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteDataExRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "data_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "data_set_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteDataExRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteDataExRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteDataExRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteDataExRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteDataExRelations/batch-modify",
      "method": "createOrUpdateBatch",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteDataExRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteDataExRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteDataExRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteKPIs/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteKPIs.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteKPI to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteKPI on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteKPIs/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteKPIs.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteKPI to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteKPIs/{id}",
      "method": "modifyKpiById",
      "httpMethod": "patch",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteKPIs.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteKPI to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteKPI on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "application_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "kpi",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteKPIs",
      "method": "getAllKpis",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteKPIs.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted QuoteKPIs are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteKPIs",
      "method": "createNewKpi",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteKPIs.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteKPI on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "application_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "kpi",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteKPIs/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteKPIs.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteKPIs on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteKPIs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteKPIs/batch-modify",
      "method": "createOrUpdateBatchQuoteKpIs",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteKPIs.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteKPIs on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteKPIs. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteProcesses/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteProcesses.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteProcess to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteProcess on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteProcesses/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteProcesses.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteProcess to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteProcesses/{id}",
      "method": "updateProcess",
      "httpMethod": "patch",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteProcesses.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteProcess to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteProcess on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "color",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "steps",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteProcesses",
      "method": "getAllProcesses",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteProcesses.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted QuoteProcesses are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteProcesses",
      "method": "createQuoteProcess",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteProcesses.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteProcess on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "color",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "steps",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteProcesses/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteProcesses.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteProcesses on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteProcesses. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteProcesses/batch-modify",
      "method": "processBatchModify",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteProcesses.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteProcesses on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteProcesses. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingClientRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingClientRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteSharingClientRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteSharingClientRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingClientRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteSharingClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingClientRelations/{id}",
      "method": "updateRelation",
      "httpMethod": "patch",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingClientRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteSharingClientRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteSharingClientRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingClientRelations",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted QuoteSharingClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingClientRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingClientRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteSharingClientRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingClientRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingClientRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteSharingClientRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingClientRelations/batch-modify",
      "method": "createOrUpdateBatch",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingClientRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteSharingClientRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingSalesUnitRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingSalesUnitRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteSharingSalesUnitRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteSharingSalesUnitRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingSalesUnitRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingSalesUnitRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteSharingSalesUnitRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingSalesUnitRelations/{id}",
      "method": "updateRelation",
      "httpMethod": "patch",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingSalesUnitRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteSharingSalesUnitRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteSharingSalesUnitRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingSalesUnitRelations",
      "method": "listRelations",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingSalesUnitRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted QuoteSharingSalesUnitRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingSalesUnitRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingSalesUnitRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteSharingSalesUnitRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingSalesUnitRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingSalesUnitRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteSharingSalesUnitRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteSharingSalesUnitRelations/batch-modify",
      "method": "batchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteSharingSalesUnitRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteSharingSalesUnitRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteTypes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteTypes/{id}",
      "method": "updateById",
      "httpMethod": "patch",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of QuoteType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "form_edit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "form_lost",
          "schema": "object",
          "description": ""
        },
        {
          "name": "form_lost_enabled",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "quote_process_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteTypes",
      "method": "getAllQuoteTypes",
      "httpMethod": "get",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted QuoteTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteTypes",
      "method": "createNewType",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "form_edit",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "form_lost",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "form_lost_enabled",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "quote_process_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteTypes/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/QuoteTypes/batch-modify",
      "method": "modifyBatchQuoteTypes",
      "httpMethod": "post",
      "tag": "Quote",
      "typeScriptTag": "quote",
      "description": "QuoteTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of QuoteTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for QuoteTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Reports/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "Reports.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Report to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Reports",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "Reports.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Reports are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportFolders/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportFolders.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ReportFolder to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportFolders",
      "method": "getAllReportFolders",
      "httpMethod": "get",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportFolders.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ReportFolders are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportSchedules/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportSchedules.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ReportSchedule to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ReportSchedule on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportSchedules/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportSchedules.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ReportSchedule to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportSchedules/{id}",
      "method": "modifySchedule",
      "httpMethod": "patch",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportSchedules.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ReportSchedule to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ReportSchedule on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "report_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportSchedules",
      "method": "getAllReportSchedules",
      "httpMethod": "get",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportSchedules.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ReportSchedules are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportSchedules",
      "method": "createNewReportSchedule",
      "httpMethod": "post",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportSchedules.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ReportSchedule on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "report_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "settings",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportSchedules/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportSchedules.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ReportSchedules on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ReportSchedules. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportSchedules/batch-modify",
      "method": "modifyBatchReportSchedules",
      "httpMethod": "post",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportSchedules.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of ReportSchedules on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for ReportSchedules. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportSharingClientRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportSharingClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ReportSharingClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportSharingClientRelations",
      "method": "getAllClientRelations",
      "httpMethod": "get",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportSharingClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ReportSharingClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportSharingSalesUnitRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportSharingSalesUnitRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of ReportSharingSalesUnitRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/ReportSharingSalesUnitRelations",
      "method": "listSalesUnitRelations",
      "httpMethod": "get",
      "tag": "Report",
      "typeScriptTag": "report",
      "description": "ReportSharingSalesUnitRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted ReportSharingSalesUnitRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesRoles/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "SalesRole",
      "typeScriptTag": "salesRole",
      "description": "SalesRoles.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of SalesRole to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of SalesRole on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesRoles/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "SalesRole",
      "typeScriptTag": "salesRole",
      "description": "SalesRoles.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of SalesRole to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesRoles/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "SalesRole",
      "typeScriptTag": "salesRole",
      "description": "SalesRoles.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of SalesRole to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of SalesRole on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "color_code",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesRoles",
      "method": "getAllRoles",
      "httpMethod": "get",
      "tag": "SalesRole",
      "typeScriptTag": "salesRole",
      "description": "SalesRoles.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted SalesRoles are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesRoles",
      "method": "createNewRole",
      "httpMethod": "post",
      "tag": "SalesRole",
      "typeScriptTag": "salesRole",
      "description": "SalesRoles.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of SalesRole on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "color_code",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesRoles/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "SalesRole",
      "typeScriptTag": "salesRole",
      "description": "SalesRoles.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of SalesRoles on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for SalesRoles. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesRoles/batch-modify",
      "method": "modifyBatchSalesRoles",
      "httpMethod": "post",
      "tag": "SalesRole",
      "typeScriptTag": "salesRole",
      "description": "SalesRoles.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of SalesRoles on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for SalesRoles. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesUnits/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "SalesUnit",
      "typeScriptTag": "salesUnit",
      "description": "SalesUnits.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of SalesUnit to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of SalesUnit on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesUnits/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "SalesUnit",
      "typeScriptTag": "salesUnit",
      "description": "SalesUnits.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of SalesUnit to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesUnits/{id}",
      "method": "modifyByIds",
      "httpMethod": "patch",
      "tag": "SalesUnit",
      "typeScriptTag": "salesUnit",
      "description": "SalesUnits.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of SalesUnit to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of SalesUnit on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "picture",
          "schema": "object",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "parent_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "picture_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesUnits",
      "method": "listAll",
      "httpMethod": "get",
      "tag": "SalesUnit",
      "typeScriptTag": "salesUnit",
      "description": "SalesUnits.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted SalesUnits are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesUnits",
      "method": "generateNew",
      "httpMethod": "post",
      "tag": "SalesUnit",
      "typeScriptTag": "salesUnit",
      "description": "SalesUnits.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of SalesUnit on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "picture",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "parent_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "picture_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesUnits/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "SalesUnit",
      "typeScriptTag": "salesUnit",
      "description": "SalesUnits.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of SalesUnits on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for SalesUnits. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesUnits/batch-modify",
      "method": "modifyBatchSalesUnits",
      "httpMethod": "post",
      "tag": "SalesUnit",
      "typeScriptTag": "salesUnit",
      "description": "SalesUnits.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of SalesUnits on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for SalesUnits. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesUnitClientRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "SalesUnit",
      "typeScriptTag": "salesUnit",
      "description": "SalesUnitClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of SalesUnitClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/SalesUnitClientRelations",
      "method": "getAllRelations",
      "httpMethod": "get",
      "tag": "SalesUnit",
      "typeScriptTag": "salesUnit",
      "description": "SalesUnitClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted SalesUnitClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Steps/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "Steps.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Step to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Step on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Steps/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "Steps.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Step to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Steps/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "Steps.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Step to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Step on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "has_readonly_form",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "has_version_increment",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "lead_process_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "percent",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "quote_process_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "timeframe",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "step_checklists",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Steps",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "Steps.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Steps are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Steps",
      "method": "addNew",
      "httpMethod": "post",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "Steps.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Step on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "has_readonly_form",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "has_version_increment",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "lead_process_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "percent",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "pipeline_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_process_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "timeframe",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "step_checklists",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Steps/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "Steps.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Steps on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Steps. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Steps/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "Steps.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Steps on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Steps. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklists/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklists.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of StepChecklist to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of StepChecklist on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklists/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklists.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of StepChecklist to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklists/{id}",
      "method": "modifyChecklistById",
      "httpMethod": "patch",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklists.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of StepChecklist to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of StepChecklist on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "cloud_object_template",
          "schema": "object",
          "description": ""
        },
        {
          "name": "activity_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "cloud_object_format",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "cloud_object_template_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_sequence_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "field_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "item_type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "item_validation",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "label",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "label_use_lang",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "process_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "send_email_field_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "send_email_template_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "step_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "visibility_condition",
          "schema": "string",
          "description": "",
          "example": "blob"
        },
        {
          "name": "visibility_type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "sales_roles",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklists",
      "method": "getAllStepChecklists",
      "httpMethod": "get",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklists.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted StepChecklists are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklists",
      "method": "createStepChecklist",
      "httpMethod": "post",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklists.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of StepChecklist on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "cloud_object_template",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "activity_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "cloud_object_format",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "cloud_object_template_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "email_sequence_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "field_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "item_type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "item_validation",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "label_use_lang",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "process_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "send_email_field_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "send_email_template_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "step_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "visibility_condition",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "blob"
        },
        {
          "name": "visibility_type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "sales_roles",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklists/batch-delete",
      "method": "removeBatchByIds",
      "httpMethod": "post",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklists.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of StepChecklists on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for StepChecklists. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklists/batch-modify",
      "method": "modifyBatchChecklists",
      "httpMethod": "post",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklists.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of StepChecklists on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for StepChecklists. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklistSalesRoleRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklistSalesRoleRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of StepChecklistSalesRoleRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of StepChecklistSalesRoleRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklistSalesRoleRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklistSalesRoleRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of StepChecklistSalesRoleRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklistSalesRoleRelations/{id}",
      "method": "modifySalesRoleRelations",
      "httpMethod": "patch",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklistSalesRoleRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of StepChecklistSalesRoleRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of StepChecklistSalesRoleRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "sales_role_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "step_checklist_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklistSalesRoleRelations",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklistSalesRoleRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted StepChecklistSalesRoleRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklistSalesRoleRelations",
      "method": "createRelation",
      "httpMethod": "post",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklistSalesRoleRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of StepChecklistSalesRoleRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "sales_role_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "step_checklist_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklistSalesRoleRelations/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklistSalesRoleRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of StepChecklistSalesRoleRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for StepChecklistSalesRoleRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/StepChecklistSalesRoleRelations/batch-modify",
      "method": "modifyBatchStepChecklistSalesRoleRelations",
      "httpMethod": "post",
      "tag": "Step",
      "typeScriptTag": "step",
      "description": "StepChecklistSalesRoleRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of StepChecklistSalesRoleRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for StepChecklistSalesRoleRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tags/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "Tags.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Tag to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Tag on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tags/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "Tags.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Tag to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tags/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "Tags.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Tag to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Tag on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "color",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "creator_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "use_lang",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tags",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "Tags.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Tags are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tags",
      "method": "addNew",
      "httpMethod": "post",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "Tags.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Tag on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "color",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "creator_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "supported_entities",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "use_lang",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tags/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "Tags.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Tags on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Tags. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tags/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "Tags.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Tags on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Tags. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TagRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "TagRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TagRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TagRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TagRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "TagRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TagRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TagRelations/{id}",
      "method": "modifyTagRelations",
      "httpMethod": "patch",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "TagRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TagRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TagRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "tag_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TagRelations",
      "method": "getAllTagRelations",
      "httpMethod": "get",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "TagRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted TagRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TagRelations",
      "method": "createNewTagRelation",
      "httpMethod": "post",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "TagRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TagRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "tag_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TagRelations/batch-delete",
      "method": "removeBatchTagRelations",
      "httpMethod": "post",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "TagRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TagRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TagRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TagRelations/batch-modify",
      "method": "modifyBatchTagRelations",
      "httpMethod": "post",
      "tag": "Tag",
      "typeScriptTag": "tag",
      "description": "TagRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TagRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TagRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Targets/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "Targets.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Target to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Target on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Targets/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "Targets.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Target to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Targets/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "Targets.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Target to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Target on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "calculation_type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "is_active",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "period_from",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "period_to",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "target_client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "type",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "child_targets",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Targets",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "Targets.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Targets are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Targets",
      "method": "createNew",
      "httpMethod": "post",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "Targets.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Target on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "calculation_type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "is_active",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "period_from",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "period_to",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "target_client_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "child_targets",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Targets/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "Targets.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Targets on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Targets. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Targets/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "Targets.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Targets on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Targets. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TargetRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "TargetRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TargetRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TargetRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TargetRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "TargetRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TargetRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TargetRelations/{id}",
      "method": "modifyByIds",
      "httpMethod": "patch",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "TargetRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TargetRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TargetRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "group_target_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "user_target_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TargetRelations",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "TargetRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted TargetRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TargetRelations",
      "method": "createNewRelation",
      "httpMethod": "post",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "TargetRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TargetRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "group_target_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "user_target_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TargetRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "TargetRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TargetRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TargetRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TargetRelations/batch-modify",
      "method": "modifyBatchRelations",
      "httpMethod": "post",
      "tag": "Target",
      "typeScriptTag": "target",
      "description": "TargetRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TargetRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TargetRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tasks/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Tasks.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Task to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Task on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tasks/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Tasks.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Task to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tasks/{id}",
      "method": "modifyTask",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Tasks.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Task to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Task on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "activity_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "call_duration",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "call_outcome_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "due_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "duration",
          "schema": "number",
          "description": "",
          "example": 4.32
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "priority",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "start_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "subject",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "lead_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "opportunity_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "project_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "custom_entity_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "exchange_entity_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "gapi_entity_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "o365_entity_id",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "task_recurrence",
          "schema": "object",
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "comments",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tasks",
      "method": "getAllDefinedTasks",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Tasks.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Tasks are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tasks",
      "method": "addTask",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Tasks.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Task on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "activity_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "call_duration",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "call_outcome_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "due_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "duration",
          "schema": "number",
          "required": false,
          "description": "",
          "example": 4.32
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "priority",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "share_mode",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "start_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "subject",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "sharing_units",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharing_clients",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "lead_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "opportunity_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "project_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "custom_entity_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "reminder",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "task_recurrence",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "comments",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tasks/batch-delete",
      "method": "removeBatchTasks",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Tasks.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Tasks on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Tasks. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Tasks/batch-modify",
      "method": "batchModifyTasks",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "Tasks.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Tasks on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Tasks. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskRecurrences/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskRecurrences.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskRecurrence to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskRecurrence on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskRecurrences/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskRecurrences.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskRecurrence to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskRecurrences/{id}",
      "method": "modifyTaskRecurrence",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskRecurrences.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskRecurrence to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskRecurrence on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "apply_recurrence",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "day",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "day_of_week",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "end_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "month",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "occur_every",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "occurrences_count",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "start_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "task_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "week",
          "schema": "integer",
          "description": "",
          "example": -1
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskRecurrences",
      "method": "getAllTaskRecurrences",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskRecurrences.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted TaskRecurrences are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskRecurrences",
      "method": "createTaskRecurrence",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskRecurrences.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskRecurrence on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "apply_recurrence",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "day",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "day_of_week",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "end_date",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "month",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "occur_every",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "occurrences_count",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "start_date",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2019-01-01"
        },
        {
          "name": "task_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "week",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": -1
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskRecurrences/batch-delete",
      "method": "removeTaskRecurrences",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskRecurrences.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskRecurrences on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TaskRecurrences. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskRecurrences/batch-modify",
      "method": "modifyBatchTaskRecurrences",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskRecurrences.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskRecurrences on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TaskRecurrences. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskReminders/{id}",
      "method": "removeTaskReminder",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskReminders.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskReminder to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskReminder on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskReminders/{id}",
      "method": "getTaskReminder",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskReminders.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskReminder to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskReminders/{id}",
      "method": "modifyTaskReminder",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskReminders.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskReminder to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskReminder on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "owner_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "set_date",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "task_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskReminders",
      "method": "getAllTaskReminders",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskReminders.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted TaskReminders are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskReminders",
      "method": "action",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskReminders.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskReminder on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "owner_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "set_date",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "task_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskReminders/batch-delete",
      "method": "removeTaskReminders",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskReminders.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskReminders on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TaskReminders. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskReminders/batch-modify",
      "method": "modifyTaskBatch",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskReminders.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskReminders on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TaskReminders. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingClientRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingClientRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskSharingClientRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskSharingClientRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingClientRelations/{id}",
      "method": "getTaskSharingClientRelation",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingClientRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskSharingClientRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingClientRelations/{id}",
      "method": "modifyRelation",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingClientRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskSharingClientRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskSharingClientRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "task_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingClientRelations",
      "method": "getAllTaskSharingClientRelations",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingClientRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted TaskSharingClientRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingClientRelations",
      "method": "createNewTaskSharingClientRelation",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingClientRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskSharingClientRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "task_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingClientRelations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingClientRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskSharingClientRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TaskSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingClientRelations/batch-modify",
      "method": "createOrUpdateBatch",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingClientRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskSharingClientRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TaskSharingClientRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingSalesUnitRelations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingSalesUnitRelations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskSharingSalesUnitRelation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskSharingSalesUnitRelation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingSalesUnitRelations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingSalesUnitRelations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskSharingSalesUnitRelation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingSalesUnitRelations/{id}",
      "method": "updateTaskSharingSalesUnitRelation",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingSalesUnitRelations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskSharingSalesUnitRelation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskSharingSalesUnitRelation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "role",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "task_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingSalesUnitRelations",
      "method": "listTaskSharingSalesUnitRelations",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingSalesUnitRelations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted TaskSharingSalesUnitRelations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingSalesUnitRelations",
      "method": "createTaskSharingSalesUnitRelation",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingSalesUnitRelations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskSharingSalesUnitRelation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "role",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "task_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "unit_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingSalesUnitRelations/batch-delete",
      "method": "removeBatchTaskSharingSalesUnitRelations",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingSalesUnitRelations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskSharingSalesUnitRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TaskSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskSharingSalesUnitRelations/batch-modify",
      "method": "batchCreateOrUpdateTaskSharingSalesUnitRelations",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskSharingSalesUnitRelations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskSharingSalesUnitRelations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TaskSharingSalesUnitRelations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskTypes/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskTypes.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskType to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskType on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskTypes/{id}",
      "method": "getTaskType",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskTypes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskType to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskTypes/{id}",
      "method": "modifyTaskType",
      "httpMethod": "patch",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskTypes.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TaskType to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskType on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "form_edit",
          "schema": "object",
          "description": ""
        },
        {
          "name": "icon",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskTypes",
      "method": "getAllTaskTypes",
      "httpMethod": "get",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskTypes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted TaskTypes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskTypes",
      "method": "createTaskType",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskTypes.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskType on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "form_edit",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "icon",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "is_readonly",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskTypes/batch-delete",
      "method": "removeBatchTaskTypes",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskTypes.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskTypes on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TaskTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TaskTypes/batch-modify",
      "method": "modifyTaskTypesBatch",
      "httpMethod": "post",
      "tag": "Activity",
      "typeScriptTag": "activity",
      "description": "TaskTypes.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TaskTypes on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TaskTypes. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessages/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessages.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TextMessage to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessage on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessages/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessages.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TextMessage to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessages/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessages.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TextMessage to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessage on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "content",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "datetime_sent",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "direction",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "message_sid",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "status",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "text_message_conversation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessages",
      "method": "getAllTextMessages",
      "httpMethod": "get",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessages.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted TextMessages are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessages",
      "method": "createNewTextMessage",
      "httpMethod": "post",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessages.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessage on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "content",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "datetime_sent",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "direction",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "message_sid",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "status",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "text_message_conversation_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessages/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessages.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessages on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TextMessages. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessages/batch-modify",
      "method": "modifyBatchTextMessages",
      "httpMethod": "post",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessages.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessages on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TextMessages. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TextMessageConversation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessageConversation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TextMessageConversation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversations/{id}",
      "method": "modifyConversation",
      "httpMethod": "patch",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TextMessageConversation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessageConversation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "phone_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "recipient_account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "recipient_contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "recipient_phone_number",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "messages",
          "schema": "array",
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "project_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "lead_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "opportunity_relations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversations",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted TextMessageConversations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversations",
      "method": "createConversation",
      "httpMethod": "post",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessageConversation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "phone_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "recipient_account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "recipient_contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "recipient_phone_number",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "messages",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "account_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "contact_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "project_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "lead_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "opportunity_relations",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "quote_relations",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversations/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessageConversations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TextMessageConversations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversations/batch-modify",
      "method": "createOrUpdateBatchTextMessageConversations",
      "httpMethod": "post",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessageConversations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TextMessageConversations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversationRelationses/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversationRelationses.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TextMessageConversationRelations to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessageConversationRelations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversationRelationses/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversationRelationses.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TextMessageConversationRelations to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversationRelationses/{id}",
      "method": "updateById",
      "httpMethod": "patch",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversationRelationses.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of TextMessageConversationRelations to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessageConversationRelations on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "text_message_conversation_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversationRelationses",
      "method": "listTextMessageConversationRelationses",
      "httpMethod": "get",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversationRelationses.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted TextMessageConversationRelationses are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversationRelationses",
      "method": "createRelations",
      "httpMethod": "post",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversationRelationses.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessageConversationRelations on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "lead_oppty_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "quote_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "text_message_conversation_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversationRelationses/batch-delete",
      "method": "removeByIds",
      "httpMethod": "post",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversationRelationses.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessageConversationRelationses on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TextMessageConversationRelationses. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/TextMessageConversationRelationses/batch-modify",
      "method": "batchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Text",
      "typeScriptTag": "text",
      "description": "TextMessageConversationRelationses.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of TextMessageConversationRelationses on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for TextMessageConversationRelationses. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Timeframes/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Timeframe",
      "typeScriptTag": "timeframe",
      "description": "Timeframes.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Timeframe to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Timeframes",
      "method": "listAllDefined",
      "httpMethod": "get",
      "tag": "Timeframe",
      "typeScriptTag": "timeframe",
      "description": "Timeframes.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Timeframes are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Translations/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Translation",
      "typeScriptTag": "translation",
      "description": "Translations.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Translation to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Translation on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Translations/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Translation",
      "typeScriptTag": "translation",
      "description": "Translations.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Translation to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Translations/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Translation",
      "typeScriptTag": "translation",
      "description": "Translations.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Translation to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Translation on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "account_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "appointment_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "data_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "de_de",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "en_us",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "es_es",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "field_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "form_type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "label_type",
          "schema": "integer",
          "description": "",
          "example": 0
        },
        {
          "name": "lead_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_product_relation_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "pt_br",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "task_type_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Translations",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Translation",
      "typeScriptTag": "translation",
      "description": "Translations.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Translations are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Translations",
      "method": "createNewTranslation",
      "httpMethod": "post",
      "tag": "Translation",
      "typeScriptTag": "translation",
      "description": "Translations.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Translation on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "account_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "appointment_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "contact_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "data_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "de_de",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "en_us",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "es_es",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "field_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "form_type",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 0
        },
        {
          "name": "label_type",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 0
        },
        {
          "name": "lead_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_product_relation_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "oppty_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "product_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "project_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "pt_br",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "task_type_id",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Translations/batch-delete",
      "method": "removeById",
      "httpMethod": "post",
      "tag": "Translation",
      "typeScriptTag": "translation",
      "description": "Translations.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Translations on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Translations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Translations/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Translation",
      "typeScriptTag": "translation",
      "description": "Translations.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Translations on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Translations. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Types/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Type",
      "typeScriptTag": "type",
      "description": "Types.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Type to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Types",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Type",
      "typeScriptTag": "type",
      "description": "Types.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Types are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/UnsubscribedPhones/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Unsubscribed",
      "typeScriptTag": "unsubscribed",
      "description": "UnsubscribedPhones.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of UnsubscribedPhone to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of UnsubscribedPhone on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/UnsubscribedPhones/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Unsubscribed",
      "typeScriptTag": "unsubscribed",
      "description": "UnsubscribedPhones.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of UnsubscribedPhone to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/UnsubscribedPhones/{id}",
      "method": "updatePhone",
      "httpMethod": "patch",
      "tag": "Unsubscribed",
      "typeScriptTag": "unsubscribed",
      "description": "UnsubscribedPhones.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of UnsubscribedPhone to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of UnsubscribedPhone on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "phone",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/UnsubscribedPhones",
      "method": "getAllPhones",
      "httpMethod": "get",
      "tag": "Unsubscribed",
      "typeScriptTag": "unsubscribed",
      "description": "UnsubscribedPhones.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted UnsubscribedPhones are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/UnsubscribedPhones",
      "method": "registerNewPhone",
      "httpMethod": "post",
      "tag": "Unsubscribed",
      "typeScriptTag": "unsubscribed",
      "description": "UnsubscribedPhones.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of UnsubscribedPhone on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "phone",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/UnsubscribedPhones/batch-delete",
      "method": "removeBatchPhones",
      "httpMethod": "post",
      "tag": "Unsubscribed",
      "typeScriptTag": "unsubscribed",
      "description": "UnsubscribedPhones.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of UnsubscribedPhones on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for UnsubscribedPhones. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/UnsubscribedPhones/batch-modify",
      "method": "processBatchCreateOrUpdate",
      "httpMethod": "post",
      "tag": "Unsubscribed",
      "typeScriptTag": "unsubscribed",
      "description": "UnsubscribedPhones.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of UnsubscribedPhones on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for UnsubscribedPhones. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webhooks/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "Webhooks.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Webhook to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Webhook on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webhooks/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "Webhooks.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Webhook to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webhooks/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "Webhooks.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Webhook to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Webhook on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "insecure_ssl",
          "schema": "boolean",
          "description": "",
          "example": false
        },
        {
          "name": "options",
          "schema": "object",
          "description": ""
        },
        {
          "name": "signature",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "events",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webhooks",
      "method": "getAllDefined",
      "httpMethod": "get",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "Webhooks.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Webhooks are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webhooks",
      "method": "createNew",
      "httpMethod": "post",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "Webhooks.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Webhook on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "insecure_ssl",
          "schema": "boolean",
          "required": true,
          "description": "",
          "example": false
        },
        {
          "name": "options",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "signature",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "events",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webhooks/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "Webhooks.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Webhooks on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Webhooks. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webhooks/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "Webhooks.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Webhooks on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Webhooks. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/WebhookEvents/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "WebhookEvents.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of WebhookEvent to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of WebhookEvent on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/WebhookEvents/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "WebhookEvents.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of WebhookEvent to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/WebhookEvents/{id}",
      "method": "modifyEvent",
      "httpMethod": "patch",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "WebhookEvents.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of WebhookEvent to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of WebhookEvent on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "event",
          "schema": "string",
          "description": "",
          "example": "*"
        },
        {
          "name": "webhook_id",
          "schema": "string",
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/WebhookEvents",
      "method": "getAllEvents",
      "httpMethod": "get",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "WebhookEvents.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted WebhookEvents are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/WebhookEvents",
      "method": "createNewEvent",
      "httpMethod": "post",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "WebhookEvents.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of WebhookEvent on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "event",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "*"
        },
        {
          "name": "webhook_id",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "01234567-abcd-dcba-ffff-000000000000"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/WebhookEvents/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "WebhookEvents.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of WebhookEvents on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for WebhookEvents. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/WebhookEvents/batch-modify",
      "method": "batchModifyEvents",
      "httpMethod": "post",
      "tag": "Webhook",
      "typeScriptTag": "webhook",
      "description": "WebhookEvents.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of WebhookEvents on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for WebhookEvents. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webresources/{id}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "Webresource",
      "typeScriptTag": "webresource",
      "description": "Webresources.delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Webresource to delete",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Webresource on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webresources/{id}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "Webresource",
      "typeScriptTag": "webresource",
      "description": "Webresources.get",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Webresource to retrieve",
          "example": "ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webresources/{id}",
      "method": "modifyById",
      "httpMethod": "patch",
      "tag": "Webresource",
      "typeScriptTag": "webresource",
      "description": "Webresources.update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Webresource to update",
          "example": "ID"
        },
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Webresource on update. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "display_param",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "entity",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "name",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "request_method",
          "schema": "integer",
          "description": "",
          "example": 1
        },
        {
          "name": "url",
          "schema": "string",
          "description": "",
          "example": "string"
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webresources",
      "method": "getAll",
      "httpMethod": "get",
      "tag": "Webresource",
      "typeScriptTag": "webresource",
      "description": "Webresources.list",
      "parameters": [
        {
          "name": "includeDeleted",
          "schema": "boolean",
          "required": false,
          "description": "if enabled, deleted Webresources are returned as well"
        },
        {
          "name": "first",
          "schema": "integer",
          "required": false,
          "description": "Number of entities to return from beginning of the result set. Max: 100. Default: 30"
        },
        {
          "name": "last",
          "schema": "integer",
          "required": false,
          "description": "Return only the \"last\" number of entities from result set. When used with first parameter, then it returns last M records from the first N records."
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Cursor until which to take entities to result set."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Cursor after which to start taking entities to result set."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "Expand related entity. Use api_names of relation fields. You can use multiple values separated via ',' colon. If not used, URI link will be returned instead. You can use dots '.' to expand nested entities as well.",
          "example": "expand=owner,sales_unit,account_relations.account"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "Order by values. Use api_name of field to sort by ascending. Prefix api_name with '-' to descending sort. You can use multiple values separated via ',' colon.",
          "example": "order-by=created,-modified"
        },
        {
          "name": "filter",
          "schema": "object",
          "required": false,
          "description": "Use name of field in braces to filter by this field. To advanced filter, use with combination with filter-op parameter.",
          "example": "filter[name]=Example"
        },
        {
          "name": "filterOp",
          "schema": "object",
          "required": false,
          "description": "Filter operator. Specify a way how to filter fields. Supported operators: [eq, ieq, not-eq, not-ieq, contains, starts, ends, icontains, istarts, iends, null, not-null, empty, not-empty, gt, gte, lt, lte, between].",
          "example": "filter-op[name]=eq"
        },
        {
          "name": "loadOnly",
          "schema": "string",
          "required": false,
          "description": "Loads only fields defined within this parameter. You can use multiple values separated via ',' colon. If not used, then all fields are returned. You can use dots '.' to specify load only fields in nested as well.",
          "example": "load-only=id,name,owner.id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webresources",
      "method": "createNewWebresource",
      "httpMethod": "post",
      "tag": "Webresource",
      "typeScriptTag": "webresource",
      "description": "Webresources.create",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Webresource on create. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "modified",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "created",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "2019-01-01T00:00:00"
        },
        {
          "name": "display_param",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 1
        },
        {
          "name": "entity",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "string"
        },
        {
          "name": "request_method",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": "",
          "example": "string"
        },
        {
          "name": "is_published",
          "schema": "boolean",
          "required": false,
          "description": "",
          "example": false
        },
        {
          "name": "revision",
          "schema": "integer",
          "required": false,
          "description": "",
          "example": 1
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webresources/batch-delete",
      "method": "removeBatch",
      "httpMethod": "post",
      "tag": "Webresource",
      "typeScriptTag": "webresource",
      "description": "Webresources.batch_delete",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Webresources on delete. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Webresources. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/entities/Webresources/batch-modify",
      "method": "batchModify",
      "httpMethod": "post",
      "tag": "Webresource",
      "typeScriptTag": "webresource",
      "description": "Webresources.batch_create_or_update",
      "parameters": [
        {
          "name": "validationLevel",
          "schema": "integer",
          "description": "Specify validation level of Webresources on change. Use them as bit mask: 0 - validate each field on entity,\n2 - validate only changed fields, 4 - validate only system fields, 8 - allows to override readonly fields,\n16 - allows to set entity on deleted relationship."
        },
        {
          "name": "rollbackMethod",
          "schema": "integer",
          "description": "Specify rollback method for Webresources. 0 - rollback all, 1 - rollback only failed records."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    }
  ],
  "repositoryDescription": "Pipeliner revolutionizes CRM with unique visual interface, no-code automation, dynamic insights. Offers high adoption rates, lower costs, rapid ROI, and integrated sales content. Pipeliner's {language} SDK generated by Konfig (https://konfigthis.com/).",
  "logo": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/pipeliner/logo.png",
  "openApiRaw": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/pipeliner/openapi.yaml",
  "openApiGitHubUi": "https://github.com/konfig-sdks/openapi-examples/tree/HEAD/pipeliner/openapi.yaml",
  "previewLinkImage": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/pipeliner/imagePreview.jpg",
  "faviconUrl": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/pipeliner/favicon.png",
  "clientNameCamelCase": "pipeliner",
  "lastUpdated": "2024-03-27T20:53:56.655Z",
  "typescriptSdkUsageCode": "import { Pipeliner } from 'pipeliner-typescript-sdk';\n\nconst pipeliner = new Pipeliner()",
  "typescriptSdkFirstRequestCode": "// Accounts.delete\nconst removeByIdResponse = pipeliner.account.removeById({\n    id: \"ID\"\n})",
  "fixedSpecFileName": "pipeliner-fixed-spec.yaml"
}