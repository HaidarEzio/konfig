{
  "securitySchemes": {
    "ApiKeyAuth": {
      "description": "Protected requests expect the `Authorization` header with a bearer token respecting the format `Bearer $ACCESS_TOKEN`.\n\nThis **documentation is interactive**: set your `access_token` here and test all requests directly from your browser\n(`access_token` must be formatted as `Bearer $ACCESS_TOKEN`).\nOr set it individually for each request, in the `Authorization` header.\n\n\n### Introduction\nThe API requires an `access_token` for every request (except [/ping](https://storage.googleapis.com)).\n\nStep-by-step:\n1. [Ask Ducky](mailto:api@ducky.eco) for a `CLIENT_ID` and a `CLIENT_SECRET`\n2. Negotiate an `access_token` with Auth0\n3. Send authenticated requests to Ducky API\n\nKeep reading to learn how to obtain an `access_token` and use it to perform requests.\n\n---\n\n### Prerequisite\nTo use the API, you have to get `CLIENT_ID` and a `CLIENT_SECRET`.\nTo do so, please contact Ducky at [api@ducky.eco](mailto:api@ducky.eco).\n\n> Note: even without an `access_token`, you can browse the documentation and explore its possibilities by looking at the example outputs.\n\n\n### Getting an access token\n#### Request\nAuthentication is provided by Auth0. Before using Ducky API, you send a query to Auth0, asking for an `access_token`.\n\nTo negotiate an `access_token`, send a request based on this curl snippet (update it with your `$CLIENT_ID`& `$CLIENT_SECRET`):\n\n```shell\ncurl --request POST \\\n  --url https://ducky-prod.eu.auth0.com/oauth/token \\\n  --header 'content-type: application/json' \\\n  --data '{\"client_id\":\"$CLIENT_ID\",\"client_secret\":\"$CLIENT_SECRET\",\"audience\":\"ducky-api-prod\",\"grant_type\":\"client_credentials\"}'\n```\n\n#### Response\nThe response contains an `access_token` and an expiration time. You should store both and use the `access_token` until its expiration date. After expiration, repeat the process above to negotiate a new token.\n\n```json\n{\n  \"access_token\": \"example_access_token\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 86400\n}\n```\n```\n\n### Usage\nNow that you have an `access_token`, you can start using the Ducky API.\nSend the `access_token` with each request, in an `Authorization` header.\nMake sure to prefix it with the `token_type` which is always `Bearer`.\n\n##### Example\nTo make sure you're ready to use the API, you can use the [/ping/protected endpoint](https://storage.googleapis.com).\nIt validates your `access_token` and checks if the API is ready to accept connections.\n\n```shell\ncurl --request GET \\\n  --url https://api.ducky.eco/v3/ping/protected \\\n  --header 'authorization: Bearer example_access_token'\n```\n",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "apiBaseUrl": "https://api.ducky.eco/v3",
  "apiVersion": "3.0.0",
  "apiDescription": "Ducky Data's APIs provide footprint data for a wide variety of products and circular services, as well as individuals, and consumption-based emissions for municipalities and other administrative units.\n\nThe endpoints are divided by functionality. \nThe Calculate endpoints compute the footprint of an individual based on their habits and other lifestyle data. \nThe Change endpoint generates climate friendly tips based on the user's habits, and can be used to nudge the user towards sutainable behavioral change.\nThe Compare endpoints return the average footprint of a citizen in a given area (municipality or BSU).\nThe Convert endpoints turn physical data like energy use or transaction amount into climate footprint.\nReporting endpoints are for calculating scope 1 & 2 emissions according to the GHG protocol.\nThe Track endpoints returns the values of indicators (drivers of footprint) for a given area (municipality or BSU).\nThe Translate endpoints contextualize a given quantity of CO2e by expressing them in something more tangible, like a flight trip.\n\nIn the description of each endpoint, you will find the link to a user documentation page detailing the sources and calculation principles.\nAll of our user documentation pages can be found [here](https://support.ducky.eco/en/ducky-insights#introduction-to-ducky-insights).\n\n### Base URL\nThe API is served over HTTPS.\nThe section [API Servers](https://storage.googleapis.com) indicates the base URLs for all requests in the documentation.\n\n### Authentication\nThe API requires [authentication](https://storage.googleapis.com). You have to negotiate an `access_token` and send it with every request, in the `authorization` header.\n\nStep-by-step:\n1. [Email Ducky to request](mailto:api@ducky.eco) a `CLIENT_ID` and a `CLIENT_SECRET`\n2. Negotiate an `access_token` with Auth0\n3. Send authenticated requests to Ducky API\n\nLearn in detail how to negotiate and use an `access_token` in the [Authentication section](https://storage.googleapis.com).\n",
  "apiTitle": "Ducky Data V3 - climate data APIs",
  "endpoints": 22,
  "sdkMethods": 22,
  "schemas": 80,
  "parameters": 71,
  "originalCustomRequest": {
    "type": "GET",
    "url": "https://storage.googleapis.com/doc.api.ducky.eco/api-v3.json"
  },
  "customRequestSpecFilename": "ducky.eco.yaml",
  "difficultyScore": 78.75,
  "difficulty": "Easy",
  "company": "Ducky",
  "sdkName": "ducky-{language}-sdk",
  "clientName": "Ducky",
  "metaDescription": "Hello there! üëãüèº We're Ducky, climate enthusiasts passionate about steering the world towards data-driven climate action. We empower YOU to seamlessly track, reduce, and report your climate emissions with our intuitive software solutions.\n\nüí™üèº So far, we've assisted over 300 organisations and 90,000 individuals worldwide in becoming more sustainable ‚Äì and we'd love to help you, too!\n\nWould any of our solutions be suitable for you?üëáüèΩ\n\nüåç Seamless Climate Reporting:\nInitiate climate reporting easily, quickly, and at an affordable price! Our platform automates climate reporting according to all requirements, ensuring excellent results with just a few clicks and a user-friendly interface.\n\nüö≤ Holistic Mobility Data:\nIn collaboration with Telia, we provide data to assist mobility planners and property developers in transitioning to a sustainable mobility system in your city. Track travel patterns and measure the climate impact of changes over time.\n\nüå± Climate Campaign Manager:\nTurn climate actions into a fun, team-building, and engaging process. Set up educational climate challenges within your company and foster a culture where climate action feels like a shared responsibility.\n\nüéØ We focus on consumption-based carbon emissions.\nü¶Ü Our team comprises 18 dedicated climate enthusiasts.\nüìç We have offices in Trondheim and Oslo.\nüí¨ Get in touch with us via DM or through our website: www.ducky.eco",
  "apiStatusUrls": "inherit",
  "homepage": "www.ducky.eco/",
  "developerDocumentation": "doc.api.ducky.eco/",
  "categories": [
    "sustainability",
    "climate_action",
    "climate_reporting",
    "data_driven",
    "environmental_technology",
    "climate_management",
    "climate_solutions",
    "climate_impact_measurement",
    "climate_data_api",
    "climate_software",
    "climate_awareness",
    "climate_data"
  ],
  "category": "Science",
  "methods": [
    {
      "url": "/calculate/finance",
      "method": "financialFootprintForTransactions",
      "httpMethod": "post",
      "tag": "calculate",
      "typeScriptTag": "calculate",
      "description": "Get kgCO2e per monetary transaction",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Data Source to use for calculation",
          "default": "norway"
        },
        {
          "name": "categoryMapping",
          "schema": "string",
          "description": "Format output based on a custom mapping",
          "default": "ducky"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "habits",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "transactions",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Consumption for each transaction.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/calculate/food-and-drink",
      "method": "foodAndDrinkMetrics",
      "httpMethod": "post",
      "tag": "calculate",
      "typeScriptTag": "calculate",
      "description": "Get kgCO2e, weight, waste, and money spent per food category.",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Data Source to use for calculation",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "food",
          "schema": "object",
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/calculator",
      "method": "annualFootprintByCategories",
      "httpMethod": "post",
      "tag": "calculate",
      "typeScriptTag": "calculate",
      "description": "Calculate annual footprint by categories",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Data Source to use for calculation",
          "default": "norway"
        },
        {
          "name": "categories",
          "schema": "array",
          "description": "Categories to include in response",
          "default": "[\"public\",\"consumption\",\"transport\",\"food\",\"energy\"]"
        },
        {
          "name": "subCategories",
          "schema": "boolean",
          "description": "Include subcategories",
          "default": false
        },
        {
          "name": "scope",
          "schema": "string",
          "description": "Is the footprint for an individual or a household",
          "default": "household"
        },
        {
          "name": "precision",
          "schema": "boolean",
          "description": "Prevent rounding of percentages",
          "default": false
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "consumption",
          "schema": "object",
          "description": ""
        },
        {
          "name": "energy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "food",
          "schema": "object",
          "description": ""
        },
        {
          "name": "household",
          "schema": "object",
          "description": ""
        },
        {
          "name": "transport",
          "schema": "object",
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/change",
      "method": "improveBehaviourTips",
      "httpMethod": "post",
      "tag": "change",
      "typeScriptTag": "change",
      "description": "Get tips for improving behaviour.",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Region of the requested data set",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'.\n\nWe provide historical data only for the values of the returned indicators.\n\n[See detailed user documentation here](https://support.ducky.eco/en/change-general)\nPlease note that some indicators have \"static\" values and do not support historical data.\n"
        },
        {
          "name": "language",
          "schema": "string",
          "description": "Language of the text returned",
          "default": "no"
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "Order the results using the specified attribute.\nThe attributes of type \"indicator\" (co2, points, moneySaved) are sorted by descending order.\nThe attributes of type \"investment\" (financialCost, timeRequirement, socialDifficulty) are sorted by ascending order.\n",
          "default": "co2"
        },
        {
          "name": "returnLegacyTipId",
          "schema": "boolean",
          "description": "Choose whether the legacy tipID should be outputted.\n",
          "default": false
        },
        {
          "name": "ignoreZeroOrNegativeTips",
          "schema": "boolean",
          "description": "Choose whether to ignore tips that would produce a zero or negative impact in terms of CO2 footprint.\nSuch cases will happen if a user already has good habits on some area, and the tip concerns improving behaviour exactly on this subject, but to a lesser extent than the user is already doing.\nTips where this is the case are by default removed to avoid crowding the output with tips that are not helpful.\n",
          "default": true
        },
        {
          "name": "filteringCriteria",
          "schema": "object",
          "description": ""
        },
        {
          "name": "habits",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/compare/food-and-drink",
      "method": "averageFootprintByFilteringCriteria",
      "httpMethod": "post",
      "tag": "compare",
      "typeScriptTag": "compare",
      "description": "Fetch an average food-and-drink footprint based on filtering criteria.",
      "parameters": [
        {
          "name": "filters",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/compare/general",
      "method": "averageCategoryFootprint",
      "httpMethod": "post",
      "tag": "compare",
      "typeScriptTag": "compare",
      "description": "Fetch an average category-based footprint based on filtering criteria.",
      "parameters": [
        {
          "name": "filters",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/compare/transport",
      "method": "transportFootprint",
      "httpMethod": "post",
      "tag": "compare",
      "typeScriptTag": "compare",
      "description": "Fetch transport footprint for a given area.",
      "parameters": [
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "areaId",
          "schema": "string",
          "required": true,
          "description": "Area code of the area for which transport footprint is requested. [See detailed area ID documentation](https://doc.api.ducky.eco/area-ids-mapping) for mapping between area names and their codes.\n",
          "example": "no-3024"
        },
        {
          "name": "timeRange",
          "schema": "string",
          "description": "Choose which time range you wish to receive data for. Currently the most granular data available is per month, which means that if a monthly range is requested, you will directly receive the data for the requested month. If you choose a yearly range, the values are a sum of all monthly values accross the given year.\n",
          "default": "monthly"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/convert/energy",
      "method": "kgCo2EPerKwhUsed",
      "httpMethod": "post",
      "tag": "convert",
      "typeScriptTag": "convert",
      "description": "Get kgCO2e per kWh used.",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Data Source to use for calculation",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "categories",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A mapping with the categories provided in the input.\nOther categories are not included.\n\nEach category contains the amount of CO2 equivalent, both in kilograms.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/convert/finance",
      "method": "financialFootprintByCategory",
      "httpMethod": "post",
      "tag": "convert",
      "typeScriptTag": "convert",
      "description": "Get footprint in kilograms of CO2-equivalents for financial transactions\nby category.\n",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Data Source to use for calculation",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "categories",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A mapping with the categories provided in the input.\nOther categories are not included.\n\nEach category contains the amount of CO2 equivalent, both in kilograms.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/convert/food-and-drink",
      "method": "foodAndDrinkFootprint",
      "httpMethod": "post",
      "tag": "convert",
      "typeScriptTag": "convert",
      "description": "Get kgCO2e per calory or weight of Food and Drink.",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Data Source to use for calculation",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "categories",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A mapping with the categories provided in the input.\nOther categories are not included.\n\nEach category contains the weight and the amount of CO2 equivalent, both in kilograms.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/convert/goods-and-services",
      "method": "itemFootprintAndSavings",
      "httpMethod": "post",
      "tag": "convert",
      "typeScriptTag": "convert",
      "description": "Get footprint of an item and optionally the avoided emissions obtained by choosing to rent, repair or buy an item used instead of new.",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Data Source to use for calculation",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "items",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/convert/goods-and-services/list-items",
      "method": "goodsAndServicesListItems",
      "httpMethod": "get",
      "tag": "convert",
      "typeScriptTag": "convert",
      "description": "Get a list of all valid items for the convert/goods-and-services endpoint.",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Data Source to use for calculation",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/convert/transport",
      "method": "transportEmissions",
      "httpMethod": "post",
      "tag": "convert",
      "typeScriptTag": "convert",
      "description": "Get kgCO2e per distance travelled.",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Data Source to use for calculation",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "categories",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A mapping with the categories provided in the input.\nOther categories are not included.\n\nEach category contains the amount of CO2 equivalent, both in kilograms.\n"
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/ping",
      "method": "statusCheck",
      "httpMethod": "get",
      "tag": "ping",
      "typeScriptTag": "ping",
      "description": "Check if the API is running",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/ping/protected",
      "method": "checkTokenValidity",
      "httpMethod": "get",
      "tag": "ping",
      "typeScriptTag": "ping",
      "description": "Check if the API is running and if your authentication token is valid",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/report/scope-1",
      "method": "computeScope1Emissions",
      "httpMethod": "post",
      "tag": "reporting",
      "typeScriptTag": "reporting",
      "description": "Compute Scope 1 GHG emissions.",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "required": false,
          "description": "Data Source to use for calculation",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "required": false,
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n",
          "default": "today"
        },
        {
          "name": "entries",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/report/scope-2",
      "method": "computeScope2Emissions",
      "httpMethod": "post",
      "tag": "reporting",
      "typeScriptTag": "reporting",
      "description": "Compute Scope 2 GHG emissions.",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "required": false,
          "description": "Data Source to use for calculation",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "required": false,
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n",
          "default": "today"
        },
        {
          "name": "entries",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/track/transport",
      "method": "transportIndicators",
      "httpMethod": "post",
      "tag": "track",
      "typeScriptTag": "track",
      "description": "Get indicators for a certain administrative area.",
      "parameters": [
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "timeRange",
          "schema": "string",
          "description": "Choose which time range you wish to receive data for. Currently the most granular data available is per month, which means that if a monthly range is requested, you will directly receive the data for the requested month. If you choose a yearly range, the values are an average of all monthly values accross the given year\n",
          "default": "monthly"
        },
        {
          "name": "areaId",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "no-5001"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/translate/car",
      "method": "co2EToCarDistance",
      "httpMethod": "post",
      "tag": "translate",
      "typeScriptTag": "translate",
      "description": "Translate kilograms CO2 equivalent to distance travelled by car",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Region of the requested data set",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "kgco2e",
          "schema": "number",
          "required": true,
          "description": "",
          "example": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of valid translations\n"
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/translate/energy",
      "method": "co2EToEnergyUsage",
      "httpMethod": "post",
      "tag": "translate",
      "typeScriptTag": "translate",
      "description": "Translate kilograms CO2 equivalent to the usage of an electrical appliance.",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Region of the requested data set",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "kgco2e",
          "schema": "number",
          "required": true,
          "description": "",
          "example": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of valid translations\n"
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/translate/plane",
      "method": "co2EToPlaneDistance",
      "httpMethod": "post",
      "tag": "translate",
      "typeScriptTag": "translate",
      "description": "Translate kilograms CO2 equivalent to distance flown by an airplane.",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Region of the requested data set",
          "default": "norway"
        },
        {
          "name": "dataFromDate",
          "schema": "string",
          "description": "You can choose to use data from any date for which we have data\nin our database. If you do not submit a date, the current (and thereby the\nmost updated data) will be used. Must be of format 'yyyy-mm-dd'\n"
        },
        {
          "name": "kgco2e",
          "schema": "number",
          "required": true,
          "description": "",
          "example": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of valid translations\n"
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/translate/tree",
      "method": "co2EToTreeArea",
      "httpMethod": "post",
      "tag": "translate",
      "typeScriptTag": "translate",
      "description": "Translate kilograms CO2 equivalent to how quickly it can be absorbed by a number of trees.",
      "parameters": [
        {
          "name": "dataSource",
          "schema": "string",
          "description": "Region of the requested data set",
          "default": "norway"
        },
        {
          "name": "kgco2e",
          "schema": "number",
          "required": true,
          "description": "",
          "example": 100
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An area of trees absorbing the given amount of kg CO2e per year\n"
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    }
  ],
  "repositoryDescription": "Ducky is a climate-focused company empowering organizations and individuals worldwide to track, reduce, and report emissions through intuitive software solutions. Services include seamless climate reporting, holistic mobility data, and climate campaign management. Ducky's {language} SDK generated by Konfig (https://konfigthis.com/).",
  "logo": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/ducky/logo.png",
  "openApiRaw": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/ducky/openapi.yaml",
  "openApiGitHubUi": "https://github.com/konfig-sdks/openapi-examples/tree/HEAD/ducky/openapi.yaml",
  "previewLinkImage": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/ducky/imagePreview.png",
  "faviconUrl": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/ducky/favicon.png",
  "clientNameCamelCase": "ducky",
  "lastUpdated": "2024-03-28T23:15:08.809Z",
  "typescriptSdkUsageCode": "import { Ducky } from 'ducky-typescript-sdk';\n\nconst ducky = new Ducky({\n    /*\n     * Protected requests expect the `Authorization` header with a bearer token respecting the format `Bearer $ACCESS_TOKEN`.\n     * \n     * This **documentation is interactive**: set your `access_token` here and test all requests directly from your browser\n     * (`access_token` must be formatted as `Bearer $ACCESS_TOKEN`).\n     * Or set it individually for each request, in the `Authorization` header.\n     * \n     * \n     * ### Introduction\n     * The API requires an `access_token` for every request (except [/ping](https://storage.googleapis.com)).\n     * \n     * Step-by-step:\n     * 1. [Ask Ducky](mailto:api@ducky.eco) for a `CLIENT_ID` and a `CLIENT_SECRET`\n     * 2. Negotiate an `access_token` with Auth0\n     * 3. Send authenticated requests to Ducky API\n     * \n     * Keep reading to learn how to obtain an `access_token` and use it to perform requests.\n     * \n     * ---\n     * \n     * ### Prerequisite\n     * To use the API, you have to get `CLIENT_ID` and a `CLIENT_SECRET`.\n     * To do so, please contact Ducky at [api@ducky.eco](mailto:api@ducky.eco).\n     * \n     * > Note: even without an `access_token`, you can browse the documentation and explore its possibilities by looking at the example outputs.\n     * \n     * \n     * ### Getting an access token\n     * #### Request\n     * Authentication is provided by Auth0. Before using Ducky API, you send a query to Auth0, asking for an `access_token`.\n     * \n     * To negotiate an `access_token`, send a request based on this curl snippet (update it with your `$CLIENT_ID`& `$CLIENT_SECRET`):\n     * \n     * ```shell\n     * curl --request POST \\\n     *   --url https://ducky-prod.eu.auth0.com/oauth/token \\\n     *   --header 'content-type: application/json' \\\n     *   --data '{\"client_id\":\"$CLIENT_ID\",\"client_secret\":\"$CLIENT_SECRET\",\"audience\":\"ducky-api-prod\",\"grant_type\":\"client_credentials\"}'\n     * ```\n     * \n     * #### Response\n     * The response contains an `access_token` and an expiration time. You should store both and use the `access_token` until its expiration date. After expiration, repeat the process above to negotiate a new token.\n     * \n     * ```json\n     * {\n     *   \"access_token\": \"example_access_token\",\n     *   \"token_type\": \"Bearer\",\n     *   \"expires_in\": 86400\n     * }\n     * ```\n     * ```\n     * \n     * ### Usage\n     * Now that you have an `access_token`, you can start using the Ducky API.\n     * Send the `access_token` with each request, in an `Authorization` header.\n     * Make sure to prefix it with the `token_type` which is always `Bearer`.\n     * \n     * ##### Example\n     * To make sure you're ready to use the API, you can use the [/ping/protected endpoint](https://storage.googleapis.com).\n     * It validates your `access_token` and checks if the API is ready to accept connections.\n     * \n     * ```shell\n     * curl --request GET \\\n     *   --url https://api.ducky.eco/v3/ping/protected \\\n     *   --header 'authorization: Bearer example_access_token'\n     * ```\n     * \n     */\n    apiKeyAuth: \"AUTHORIZATION\"\n})",
  "typescriptSdkFirstRequestCode": "// Get kgCO2e per monetary transaction\nconst financialFootprintForTransactionsResponse = ducky.calculate.financialFootprintForTransactions({\n    dataSource: \"norway\"\n    categoryMapping: \"ducky\"\n})",
  "fixedSpecFileName": "ducky-fixed-spec.yaml"
}