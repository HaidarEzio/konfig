{
  "securitySchemes": {
    "Authorization": {
      "name": "Authorization",
      "type": "apiKey",
      "in": "header",
      "description": "Header value must be equal to `lucca application={yourApiKey}`"
    }
  },
  "apiBaseUrl": "https://example.ilucca.net",
  "apiVersion": "1.0",
  "apiDescription": "Welcome on the documentation for the Timmi Timesheet API.\n",
  "apiTitle": "Timmi Timesheet API",
  "endpoints": 13,
  "sdkMethods": 29,
  "schemas": 26,
  "parameters": 45,
  "contactUrl": "https://www.lucca.fr",
  "contactEmail": "developers@lucca.fr",
  "originalCustomRequest": {
    "type": "GET",
    "url": "https://stoplight.io/api/v1/projects/lucca/lucca-legacyapi/nodes/reference/Timmi-Timesheet-v3.yaml?fromExportButton=true&snapshotType=http_service&deref=optimizedBundle"
  },
  "customRequestSpecFilename": "lucca-hr.com_TimmiTimesheet.yaml",
  "difficultyScore": 43.25,
  "difficulty": "Easy",
  "company": "Lucca",
  "serviceName": "Timmi Timesheet",
  "sdkName": "lucca-timmi-timesheet-{language}-sdk",
  "clientName": "LuccaTimmiTimesheet",
  "metaDescription": "Nereo est un éditeur de logiciels de gestion des ressources humaines, basé à Saint Etienne, qui propose à ses clients des solutions accessibles en ligne pour faciliter des tâches chronophages et sans réelle valeur ajoutée telles que la gestion des congés, des temps et activités ou encore des notes de frais.\n\nCréée en décembre 2011, Nereo propose déjà une solution complète de gestion de congés et absences en mode SaaS baptisée Nereo Congés.",
  "apiStatusUrls": "inherit",
  "homepage": "lucca-hr.com",
  "developerDocumentation": "developers.lucca.fr/",
  "categories": [
    "hr",
    "hr_management",
    "resource_management",
    "human_resources",
    "scheduling",
    "time_management",
    "attendance_management",
    "hr_automation"
  ],
  "category": "HR Talent & Recruitment",
  "methods": [
    {
      "url": "/api/v3/timeentries",
      "method": "deleteMultiple",
      "httpMethod": "delete",
      "tag": "TimeEntries",
      "typeScriptTag": "timeEntries",
      "description": "Delete multiple TimeEntries",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v3/timeentries",
      "method": "listTimeEntries",
      "httpMethod": "get",
      "tag": "TimeEntries",
      "typeScriptTag": "timeEntries",
      "description": "List TimeEntries",
      "parameters": [
        {
          "name": "paging",
          "schema": "string",
          "required": true,
          "description": "{offset},{limit}. Defaults to 0,1000.",
          "example": "100,0"
        },
        {
          "name": "ownerId",
          "schema": "array",
          "description": "User's identifier"
        },
        {
          "name": "startsAt",
          "schema": "string",
          "description": "{comparator},{date-time}",
          "example": "between,2021-01-01,2021-02-01"
        },
        {
          "name": "axisSectionsId",
          "schema": "array",
          "description": "Filter on a comma-separated list of AxisSections identifiers."
        },
        {
          "name": "axisSectionsCode",
          "schema": "array",
          "description": "Filter on a comma-separated list of AxisSections codes."
        },
        {
          "name": "modifiedAt",
          "schema": "string",
          "description": "{comparator},{date-time}",
          "example": "since,2021-01-01T08:45:23Z"
        },
        {
          "name": "archivedAt",
          "schema": "string",
          "description": "{comparator},{date-time}",
          "example": "since,2021-01-01T08:45:23Z"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v3/timeentries",
      "method": "createMultiple",
      "httpMethod": "post",
      "tag": "TimeEntries",
      "typeScriptTag": "timeEntries",
      "description": "Create new TimeEntries",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v3/timeentries",
      "method": "updateMultiple",
      "httpMethod": "put",
      "tag": "TimeEntries",
      "typeScriptTag": "timeEntries",
      "description": "Update multiple TimeEntries",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v3/timeentries/{timeEntryId}",
      "method": "removeById",
      "httpMethod": "delete",
      "tag": "TimeEntries",
      "typeScriptTag": "timeEntries",
      "description": "Delete a TimeEntry by id",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "OK"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v3/timeentries/{timeEntryId}",
      "method": "getById",
      "httpMethod": "get",
      "tag": "TimeEntries",
      "typeScriptTag": "timeEntries",
      "description": "Get a TimeEntry by id",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v3/timeentries/{timeEntryId}",
      "method": "updateById",
      "httpMethod": "put",
      "tag": "TimeEntries",
      "typeScriptTag": "timeEntries",
      "description": "Update a TimeEntry by id",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "startsAt",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "2022-01-01T08:00:00"
        },
        {
          "name": "duration",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "03:45:00",
          "default": "00:00:00"
        },
        {
          "name": "unit",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 0
        },
        {
          "name": "endsAt",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ownerId",
          "schema": "integer",
          "required": true,
          "description": "",
          "example": 0
        },
        {
          "name": "authorId",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "createdAt",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "creationSource",
          "schema": "integer",
          "required": false,
          "description": "",
          "default": 2
        },
        {
          "name": "modifierId",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "modifiedAt",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "layer",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "axisSections",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "comment",
          "schema": "null",
          "required": false,
          "description": ""
        },
        {
          "name": "timeTypeId",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v3/timmitimesheets",
      "method": "list",
      "httpMethod": "get",
      "tag": "Timesheets",
      "typeScriptTag": "timesheets",
      "description": "List timesheets",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "array",
          "description": "User's identifier."
        },
        {
          "name": "startsOn",
          "schema": "string",
          "description": "Filter on the start date of the timesheet.",
          "example": "between,2022-01-01,2022-02-01"
        },
        {
          "name": "status",
          "schema": "array",
          "description": "Filter on the timesheet workflow status."
        },
        {
          "name": "endsOn",
          "schema": "string",
          "description": "Filter on the end date of the timesheet.",
          "example": "until,2022-01-01"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v3/timmitimesheets/remindable",
      "method": "listDue",
      "httpMethod": "get",
      "tag": "Timesheets",
      "typeScriptTag": "timesheets",
      "description": "List due timesheets",
      "parameters": [
        {
          "name": "ownerIds",
          "schema": "array",
          "description": "List unique identifier of submitters."
        },
        {
          "name": "legalEntityIds",
          "schema": "array",
          "description": "List unique identifier of submitters' legal establishments."
        },
        {
          "name": "managerIds",
          "schema": "array",
          "description": "List unique identifier of submitters' manager."
        },
        {
          "name": "start",
          "schema": "string",
          "description": "Prevent older timesheets to be returned."
        },
        {
          "name": "end",
          "schema": "string",
          "description": "Prevent earlier timesheets to be returned (date excluded). Defaults to today when not sent."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/timmi/services/workflow/remind",
      "method": "sendReminderEmail",
      "httpMethod": "post",
      "tag": "Workflow",
      "typeScriptTag": "workflow",
      "description": "Remind Timesheets",
      "parameters": [
        {
          "name": "timesheets",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/timmi/services/workflow/submit",
      "method": "submitTimesheet",
      "httpMethod": "post",
      "tag": "Workflow",
      "typeScriptTag": "workflow",
      "description": "Submit Timesheets",
      "parameters": [
        {
          "name": "timesheets",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/timmi/services/workflow/cancel",
      "method": "cancelTimesheetById",
      "httpMethod": "post",
      "tag": "Workflow",
      "typeScriptTag": "workflow",
      "description": "Cancel Timesheets by id",
      "parameters": [
        {
          "name": "timesheets",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/timmi/services/workflow/approve",
      "method": "approveTimesheetsById",
      "httpMethod": "post",
      "tag": "Workflow",
      "typeScriptTag": "workflow",
      "description": "Approve Timesheets by id",
      "parameters": [
        {
          "name": "timesheets",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/timmi/services/workflow/deny",
      "method": "denyTimesheetById",
      "httpMethod": "post",
      "tag": "Workflow",
      "typeScriptTag": "workflow",
      "description": "Deny Timesheets by id",
      "parameters": [
        {
          "name": "timesheets",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/timmi/services/workflow/invalidate",
      "method": "invalidateTimesheetById",
      "httpMethod": "post",
      "tag": "Workflow",
      "typeScriptTag": "workflow",
      "description": "Invalidate Timesheets by id",
      "parameters": [
        {
          "name": "timesheets",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/timmi-timesheet/api/reports",
      "method": "createBasedOnTemplate",
      "httpMethod": "post",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Create a new Report",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "",
          "example": "TEMPLATEID"
        },
        {
          "name": "startsOn",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "endsOn",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "filters",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "columns",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "## Status\n\nThe generation of a report content is a background process. As long as this process is not complete, the report status stays `pending`. Once the report is complete, its status is set to `done`. May an error be encountered while generating its content, then its status is set to `error`.\n\nThe report content can only be viewed and downloaded once it is `done`.\n\n## Start & end dates\n\nStart `startsOn` and end `endsOn` dates can be left `null`. In this case, default dates from the report-template are applied.\n\n## Filters\n\nFilters are usually set in the report-template. But these can be overriden for a given report.\n\n## Fields"
        },
        {
          "statusCode": "401",
          "description": "Unauthorized"
        },
        {
          "statusCode": "500",
          "description": "Internal Server Error"
        }
      ]
    },
    {
      "url": "/timmi-timesheet/api/reports/{reportId}/download-csv",
      "method": "downloadCsvReport",
      "httpMethod": "get",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Download Report as CSV",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "Unauthorized"
        },
        {
          "statusCode": "404",
          "description": "Not Found"
        },
        {
          "statusCode": "500",
          "description": "Internal Server Error"
        }
      ]
    },
    {
      "url": "/timmi-timesheet/api/reports/{reportId}/download-excel",
      "method": "downloadExcelReport",
      "httpMethod": "get",
      "tag": "Reports",
      "typeScriptTag": "reports",
      "description": "Download Report as Excel",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "Unauthorized"
        },
        {
          "statusCode": "404",
          "description": "Not Found"
        },
        {
          "statusCode": "500",
          "description": "Internal Server Error"
        }
      ]
    }
  ],
  "repositoryDescription": "Nereo, based in Saint Etienne, is a HR management software publisher offering online solutions to simplify time-consuming tasks like leave management, time tracking, and expense reports. Established in December 2011. Lucca's {language} SDK for Timmi Timesheet API generated by Konfig (https://konfigthis.com/).",
  "logo": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/lucca/timmi-timesheet/logo.svg",
  "openApiRaw": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/lucca/timmi-timesheet/openapi.yaml",
  "openApiGitHubUi": "https://github.com/konfig-sdks/openapi-examples/tree/HEAD/lucca/timmi-timesheet/openapi.yaml",
  "previewLinkImage": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/lucca/timmi-timesheet/imagePreview.jpg",
  "faviconUrl": "https://raw.githubusercontent.com/konfig-sdks/openapi-examples/HEAD/lucca/timmi-timesheet/favicon.png",
  "clientNameCamelCase": "luccaTimmiTimesheet",
  "lastUpdated": "2024-03-26T19:55:14.920Z",
  "typescriptSdkUsageCode": "import { LuccaTimmiTimesheet } from 'lucca-timmi-timesheet-typescript-sdk';\n\nconst luccaTimmiTimesheet = new LuccaTimmiTimesheet({\n    // Header value must be equal to `lucca application={yourApiKey}`\n    authorization: \"AUTHORIZATION\"\n})",
  "typescriptSdkFirstRequestCode": "// Delete multiple TimeEntries\nconst deleteMultipleResponse = luccaTimmiTimesheet.timeEntries.deleteMultiple()",
  "fixedSpecFileName": "lucca-timmi-timesheet-fixed-spec.yaml"
}